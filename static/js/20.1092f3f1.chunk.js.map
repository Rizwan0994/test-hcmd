{"version":3,"file":"static/js/20.1092f3f1.chunk.js","mappings":"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","sources":["Routes/Dashboard/components/SchedulePatient/DetailPanel/PatientNotes/notesForm.js","Routes/Dashboard/components/SchedulePatient/DetailPanel/PatientNotes/index.jsx","Routes/Dashboard/components/SchedulePatient/DetailPanel/PatientRelatives/relativesForm.js","services/APIs/services/patientGuradianService.js","Routes/Dashboard/components/SchedulePatient/DetailPanel/PatientRelatives/index.jsx","Components/Modals/ImageVideoModal.jsx","Routes/Dashboard/components/SchedulePatient/DetailPanel/PictureData/PictureDataImage/index.jsx","Routes/Dashboard/components/SchedulePatient/DetailPanel/PictureData/CreateEditAttachment.jsx","Routes/Dashboard/components/SchedulePatient/DetailPanel/PictureData/index.jsx","Routes/Dashboard/components/SchedulePatient/DetailPanel/TodoList/todoForm.js","Routes/Dashboard/components/SchedulePatient/DetailPanel/TodoList/index.jsx","Routes/Dashboard/components/SchedulePatient/DetailPanel/Dictation/CreateEditDictation.jsx","Routes/Dashboard/components/SchedulePatient/DetailPanel/Dictation/ActiveDictation.jsx","Routes/Dashboard/components/SchedulePatient/DetailPanel/Dictation/index.jsx","Routes/Dashboard/components/SchedulePatient/DetailPanel/index.jsx","services/APIs/services/dischargeReasonService.js","Routes/Dashboard/components/SchedulePatient/AddNewPatient/NewPatientSchedule/index.jsx","Routes/Dashboard/components/SchedulePatient/AddNewPatient/AttendeeProvider/index.jsx","Routes/Dashboard/components/SchedulePatient/AddNewPatient/ConsultancyProvider/index.jsx","Routes/Dashboard/components/SchedulePatient/AddNewPatient/NextOfKin/index.jsx","Routes/Dashboard/components/SchedulePatient/AddNewPatient/HCMDProvider/index.jsx","Routes/Dashboard/components/SchedulePatient/AddNewPatient/PatientForm/index.jsx","services/APIs/services/patientslotService.js","Routes/Dashboard/components/SchedulePatient/AddNewPatient/index.jsx","Routes/Dashboard/components/SchedulePatient/components/TransferPatient/transferForm.js","Routes/Dashboard/components/SchedulePatient/components/TransferPatient/index.jsx","Routes/Dashboard/components/SchedulePatient/components/DeletePatient/deletePatientForm.js","Routes/Dashboard/components/SchedulePatient/components/DeletePatient/index.jsx","Routes/Dashboard/components/SchedulePatient/components/PatientIsVisited/index.jsx","Routes/Dashboard/components/SchedulePatient/components/SecondaryBillingCode/index.jsx","Routes/Dashboard/components/SchedulePatient/index.jsx"],"sourcesContent":["\nconst getNotesForm = () => {\n    return [\n        {\n            \"name\": \"note\",\n            \"label\": \"Note\",\n            \"valueKey\": \"note\",\n            \"value\": \"\",\n            \"type\": \"textarea\",\n            \"validationType\": \"string\",\n            \"validations\": [{\n                \"type\": \"required\",\n                \"params\": [\"Note is Required!\"]\n            }],\n            \"isEditable\": true,\n            \"pluginConfiguration\": { \"rows\": 3 },\n            \"classes\": { wrapper: \"col-12\", label: \"\", field: \"form-control vh-60\", error: \"\" },\n        },\n    ]\n}\nexport default getNotesForm;","import React, { useCallback, useMemo, useState } from 'react'\nimport { LinearProgress } from '@mui/material';\nimport { DataGridPro } from '@mui/x-data-grid-pro';\nimport { MuiDeleteAction, MuiEditAction } from 'Components/MuiDataGrid';\nimport moment from 'moment-timezone';\nimport { Button, Card } from 'react-bootstrap';\nimport classes from \"Routes/TaskBoard/TasksPage.module.css\";\nimport getNotesForm from './notesForm';\nimport ModalReactstrap from 'Components/Modals/Modal';\nimport FormGenerator from 'Components/FormBuilder/Build/pages/FormGenerator';\nimport { toastPromise } from 'redux/common';\nimport { sortObjectsByField } from 'services/helper/default';\nimport { TakeConfirmation } from 'Components/components';\nimport patientService from 'services/APIs/services/patientService';\n\nexport default function PatientNotes({\n    card, patientId, rowData,\n    index, setMainState, className = '',\n    data = []\n}) {\n    const [state, setState] = useState({\n        create: false,\n        update: false\n    })\n\n    const onCancelHandler = useCallback(() => setState(prev => ({ ...prev, create: false, update: false })), []);\n\n    const onSubmitHandler = useCallback(async (body, mode, id) => {\n        if (mode === 'create') {\n            await toastPromise({\n                func: async (resolve, reject) => {\n                    try {\n                        const data = await patientService.noteCreate({ payload: { patientId, ...body } });\n                        if (data?.status === 1) setMainState(prev => ({ ...prev, patientData: { ...prev.patientData, patientNotes: [data.data, ...prev.patientData?.patientNotes] } }))\n                        resolve(1);\n                    } catch (error) {\n                        console.error(error);\n                        reject(0);\n                    }\n                }, loading: 'Creating note.', error: 'Could not create note.', success: 'note created.',\n                options: { id: \"create-notes\" }\n            });\n        }\n        else if (mode === 'update') {\n            await toastPromise({\n                func: async (resolve, reject) => {\n                    try {\n                        const data = await patientService.noteUpdate({ payload: { ...body, id } });\n                        setMainState(prev => ({\n                            ...prev, patientData: {\n                                ...prev.patientData,\n                                patientNotes: prev.patientData?.patientNotes.map((item) => {\n                                    if (item.id === data.data.id) return { ...item, ...data.data }\n                                    return item;\n                                })\n                            }\n                        }))\n                        resolve(1);\n                    } catch (error) {\n                        console.error(error);\n                        reject(0);\n                    }\n                }, loading: 'Updating note.', error: 'Could not update note.', success: 'note updated.',\n                options: { id: \"update-notes\" }\n            });\n        };\n        onCancelHandler();\n    }, [onCancelHandler, patientId, setMainState]);\n\n    const onDelete = useCallback(async (id) => {\n        TakeConfirmation({\n            title: \"Are you sure to delete the selected note?\",\n            onDone: async () => {\n                await patientService.noteDelete({ payload: { id } });\n                setMainState(prev => ({\n                    ...prev, patientData: {\n                        ...prev.patientData,\n                        patientNotes: prev.patientData?.patientNotes.filter((item) => item.id !== id)\n                    }\n                }));\n            }\n        })\n    }, [setMainState]);\n\n    const columns = useMemo(() => [\n        {\n            field: \"actions\", headerName: \"Actions\", type: \"actions\", minWidth: 180,\n            getActions: (params) => [\n                <MuiEditAction onClick={() => setState(prev => ({ ...prev, update: params.row }))} />,\n                <MuiDeleteAction onClick={() => onDelete(params.id)} />,\n            ],\n        },\n        {\n            field: \"date\", headerName: \"Date\", minWidth: 180, flex: 0,\n            renderCell: (params) => (\n                <>{moment().format(\"MM/DD/YY\")}</>\n            ),\n        },\n        {\n            field: \"notes\", headerName: \"Notes\", minWidth: 200, flex: 1,\n            renderCell: (params) => (\n                <div className='line-clamp line-clamp-3 my-2'>{params.row.note}</div>\n            ),\n        },\n    ], [onDelete]);\n\n    // get task data sort\n    const NotesData = useMemo(() => sortObjectsByField(data, \"createdAt\"), [data]);\n\n    return (<>\n        <Card className='card p-2 m-1'>\n            <div className=\"d-flex justify-content-between\">\n                <div\n                    className=\"accordion-button collapsed cursor-pointer\"\n                    data-bs-toggle=\"collapse\"\n                    data-bs-target={`#panelsStayOpen-collapse-${card.id}-${patientId}`}\n                    aria-expanded=\"false\"\n                    aria-controls={`panelsStayOpen-collapse-${card.id}-${patientId}`}\n                >\n                    <div className={`${classes.title} font-weight-bold`}>\n                        {`${rowData?.firstName ? `${rowData?.firstName} ${rowData?.lastName ? rowData?.lastName : ''} -` : ''}  Notes`}\n                    </div>\n                </div>\n\n            </div>\n            <div id={`panelsStayOpen-collapse-${card.id}-${patientId}`} className={`accordion-collapse collapse show`} aria-labelledby={`card-${card.id}`}>\n                <div className=\"accordion-body\">\n                    <div className={`my-2 cstm-mui-datagrid ${!NotesData?.length ? 'loading' : 'not_loading'}`} style={{ maxHeight: '88vh', width: '100%', flexGlow: 1 }}>\n                        <DataGridPro\n                            columns={columns}\n                            rows={NotesData ? NotesData : []}\n                            autoHeight\n                            density=\"compact\"\n                            disableColumnFilter\n                            getRowHeight={() => \"auto\"}\n                            onRowClick={({ row }) => setState(prev => ({ ...prev, update: row }))}\n                            components={{\n                                LoadingOverlay: LinearProgress,\n                                Footer: () => (<></>)\n                            }}\n                        />\n                    </div>\n                    <Button variant=\"primary\" size=\"sm\" onClick={(e) => {\n                        setState(prev => ({ ...prev, create: true }));\n                    }}>\n                        Add Notes\n                    </Button>\n                </div>\n            </div>\n            <div className='d-flex'>\n                <CreateEditNotes\n                    fieldName='Notes'\n                    showModal={Boolean(state.create || state.update)}\n                    onSubmit={onSubmitHandler}\n                    onCancel={onCancelHandler}\n                    mode={(state.create ? 'create' : (state.update && 'update'))}\n                    updateData={state.update} />\n            </div>\n        </Card>\n    </>)\n}\n\nexport const CreateEditNotes = ({ showModal, onSubmit, onCancel, mode = 'create', updateData, fieldName = 'field', patientId }) => {\n    let taskJSONForm = useMemo(() => {\n        const formData = getNotesForm();\n        return formData.map((item) => {\n            if (updateData) {\n                if (item.name === 'dueDate') item.value = moment(updateData[item.name]).toDate();\n                else if (updateData.hasOwnProperty(item.name)) item.value = updateData[item.name];\n            }\n            return item;\n        })\n    }, [updateData]);\n\n    return (\n        <ModalReactstrap\n            header={<>{mode === 'update' ? 'Edit ' + fieldName : 'Create ' + fieldName}</>}\n            toggle={onCancel}\n            show={showModal}\n            size='lg'\n            body={\n                showModal &&\n                <FormGenerator\n                    className=\"m-0\"\n                    formClassName={\"row\"}\n                    dataFields={taskJSONForm}\n                    onSubmit={(data) => onSubmit(data, mode, (mode === 'update' && updateData.id) || patientId)}\n                />\n            }\n        />\n    )\n}\n","\nconst getRelativeForm = () => [\n    {\n        \"name\": \"name\",\n        \"label\": \"Contact Name\",\n        \"valueKey\": \"name\",\n        \"value\": \"\",\n        \"type\": \"text\",\n        \"validationType\": \"string\",\n        \"validations\": [{\n            \"type\": \"required\",\n            \"params\": [\"Relative name is required!\"]\n        }],\n        \"isEditable\": true,\n        \"classes\": { wrapper: \"col-12\", label: \"\", field: \"form-control\", error: \"\" },\n    },\n    {\n        \"name\": \"contactNumber\",\n        \"label\": \"Contact number\",\n        \"valueKey\": \"contactNumber\",\n        \"value\": \"\",\n        \"type\": \"text\",\n        \"validationType\": \"string\",\n        \"validations\": [{\n            \"type\": \"required\",\n            \"params\": [\"Relative number is required!\"]\n        }],\n        \"isEditable\": true,\n        \"classes\": { wrapper: \"col-12 col-md-6\", label: \"\", field: \"form-control\", error: \"\" },\n    },\n    {\n        \"name\": \"priority\",\n        \"label\": \"Priority\",\n        \"valueKey\": \"priority\",\n        \"value\": \"\",\n        \"type\": \"text\",\n        \"validationType\": \"string\",\n        \"validations\": [],\n        \"isEditable\": true,\n        \"classes\": { wrapper: \"col-12 col-md-6\", label: \"\", field: \"form-control\", error: \"\" },\n    },\n    {\n        \"name\": \"relation\",\n        \"label\": \"Relation\",\n        \"valueKey\": \"relation\",\n        \"value\": \"\",\n        \"type\": \"text\",\n        \"validationType\": \"string\",\n        \"validations\": [],\n        \"isEditable\": true,\n        \"classes\": { wrapper: \"col-12 col-md-6\", label: \"\", field: \"form-control\", error: \"\" },\n    },\n    {\n        \"name\": \"typeOfNumber\",\n        \"label\": \"Phone Type\",\n        \"valueKey\": \"typeOfNumber\",\n        \"value\": \"\",\n        \"type\": \"text\",\n        \"validationType\": \"string\",\n        \"validations\": [],\n        \"isEditable\": true,\n        \"classes\": { wrapper: \"col-12 col-md-6\", label: \"\", field: \"form-control\", error: \"\" },\n    },\n    {\n        \"name\": \"note\",\n        \"label\": \"Notes\",\n        \"valueKey\": \"note\",\n        \"value\": \"\",\n        \"type\": \"text\",\n        \"validationType\": \"string\",\n        \"validations\": [],\n        \"isEditable\": true,\n        \"classes\": { wrapper: \"col-12\", label: \"\", field: \"form-control\", error: \"\" },\n    }\n]\n\nexport default getRelativeForm;","import { CONST } from \"utils/constants\";\nimport { preparePayload } from \"../serviceProviders/Encryptor\";\nimport PlaceholderApiProvider from \"../serviceProviders/PlaceholderApiProvider\";\n\nclass PatientGuradianService extends PlaceholderApiProvider {\n    async create({ payload = {}, config = { headers: {} }, headers = {}, encrypted = true }) {\n        let data = payload;\n        let configuration = { ...config, ...CONST.API_TIMEOUT.L2 };\n        data = preparePayload({ data, payload, encrypted, configuration, headers })\n        return this.api.post('/create', data, configuration);\n    }\n    async update({ payload = {}, config = { headers: {} }, headers = {}, encrypted = true }) {\n        let data = payload;\n        let configuration = { ...config };\n        data = preparePayload({ data, payload, encrypted, configuration, headers })\n        return this.api.post('/update', data, configuration);\n    }\n    async delete({ payload = {}, config = { headers: {} }, headers = {}, encrypted = true }) {\n        let data = payload;\n        let configuration = { ...config };\n        data = preparePayload({ data, payload, encrypted, configuration, headers })\n        return this.api.post('/delete', data, configuration);\n    }\n}\n\nconst patientGuradianService = new PatientGuradianService('/patientguardian');\n\nexport default patientGuradianService;\n","import React, { useCallback, useMemo, useState } from 'react'\nimport { LinearProgress } from '@mui/material';\nimport { DataGridPro } from '@mui/x-data-grid-pro';\nimport { toastPromise } from 'redux/common';\nimport classes from \"Routes/TaskBoard/TasksPage.module.css\";\nimport { Button, Card } from 'react-bootstrap';\nimport { MuiDeleteAction, MuiEditAction } from 'Components/MuiDataGrid';\nimport getRelativeForm from './relativesForm';\nimport moment from 'moment-timezone';\nimport ModalReactstrap from 'Components/Modals/Modal';\nimport FormGenerator from 'Components/FormBuilder/Build/pages/FormGenerator';\nimport { TakeConfirmation } from 'Components/components';\nimport patientGuradianService from 'services/APIs/services/patientGuradianService';\n\nexport default function PatientRelatives({\n    card, patientId, rowData,\n    index, setMainState, className = '',\n    data = []\n}) {\n    const [state, setState] = useState({\n        page: 1,\n        total: 0,\n        pageSize: 10,\n        rowCountState: 0,\n        loading: false,\n        filters: {\n            search: null,\n            designation: null,\n            status: null,\n        },\n        create: false,\n        update: false\n    });\n    const onCancelHandler = useCallback(() => setState(prev => ({ ...prev, create: false, update: false })), []);\n\n    const onSubmitSuccess = useCallback((data) => {\n        if (state.update) {\n            setMainState(prev => ({\n                ...prev, patientData: {\n                    ...prev.patientData,\n                    patientGuardians: prev.patientData?.patientGuardians.map((item) => {\n                        if (item.id === data.data.id) return { ...item, ...data.data }\n                        return item;\n                    })\n                }\n            }))\n        } else {\n            if (data?.status === 1) setMainState(prev => ({ ...prev, patientData: { ...prev.patientData, patientGuardians: [data.data, ...prev.patientData?.patientGuardians] } }))\n        }\n    }, [setMainState, state.update]);\n\n    const onDelete = useCallback(async (id) => {\n        TakeConfirmation({\n            title: \"Are you sure to remove the selected relative data?\",\n            onDone: async () => {\n                await patientGuradianService.delete({ payload: { id } });\n                setMainState(prev => ({\n                    ...prev, patientData: {\n                        ...prev.patientData,\n                        patientGuardians: prev.patientData?.patientGuardians.filter((item) => item.id !== id)\n                    }\n                }))\n            }\n        })\n    }, [setMainState]);\n\n    const columns = useMemo(() => [\n        {\n            field: \"actions\", type: \"actions\", headerName: \"Actions\", flex: 1,\n            getActions: (params) => [\n                <MuiEditAction onClick={() => setState(prev => ({ ...prev, update: params.row }))} />,\n                <MuiDeleteAction onClick={() => onDelete(params.id)} />,\n            ],\n        },\n        // patient name\n        { field: \"name\", headerName: \"name\", flex: 1, },\n        // Relationship of Next of Kin with patient\n        { field: \"relation\", headerName: \"Relation\", flex: 1, },\n        // Contact Number - Next of Kin\n        { field: \"contactNumber\", headerName: \"Phone\", flex: 1, },\n        // Contact Type - Next of Kin\n        { field: \"typeOfNumber\", headerName: \"Phone type\", flex: 1, },\n        // Priority - Next of Kin\n        { field: \"priority\", headerName: \"Priority\", flex: 1, },\n        // Notes - Next of Kin\n        { field: \"note\", headerName: \"Notes\" },\n    ], [onDelete]);\n\n    return (<>\n        <Card className='card p-2 m-1'>\n            <div className=\"d-flex justify-content-between\">\n                <div\n                    className=\"accordion-button collapsed cursor-pointer\"\n                    data-bs-toggle=\"collapse\"\n                    data-bs-target={`#panelsStayOpen-collapse-${card.id}-${patientId}`}\n                    aria-expanded=\"false\"\n                    aria-controls={`panelsStayOpen-collapse-${card.id}-${patientId}`}\n                >\n                    <div className={`${classes.title} font-weight-bold`}>\n                        {`${rowData?.firstName ? `${rowData?.firstName} ${rowData?.lastName ? rowData?.lastName : ''} -` : ''} Next of Kin`}\n                    </div>\n                </div>\n            </div>\n            <div id={`panelsStayOpen-collapse-${card.id}-${patientId}`} className={`accordion-collapse collapse show`} aria-labelledby={`card-${card.id}`}>\n                <div className=\"accordion-body\">\n                    <div className={`my-2 cstm-mui-datagrid ${!data?.length ? 'loading' : 'not_loading'}`} style={{ maxHeight: '88vh', width: '100%', flexGlow: 1 }}>\n                        <DataGridPro\n                            rows={data ? data : []}\n                            columns={columns}\n                            autoHeight\n                            density=\"compact\"\n                            disableColumnFilter\n                            onRowClick={({ row }) => setState(prev => ({ ...prev, update: row }))}\n                            components={{\n                                LoadingOverlay: LinearProgress,\n                                Footer: () => (<></>)\n                            }}\n                        />\n                    </div>\n                    <Button variant=\"primary\" size=\"sm\" onClick={(e) => {\n                        setState(prev => ({ ...prev, create: true }));\n                    }}>\n                        Add Contact\n                    </Button>\n                </div>\n            </div>\n            <CreateEditRelative\n                fieldName='Relative'\n                showModal={Boolean(state.create || state.update)}\n                onSubmitSuccess={onSubmitSuccess}\n                onCancel={onCancelHandler}\n                patientId={patientId}\n                mode={(state.create ? 'create' : (state.update && 'update'))}\n                updateData={state.update} />\n        </Card>\n    </>)\n}\n\nexport const CreateEditRelative = ({ showModal, onSubmitSuccess, onCancel, mode = 'create', updateData, fieldName = 'field', patientId, directSubmit }) => {\n\n    const onSubmitHandler = useCallback(async (body, mode, id) => {\n        if (directSubmit) {\n            if (mode === \"create\") body.id = Date.now();\n            onSubmitSuccess(body);\n            onCancel();\n            return;\n        }\n        if (mode === 'create') {\n            await toastPromise({\n                func: async (resolve, reject) => {\n                    try {\n                        const data = await patientGuradianService.create({ payload: { patientId, ...body } });\n                        onSubmitSuccess(data);\n                        resolve(1);\n                    } catch (error) {\n                        console.error(error);\n                        reject(0);\n                    }\n                }, loading: 'Creating...', error: 'Could not create.', success: ' created.',\n                options: { id: \"create-patient\" }\n            });\n        }\n        else if (mode === 'update') {\n            await toastPromise({\n                func: async (resolve, reject) => {\n                    try {\n                        const data = await patientGuradianService.update({ payload: { ...body, id } });\n                        onSubmitSuccess(data);\n                        resolve(1);\n                    } catch (error) {\n                        console.error(error);\n                        reject(0);\n                    }\n                }, loading: 'Updating...', error: 'Could not update.', success: 'Updated.',\n                options: { id: \"update-patient\" }\n            });\n        };\n        onCancel();\n    }, [onCancel, patientId, onSubmitSuccess, directSubmit]);\n\n    let taskJSONForm = useMemo(() => {\n        const formData = getRelativeForm();\n        return formData.map((item) => {\n            if (updateData) {\n                if (item.name === 'dueDate') item.value = moment(updateData[item.name]).toDate();\n                else if (updateData.hasOwnProperty(item.name)) item.value = updateData[item.name];\n            }\n            return item;\n        })\n    }, [updateData]);\n    return (\n        <ModalReactstrap\n            header={<>{mode === 'update' ? 'Edit ' + fieldName : 'Create ' + fieldName}</>}\n            toggle={onCancel}\n            show={showModal}\n            body={\n                showModal &&\n                <FormGenerator\n                    className=\"m-0\"\n                    formClassName={\"row\"}\n                    dataFields={taskJSONForm}\n                    onSubmit={(data) => onSubmitHandler(data, mode, mode === 'update' && updateData.id)}\n                />\n            }\n        />\n    )\n}\n","import React, { useMemo } from 'react'\nimport ReactImageVideoLightbox from \"react-image-video-lightbox\";\n\nexport default function ImageVideoModal({ data, startImgID, showResourceCount = true, onCloseImageHandler }) {\n\n    const ImageVideoData = useMemo(() =>\n        data.filter((item) => [\"image\", \"video\"].includes(item.mediaType.split(\"/\").shift()))\n            .map((item) => {\n                const itemType = item.mediaType.split(\"/\").shift();\n                if (itemType === \"video\") return { ...item, url: item.mediaUrl, type: \"video\", title: 'video title' }\n                return { ...item, url: item.mediaUrl, type: \"photo\", altTag: 'Alt Photo' }\n            }), [data]);\n\n    const startIndex = useMemo(() =>\n        startImgID ? ImageVideoData.findIndex((item) => item.id === startImgID) : 0,\n        [ImageVideoData, startImgID]);\n\n    return (\n        <div className=\"modal modal-lg-fullscreen fade show d-block task-image-gallery\" id=\"imageGallery\" tabIndex={-1} role=\"dialog\" aria-labelledby=\"dropZoneLabel\" aria-modal=\"true\">\n            <ReactImageVideoLightbox\n                data={ImageVideoData}\n                startIndex={startIndex}\n                showResourceCount={showResourceCount}\n                onCloseCallback={onCloseImageHandler}\n            />\n        </div>)\n}\n","import React from 'react'\nimport moment from 'moment-timezone'\nimport { MuiTooltip } from 'Components/components'\nimport { Card, Col } from 'react-bootstrap'\nimport { IconButton } from '@mui/material'\nimport { useSelector } from 'react-redux'\nimport ImageVideoModal from 'Components/Modals/ImageVideoModal'\nimport { CHAT_CONST } from 'redux/constants/chatConstants'\nimport { dispatch } from 'redux/store'\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport { getImageURL } from 'redux/common'\nimport { changeModel } from 'redux/actions/modelAction'\nimport { CHAT_MODELS } from 'Routes/Chat/Models/models'\n\nexport default function PictureDataImage({ data, onEdit, onUpdate, onDelete, imagesData = [] }) {\n    const { imageId } = useSelector((state) => state.chat);\n    if (imageId)\n        return (\n            <ImageVideoModal\n                data={imagesData}\n                startImgID={imageId}\n                onCloseImageHandler={() => dispatch({ type: CHAT_CONST.IMAGE_INDEX, payload: 0 })}\n            />\n        )\n    return (\n        // <li className=\"my-1\">\n        <Col md={4}>\n            <Card className='flex-row'>\n                {data.mediaType.includes(\"image\") ?\n                    <Card.Img variant=\"left\" src={getImageURL(data.mediaUrl, \"200x200\", false)} height={'auto'} width={200} className=\"cursor-pointer\"\n                        onClick={() => dispatch({ type: CHAT_CONST.IMAGE_INDEX, payload: data.id })} />\n                    :\n                    <div style={{ height: \"auto\", width: \"200px\", cursor: \"pointer\" }}\n                        onClick={() => {\n                            changeModel(CHAT_MODELS.PDF_VIEWER);\n                            dispatch({ type: CHAT_CONST.SET_PDF_URL, payload: data.mediaUrl, fileName: data.fileName, id: data.id })\n                        }}\n                    >\n                        <svg fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z\"></path>\n                        </svg>\n                    </div>\n                }\n                <Card.Body className='d-flex flex-column justify-content-between'>\n                    <Card.Text className='line-clamp line-clamp-6'>{data.note}</Card.Text>\n                    <div className='d-flex align-items-center'>\n                        <div className='mb-0'>\n                            <MuiTooltip title=\"Edit\">\n                                <IconButton color='primary' onClick={() => onEdit(data)}>\n                                    <EditIcon />\n                                </IconButton>\n                            </MuiTooltip>\n                            <MuiTooltip title=\"Delete\">\n                                <IconButton color='secondary' onClick={() => onDelete(data.id)}>\n                                    <DeleteIcon />\n                                </IconButton>\n                            </MuiTooltip>\n                            <Card.Text className='desg-tag mb-0 mt-1'>\n                                {`Created on ${moment(data.createdAt).format(\"MM/DD/YY\")}`}\n                            </Card.Text>\n                        </div>\n                    </div>\n                </Card.Body>\n            </Card>\n        </Col>\n        // </li>\n    )\n}\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport jsPDF from 'jspdf';\nimport Dropzone from 'react-dropzone'\nimport moment from 'moment-timezone';\nimport ModalReactstrap from 'Components/Modals/Modal';\nimport { Button, Col, Row } from 'react-bootstrap';\nimport { onUploadImage, uploadToS3 } from 'utils/AWS_S3/s3Connection';\nimport { FileTarget, MultipleImage } from 'Routes/Chat/Models/Dropzone';\n\nconst defaultState = {\n    imageFiles: [],\n    isUploading: false,\n    pdfName: '',\n    pdfCaption: '',\n    pdfUploadLoad: null,\n    uploadLoad: null,\n    note: \"\",\n    setProfilePic: false,\n}\nexport const CreateEditAttachment = ({ showModal, type, onSubmit, onCancel, mode = 'create', updateData, fieldName = 'field', patientId }) => {\n    // const [data, setData] = useState({ note: '', file: null });\n    const [state, setState] = useState(defaultState);\n    const pictureBtn = useRef();\n\n    useEffect(() => {\n        showModal && !updateData &&\n            setTimeout(() => {\n                pictureBtn?.current?.click();\n            }, 200);\n        if (updateData) setState(prev => ({ ...prev, note: updateData.note }));\n    }, [showModal, updateData]);\n\n    const funcupload = useCallback(async (i, isImagePDF = false) => {\n        const file = i.file;\n        const onUploadProgress = (e) => {\n            if (isImagePDF) setState(prev => ({ ...prev, pdfUploadLoad: parseInt(e.progress * 100) }))\n            else setState(prev => ({ ...prev, uploadLoad: parseInt(e.progress * 100) }))\n        }\n        const presignedUrl = await onUploadImage(file);\n        const uploadedImageUrl = await uploadToS3(presignedUrl, file, onUploadProgress);\n        return { mediaUrl: uploadedImageUrl, mediaType: file.type, fileName: file.name };\n    }, []);\n\n    const mergeImagestoPdf = useCallback(async () => {\n        const pdf = new jsPDF(\"p\", \"\");\n        const pdfName = state.pdfName || \"HCMD_PDF_\" + moment().format(\"MM/DD/YY\");\n        const paddingX = 5;\n        const paddingY = 5;\n        const pageWidth = pdf.internal.pageSize.getWidth();\n        // const pageHeight = pdf.internal.pageSize.getHeight();\n        state.imageFiles.forEach((item, index) => {\n            const { file } = item;\n            const imageURL = URL.createObjectURL(file);\n            // pdf.addImage(imageURL, 'any', 10, (index + 1) * 10, 210, 297);\n            // pdf.addImage(imageURL, 'any',);\n            pdf.addImage(imageURL, \"any\", paddingX, paddingY, pageWidth - (paddingX * 2), 0);\n            pdf.addPage();\n        });\n        pdf.deletePage(state.imageFiles.length + 1);\n        let pdfData = pdf.output(\"blob\")\n        let myBlob = new Blob([pdfData], { type: 'application/pdf' });\n        myBlob.name = pdfName;\n        // myBlob.lastModified = new Date();\n        const myFile = new File([myBlob], `${pdfName}.pdf`, { type: myBlob.type, });\n        // pdf.save(pdfName + '.pdf');\n        const url = await funcupload({\n            file: myFile,\n            name: state.pdfName,\n            caption: state.pdfCaption\n        }, true);\n        return url;\n    }, [state.imageFiles, state.pdfName, state.pdfCaption, funcupload]);\n\n    const OnSave = useCallback(async () => {\n        let resp = {}\n        let body = { note: state.note };\n        if (state.error) return;\n        if (!!state.imageFiles.length) {\n            setState(prev => ({ ...prev, isUploading: true }));\n            if (state.imageFiles.length === 1) resp = await funcupload(state.imageFiles[0])\n            else if (state.imageFiles.length > 1) resp = await mergeImagestoPdf()\n        } else if (updateData.mediaUrl) {\n            resp.mediaUrl = updateData.mediaUrl\n        }\n        body = { ...body, ...resp }\n        if (state.setProfilePic) body.profilePicture = true;\n        setState(defaultState)\n        onSubmit(body, mode, updateData?.id || patientId);\n    }, [funcupload, mergeImagestoPdf, mode, onSubmit, patientId, state.error, state.imageFiles,\n        state.note, updateData?.id, state.setProfilePic, updateData?.mediaUrl]);\n\n    const onDropFilesHandler = useCallback((filesList) => {\n        let imageFiles = [];\n        Array.from(filesList).map((i, ind) => {\n            const fileData = { id: ind, file: i, name: i.name, caption: \"\", uploadLoad: 0 };\n            if (i.type.includes(\"image\")) imageFiles.push(fileData);\n            else imageFiles.push(fileData);\n            return null\n        });\n        setState(prev => ({ ...prev, imageFiles }));\n        return () => {\n            setState(defaultState);\n        }\n    }, []);\n\n    const clearFiles = useCallback(() => {\n        onDropFilesHandler([]);\n    }, [onDropFilesHandler]);\n\n    return (\n        <ModalReactstrap\n            show={showModal}\n            size='lg'\n            header={<>{mode === 'update' ? 'Edit ' + fieldName : 'Create ' + fieldName}</>}\n            toggle={onCancel}\n            body={\n                showModal &&\n                <Row>\n                    <Col md={12}>\n                        <Dropzone onDrop={onDropFilesHandler}>\n                            {({ getRootProps, getInputProps }) => (\n                                <section className='border-1 text-center py-2'>\n                                    <div {...getRootProps()}>\n                                        <input {...getInputProps()}\n                                            type=\"file\"\n                                            id=\"filePictureInput\"\n                                            accept=\"image/jpeg, image/jpg, image/png\"\n                                            ref={pictureBtn}\n                                            className=\"dropzone-input\"\n                                        />\n                                        <p className='py-2 mb-0 text-color'>Drag / drop files here, or click to select files</p>\n                                        {updateData &&\n                                            <small className='text-muted'>Please select files to update</small>}\n                                    </div>\n                                </section>\n                            )}\n                        </Dropzone>\n                    </Col>\n                    <Col md={12}>\n                        {!!state?.imageFiles?.length && <>\n                            {state?.imageFiles.length > 1 ?\n                                <MultipleImage state={state} setState={setState} />\n                                :\n                                (state.imageFiles.map(item =>\n                                    <FileTarget key={item.id} item={item} isUploading={state.isUploading}\n                                        setState={setState} progress={state.isUploading && { value: item.uploadLoad }}\n                                        OnClose={clearFiles}\n                                    />)\n                                )\n                            }\n                        </>}\n                    </Col>\n                    {((!!state?.imageFiles?.length && state?.imageFiles?.length === 1)\n                        || (mode === 'update' && updateData.mediaType.includes(\"image\"))) &&\n                        <Col md={12} className=\"mt-2\">\n                            <div className=\"custom-control custom-checkbox\">\n                                <input\n                                    className=\"custom-control-input\"\n                                    id={`select-all`}\n                                    name={`select-all`}\n                                    type=\"checkbox\"\n                                    value={-2}\n                                    checked={state.setProfilePic}\n                                    onChange={e => setState(prev => ({ ...prev, setProfilePic: e.target.checked }))}\n                                />\n                                <label className=\"custom-control-label\" htmlFor={`select-all`}>\n                                    Set as profile picture\n                                </label>\n                            </div>\n                        </Col>}\n                    <Col md={12}>\n                        <div className=\"form-group my-2\">\n                            <label htmlFor=\"groupName\">Notes: </label>\n                            <textarea\n                                className=\"form-control form-control-md\"\n                                id=\"note\"\n                                name=\"note\"\n                                placeholder=\"Type Notes here\"\n                                autoComplete='off'\n                                maxLength={250}\n                                rows={5}\n                                onChange={(e) => setState(prev => ({ ...prev, note: e.target.value }))}\n                                value={state.note}\n                                required\n                            />\n                        </div>\n                    </Col>\n                </Row >\n            }\n            footer={<>\n                <Button variant='secondary' onClick={onCancel}>Cancel</Button>\n                <Button variant='primary' onClick={OnSave} disabled={state.isUploading}>{state.isUploading ? 'Saving...' : 'Save'}</Button>\n            </>}\n        />\n    )\n}","import React, { useCallback, useMemo, useState } from 'react';\nimport { Button, Card, Row, } from 'react-bootstrap';\nimport classes from \"Routes/TaskBoard/TasksPage.module.css\";\nimport { toastPromise } from 'redux/common';\nimport { TakeConfirmation } from 'Components/components';\nimport { ExclamationCircle } from 'react-bootstrap-icons';\nimport PictureDataImage from 'Routes/Dashboard/components/SchedulePatient/DetailPanel/PictureData/PictureDataImage';\nimport { CreateEditAttachment } from './CreateEditAttachment';\nimport { sortObjectsByField } from 'services/helper/default';\nimport patientService from 'services/APIs/services/patientService';\n\nexport default function PictureData({\n    rowData, type = \"image\",\n    card, patientId,\n    index, setMainState, setPatientProfile,\n    data = []\n}) {\n    const [state, setState] = useState({\n        create: false,\n        update: false,\n        loading: false,\n        text: '',\n    });\n    const onCancelHandler = useCallback(() => setState(prev => ({ ...prev, create: false, update: false })), []);\n\n    const onSubmitHandler = useCallback(async (body, mode, id) => {\n        if (mode === 'create') {\n            await toastPromise({\n                func: async (resolve, reject) => {\n                    try {\n                        const data = await patientService.attachmentCreate({ payload: { patientId, ...body } });\n                        if (data?.status === 1)\n                            setMainState(prev => ({\n                                ...prev, patientData: {\n                                    ...prev.patientData,\n                                    patientAttachments: [data.data, ...prev.patientData.patientAttachments]\n                                }\n                            }))\n                        resolve(1);\n                    } catch (error) {\n                        console.error(error);\n                        reject(0);\n                    }\n                }, loading: 'Creating File Data.', error: 'Could not create File Data.', success: 'File data created.',\n                options: { id: \"create-picture\" }\n            });\n        }\n        else if (mode === 'update') {\n            await toastPromise({\n                func: async (resolve, reject) => {\n                    try {\n                        const data = await patientService.attachmentUpdate({ payload: { ...body, patientId, id } });\n                        setMainState(prev => ({\n                            ...prev, patientData: {\n                                ...prev.patientData,\n                                patientAttachments: prev.patientData.patientAttachments.map((item) => {\n                                    if (item.id === data.data.id)\n                                        return { ...item, ...data.data }\n                                    return item;\n                                })\n                            }\n                        }))\n                        resolve(1);\n                    } catch (error) {\n                        console.error(error);\n                        reject(0);\n                    }\n                }, loading: 'Updating File Data.', error: 'Could not update File Data.', success: 'File Data updated.',\n                options: { id: \"update-picture\" }\n            });\n        };\n        if (body.profilePicture)\n            setPatientProfile(patientId, body.mediaUrl);\n        onCancelHandler();\n    }, [onCancelHandler, patientId, setMainState, setPatientProfile]);\n\n    const onDelete = useCallback(async (id) => {\n        TakeConfirmation({\n            title: 'Are you sure about to delete the attached content?',\n            onDone: async () => {\n                await patientService.attachmentDelete({ payload: { id } });\n                setMainState(prev => ({\n                    ...prev, patientData: {\n                        ...prev.patientData,\n                        patientAttachments: prev.patientData?.patientAttachments.filter((item) => item.id !== id)\n                    }\n                }))\n            }\n        })\n    }, [setMainState]);\n    const PictureData = useMemo(() => sortObjectsByField(data, \"createdAt\"), [data]);\n\n    return (<>\n        <Card className='card p-2 m-1'>\n            <div className=\"d-flex justify-content-between\">\n                <div\n                    className=\"accordion-button collapsed cursor-pointer d-flex justify-content-between\"\n                    data-bs-toggle=\"collapse\"\n                    data-bs-target={`#panelsStayOpen-collapse-${card.id}-${patientId}`}\n                    aria-expanded=\"false\"\n                    aria-controls={`panelsStayOpen-collapse-${card.id}-${patientId}`}\n                >\n                    <div className={`${classes.title} font-weight-bold`}>\n                        {`${rowData?.firstName ? `${rowData?.firstName} ${rowData?.lastName ? rowData?.lastName : ''} -` : ''} Picture Data`}\n                    </div>\n                </div>\n            </div>\n            <div id={`panelsStayOpen-collapse-${card.id}-${patientId}`} className={`accordion-collapse collapse show`} aria-labelledby={`card-${card.id}`}>\n                <div className=\"accordion-body\">\n                    <div className=\"my-1 overflow-auto hide-horizonal-scroll\" style={{ maxHeight: '300px' }}>\n                        <Row>\n                            {/* <ul className=\"mb-2\"> */}\n                            {!!PictureData.length ?\n                                PictureData.map((item, index) => {\n                                    // if (type === 'audio') {\n                                    //     return (\n                                    //         <DictationCard\n                                    //             data={item}\n                                    //             key={index}\n                                    //             onUpdate={onSubmitHandler}\n                                    //             onDelete={onDelete}\n                                    //             onEdit={() => setState(prev => ({ prev, update: item }))} />)\n                                    // }\n                                    // else {\n                                    return (\n                                        <PictureDataImage\n                                            imagesData={PictureData}\n                                            data={item}\n                                            key={index}\n                                            onUpdate={onSubmitHandler}\n                                            onDelete={onDelete}\n                                            onEdit={() => setState(prev => ({ ...prev, update: item }))} />)\n                                }\n                                    // }\n                                )\n                                : (<div className=\"w-100 text-center text-muted\">\n                                    <ExclamationCircle size={20} />\n                                    <p className=\"mb-0 text-muted\">\n                                        No data available\n                                    </p>\n                                </div>\n                                )}\n                            {/* </ul> */}\n                        </Row>\n                    </div>\n                    <Button variant=\"primary\" size=\"sm\" onClick={(e) => setState(prev => ({ ...prev, create: true }))}>\n                        {`Add ${type === 'audio' ? 'Dictation' : 'Picture'}`}\n                    </Button>\n                </div>\n            </div>\n            <CreateEditAttachment\n                type={type}\n                fieldName={type === 'audio' ? 'Dictation' : 'Picture Data'}\n                showModal={Boolean(state.create || state.update)}\n                onSubmit={onSubmitHandler}\n                onCancel={onCancelHandler}\n                mode={(state.create ? 'create' : (state.update && 'update'))}\n                updateData={state.update} />\n        </Card>\n    </>);\n}\n\n","import { base } from \"utils/config\";\nimport { CONST } from \"utils/constants\";\n\nexport const priorityOptions = [\n    { \"label\": \"Routine\", \"value\": CONST.MSG_TYPE.ROUTINE },\n    { \"label\": \"Urgent\", \"value\": CONST.MSG_TYPE.URGENT },\n    { \"label\": \"Emergency\", \"value\": CONST.MSG_TYPE.EMERGENCY }\n]\n\nconst getTodoForm = () => {\n    return [\n        {\n            \"name\": \"title\",\n            \"label\": \"Task\",\n            \"valueKey\": \"title\",\n            \"value\": \"\",\n            \"type\": \"textarea\",\n            \"validationType\": \"string\",\n            \"validations\": [{\n                \"type\": \"required\",\n                \"params\": [\"Task is Required!\"]\n            }],\n            \"classes\": { wrapper: \"col-12\", label: \"\", field: \"form-control\", error: \"\" },\n            \"autoFocus\": true,\n            \"isEditable\": true,\n            \"pluginConfiguration\": { \"rows\": 2 }\n        },\n\n        {\n            \"name\": \"assigneeId\",\n            \"label\": \"Assignee\",\n            \"valueKey\": \"assigneeId\",\n            \"value\": \"\",\n            \"placeholder\": \"Select assignee\",\n            \"type\": \"select\",\n            \"validationType\": \"array\",\n            \"validations\": [],\n            \"isEditable\": true,\n            \"optionKey\": {\n                \"url\": base.URL + '/user/list',\n                \"payload\": {\n                    \"query\": {\n                        \"isActive\": true,\n                    },\n                    \"options\": {\n                        \"sort\": [[\"name\", \"asc\"]],\n                        \"populate\": [\"users:own\"],\n                    },\n                    \"keys\": [\"name\", \"firstName\", \"lastName\"],\n                    \"value\": \"\"\n                },\n                \"method\": \"post\",\n                \"labelField\": \"name\",\n                \"valueField\": \"id\"\n            },\n            \"pluginConfiguration\": {\n                \"isAsyncSelect\": true,\n                \"isClearable\": true,\n                \"defaultOptions\": true\n            },\n            \"classes\": { wrapper: \"col-12\", label: \"\", field: \"\", error: \"\" },\n        },\n        {\n            \"name\": \"dueDate\",\n            \"label\": \"Due Date\",\n            \"valueKey\": \"dueDate\",\n            \"value\": \"\",\n            \"type\": \"date\",\n            \"validationType\": \"string\",\n            \"validations\": [],\n            \"isEditable\": true,\n            \"classes\": { wrapper: \"col-md-6 col-12\", label: \"\", field: \"form-control\", error: \"\" },\n            \"pluginConfiguration\": { \"isDateRange\": false }\n        },\n        {\n            \"name\": \"priority\",\n            \"label\": \"Priority\",\n            \"valueKey\": \"priority\",\n            \"value\": [priorityOptions[0]],\n            \"type\": \"select\",\n            \"validationType\": \"array\",\n            \"validations\": [],\n            \"isEditable\": true,\n            \"options\": priorityOptions,\n            \"classes\": { wrapper: \"col-12 col-md-6\", label: \"\", field: \"\", error: \"\" },\n            \"pluginConfiguration\": {}\n        },\n        // {\n        //     \"name\": \"repeat\",\n        //     \"label\": \"Repeatative\",\n        //     \"valueKey\": \"repeat\",\n        //     \"value\": \"\",\n        //     \"type\": \"text\",\n        //     \"validationType\": \"string\",\n        //     \"validations\": [],\n        //     \"classes\": { wrapper: \"col-12 col-md-6\", label: \"\", field: \"form-control\", error: \"\" },\n        //     \"isEditable\": false,\n        // },\n    ]\n}\nexport default getTodoForm;","import React, { useCallback, useMemo, useState } from 'react';\nimport { Button, Card } from 'react-bootstrap';\nimport moment from 'moment-timezone';\nimport classes from \"Routes/TaskBoard/TasksPage.module.css\";\nimport FormGenerator from 'Components/FormBuilder/Build/pages/FormGenerator';\nimport { toastPromise } from 'redux/common';\nimport ModalReactstrap from 'Components/Modals/Modal';\nimport { TakeConfirmation } from 'Components/components';\nimport getTodoForm, { priorityOptions } from './todoForm';\nimport { CONST } from 'utils/constants';\nimport { sortObjectsByField } from 'services/helper/default';\n// MUI Components\nimport { DataGridPro } from '@mui/x-data-grid-pro';\nimport { LinearProgress } from '@mui/material';\nimport { CheckCircle, TaskAlt } from '@mui/icons-material';\nimport { MuiDeleteAction, MuiEditAction, MuiLoadingActionButton } from 'Components/MuiDataGrid';\nimport patientService from 'services/APIs/services/patientService';\n\nexport default function TodoList({\n    card, patientId, rowData,\n    index, setMainState,\n    data = []\n}) {\n    const [state, setState] = useState({\n        create: false,\n        update: false,\n        loading: false,\n        text: '',\n    });\n    const onCancelHandler = useCallback(() => setState(prev => ({ ...prev, create: false, update: false })), []);\n\n    const onSubmitHandler = useCallback(async (body, mode, id) => {\n        // if (body.assigneeId === user.id) return toast.error(\"Can't assign to own user, Please select another assignee\")s\n        if (mode === 'create') {\n            await toastPromise({\n                func: async (resolve, reject) => {\n                    try {\n                        const payload = { ...body, patientId, title: body.title }\n                        const data = await patientService.taskCreate({ payload });\n                        if (data?.status === 1)\n                            setMainState(prev => ({ ...prev, patientData: { ...prev.patientData, patientTasks: [data.data, ...prev.patientData.patientTasks] } }))\n                        resolve(1);\n                    } catch (error) {\n                        console.error(error);\n                        reject(0);\n                    }\n                }, loading: 'Creating task.', error: 'Could not create task.', success: 'task created.',\n                options: { id: \"create-todo\" }\n            });\n        }\n        else if (mode === 'update') {\n            await toastPromise({\n                func: async (resolve, reject) => {\n                    try {\n                        const data = await patientService.taskUpdate({ payload: { ...body, id } });\n                        setMainState(prev => ({\n                            ...prev, patientData: {\n                                ...prev.patientData,\n                                patientTasks: prev.patientData.patientTasks.map((item) => {\n                                    if (item.id === data.data.id) return { ...item, ...data.data }\n                                    return item;\n                                })\n                            }\n                        }))\n                        resolve(1);\n                    } catch (error) {\n                        console.error(error);\n                        reject(0);\n                    }\n                }, loading: 'Updating task.', error: 'Could not update task.', success: 'task updated.',\n                options: { id: \"update-todo\" }\n            });\n        };\n        onCancelHandler();\n    }, [onCancelHandler, patientId, setMainState]);\n\n    const onDelete = useCallback(async (id) => {\n        TakeConfirmation({\n            title: 'Are you sure about to delete the todo?',\n            onDone: async () => {\n                await patientService.taskDelete({ payload: { id } });\n                setMainState(prev => ({\n                    ...prev, patientData: {\n                        ...prev.patientData,\n                        patientTasks: prev.patientData.patientTasks.filter((item) => item.id !== id)\n                    }\n                }))\n            }\n        })\n    }, [setMainState]);\n\n    const columns = useMemo(() => [\n        {\n            field: \"title\", headerName: \"Task\", minWidth: 200,\n            renderCell: ({ row }) => <div>{row.title}</div>\n        },\n        {\n            field: \"date\", headerName: \"Date\", flex: 1,\n            renderCell: ({ row }) => <>{moment(row.createdAt).format(\"MM/DD/YY\")}</>\n        },\n        {\n            field: \"assigneeId\", headerName: \"Assignee\", minWidth: 180,\n            renderCell: ({ row }) => (<>{row.patientAssignee?.name ? row.patientAssignee?.name : '-'}</>)\n        },\n        { field: \"priority\", headerName: \"Priority\", minWidth: 180, cellClassName: \"text-capitalize\" },\n        {\n            field: \"dueDate\", headerName: \"Due date\", flex: 1,\n            renderCell: ({ row }) => <>{row.dueDate ? moment(row.dueDate).format(\"MM/DD/YY\") : '-'}</>\n        },\n        { field: \"repeat\", headerName: \"Repeative\", minWidth: 180, flex: 1 },\n        { field: \"status\", headerName: \"Status\", minWidth: 180, flex: 1 },\n        {\n            field: \"actions\", headerName: \"Actions\", minWidth: 180, align: \"center\", headerAlign: \"center\",\n            renderCell: ({ row }) => <div onClick={e => e.stopPropagation()}>\n                <MuiLoadingActionButton tooltip={\"Mark as Done\"}\n                    Icon={CONST.TASK_STATUS[3].value === row.status ? CheckCircle : TaskAlt}\n                    color={CONST.TASK_STATUS[3].value === row.status ? \"success\" : \"primary\"}\n                    onClick={() => onSubmitHandler({ status: CONST.TASK_STATUS[3].value === row.status ? CONST.TASK_STATUS[0].value : CONST.TASK_STATUS[3].value }, \"update\", row.id)} />\n                <MuiEditAction tooltip={\"Edit Task\"} onClick={() => setState(prev => ({ ...prev, update: row }))} />\n                <MuiDeleteAction tooltip={\"Delete Task\"} onClick={() => onDelete(row.id)} />\n            </div>,\n        },\n    ], [onDelete, onSubmitHandler]);\n\n    // get task data sort\n    const TodoData = useMemo(() => sortObjectsByField(data, \"createdAt\"), [data]);\n\n    return (<>\n        <Card className='card p-2 m-1'>\n            <div className=\"d-flex justify-content-between\">\n                <div\n                    className=\"accordion-button collapsed cursor-pointer\"\n                    data-bs-toggle=\"collapse\"\n                    data-bs-target={`#panelsStayOpen-collapse-${card.id}-${patientId}`}\n                    aria-expanded=\"false\"\n                    aria-controls={`panelsStayOpen-collapse-${card.id}-${patientId}`}\n                >\n                    <div className={`${classes.title} font-weight-bold`}>\n                        {`${rowData?.firstName ? `${rowData?.firstName} ${rowData?.lastName ? rowData?.lastName : ''} -` : ''} Todo List`}\n                    </div>\n                </div>\n            </div>\n            <div id={`panelsStayOpen-collapse-${card.id}-${patientId}`} className={`accordion-collapse collapse show`} aria-labelledby={`card-${card.id}`}>\n                <div className=\"accordion-body\">\n                    <div className={`my-2 cstm-mui-datagrid ${!TodoData?.length ? 'loading' : 'not_loading'}`} style={{ maxHeight: '88vh', width: '100%', flexGlow: 1 }}>\n                        <DataGridPro\n                            columns={columns}\n                            rows={!!TodoData?.length ? TodoData : []}\n                            autoHeight\n                            density=\"compact\"\n                            disableColumnFilter\n                            onRowClick={({ row }) => setState(prev => ({ ...prev, update: row }))}\n                            components={{\n                                LoadingOverlay: LinearProgress,\n                                Footer: () => <></>\n                            }}\n                        />\n                    </div>\n                    <Button variant=\"primary\" size=\"sm\" onClick={(e) => setState(prev => ({ ...prev, create: true }))}>\n                        Add Todo\n                    </Button>\n                </div>\n            </div>\n            <div className='d-flex'>\n                <CreateEditTodo\n                    fieldName='Todo'\n                    showModal={state.create || state.update}\n                    onSubmit={onSubmitHandler}\n                    onCancel={onCancelHandler}\n                    mode={(state.create ? 'create' : (state.update && 'update'))}\n                    rowData={rowData}\n                    updateData={state.update} />\n            </div>\n        </Card>\n    </>)\n}\n\nexport const CreateEditTodo = ({ showModal, onSubmit, onCancel, mode = 'create', updateData, fieldName = 'field', patientId, rowData }) => {\n    let taskJSONForm = useMemo(() => {\n        const formData = getTodoForm();\n        return formData.map((item) => {\n            if (updateData) {\n                if (item.name === 'dueDate') item.value = updateData[item.name] ? moment(updateData[item.name]).toDate() : null;\n                else if (item.name === 'assigneeId') item.value = updateData.patientAssignee ? [{ label: updateData[\"patientAssignee\"].name, value: updateData[\"patientAssignee\"].id }] : [];\n                else if (item.name === 'priority' && updateData.hasOwnProperty(\"priority\")) {\n                    const pri = priorityOptions.find(i => i.value === updateData.priority)\n                    item.value = pri ? [pri] : [];\n                }\n                else if (updateData.hasOwnProperty(item.name)) item.value = updateData[item.name];\n            }\n            return item;\n        })\n    }, [updateData]);\n\n    const onSubmitHandler = useCallback(async (body) => {\n        if (body.hasOwnProperty(\"assigneeId\") && !!body.assigneeId.length) body.assigneeId = body.assigneeId[0]?.value || null;\n        else body.assigneeId = null;\n        if (body.hasOwnProperty(\"priority\") && !!body.priority.length) body.priority = body.priority[0]?.value || null;\n        body.patientName = rowData ? `${rowData.firstName ? `${rowData.firstName}-` : \"\"}${rowData.lastName ? rowData.lastName : ''}` : undefined\n        await onSubmit(body, mode, (mode === 'update' && updateData.id) || patientId)\n    }, [mode, onSubmit, patientId, rowData, updateData?.id]);\n\n    return (\n        <ModalReactstrap\n            header={<>{mode === 'update' ? 'Edit ' + fieldName : 'Create ' + fieldName}</>}\n            toggle={onCancel}\n            show={showModal}\n            size='lg'\n            body={\n                showModal &&\n                <FormGenerator\n                    className=\"m-0\"\n                    formClassName={\"row\"}\n                    dataFields={taskJSONForm}\n                    onSubmit={onSubmitHandler}\n                />\n            }\n        />\n    )\n}\n","import { useCallback, useState } from \"react\";\nimport { Col, Row } from \"react-bootstrap\";\nimport AudioFooter from \"Routes/Chat/Main/UserChat/footer/AudioFooter\";\nimport ModalReactstrap from \"Components/Modals/Modal\";\nimport Input from \"Components/FormBuilder/components/Input\";\nimport ReactDatePicker from \"react-datepicker\";\nimport moment from \"moment-timezone\";\n\nconst defaultState = {\n    label: '',\n    note: '', file: null,\n    uploading: false,\n    comment: '',\n}\n\nexport const CreateEditDictation = ({\n    showModal,\n    type,\n    onSubmit,\n    onCancel,\n    mode = 'create',\n    updateData,\n    continueDictation,\n    fieldName = 'field',\n    patientId,\n    visitDate = moment().toLocaleString()\n}) => {\n\n    return (\n        <ModalReactstrap\n            show={showModal}\n            size='lg'\n            header={<>{continueDictation ? `Continue Dictation of ${continueDictation.label || \"Unknown label\"}`\n                : (mode === 'update' ? 'Edit ' + fieldName : 'Create ' + fieldName)}</>}\n            toggle={onCancel}\n            body={\n                showModal &&\n                <RecordDictation\n                    visitDate={visitDate}\n                    onSubmit={onSubmit}\n                    mode={mode}\n                    patientId={patientId}\n                    continueDictation={continueDictation}\n                />\n            }\n        />\n    )\n}\n\nconst RecordDictation = ({ visitDate, onSubmit, mode, patientId, continueDictation }) => {\n    const [state, setState] = useState({ ...defaultState, date: visitDate });\n\n    const inputChange = useCallback((e) => {\n        const { value, name } = e.target;\n        setState(prev => ({ ...prev, [name]: value }));\n    }, []);\n\n    const onSubmitAudio = useCallback(async ({ fileType, fileName, uploadedAudioUrl, fileData }) => {\n        if (!navigator.onLine) {\n            // Dictation won't upload if user is offline\n        } else {\n            await onSubmit({\n                fileName,\n                mediaType: fileType,\n                mediaUrl: uploadedAudioUrl,\n                note: state.note,\n                label: state.label,\n                comment: state.comment,\n                createdAt: state.date,\n                dictationDate: moment(state.date).format(\"YYYY-MM-DD\")\n            }, mode, patientId);\n            setState({ ...defaultState, date: visitDate });\n        }\n    }, [mode, onSubmit, patientId, state, visitDate]);\n    return (\n        <Row>\n            {!continueDictation &&\n                <Col>\n                    <Input\n                        Label=\"Label\"\n                        placeholder=\"Enter Label\"\n                        name=\"label\"\n                        handleChange={inputChange}\n                        formgroupClass=''\n                        type=\"text\"\n                        error=''\n                        isRequired={false}\n                        value={state.label}\n                    />\n                    <Input\n                        Label=\"Notes\"\n                        placeholder=\"Type notes here\"\n                        name=\"note\"\n                        handleChange={inputChange}\n                        formgroupClass=''\n                        type=\"text\"\n                        error=''\n                        isRequired={false}\n                        value={state.note}\n                    />\n                    <Input\n                        Label=\"Comment\"\n                        placeholder=\"Type comments here\"\n                        name=\"comment\"\n                        handleChange={inputChange}\n                        formgroupClass=''\n                        type=\"text\"\n                        error=''\n                        isRequired={false}\n                        value={state.comment}\n                    />\n                    <div className=\"form-group cstm-datepicker\">\n                        <label htmlFor=\"dictationDate\">Dictation date</label>\n                        <ReactDatePicker\n                            id=\"dictation_date\"\n                            name=\"dictationDate\"\n                            placeholderText=\"Dictation date\"\n                            className=\"form-control flex-grow-1 bg-dark-f input-border text-color font-inherit\"\n                            selected={state.date ? new Date(state.date) : null}\n                            value={state.date ? new Date(state.date) : null}\n                            onChange={(date) => setState(prev => ({ ...prev, date: date }))}\n                            isClearable={true}\n                            autoComplete='off'\n                        />\n                    </div>\n                </Col>}\n            <Col className='my-1' md={12}>\n                <AudioFooter setRecorder={() => { }} onSubmitAudio={onSubmitAudio} type='dictation'\n                    parentFile={continueDictation}\n                    visitDate={visitDate} />\n            </Col>\n        </Row>\n    )\n}","import { useCallback, useMemo } from \"react\";\nimport { Divider, Timeline } from \"antd\";\nimport ModalReactstrap from \"Components/Modals/Modal\";\nimport moment from \"moment-timezone\";\nimport { Button, Col, Row } from \"react-bootstrap\";\nimport { getAudioUrl } from \"redux/common\";\n\nexport default function ActiveAudio({ activeAudio, onClose, onContinueDictation, onDeleteAttachment }) {\n\n    const onDelete = useCallback((id) => {\n        onDeleteAttachment(id, activeAudio?.id)\n    }, [onDeleteAttachment, activeAudio?.id]);\n\n    const audioList = useMemo(() => [{\n        children: <AudioItem audio={activeAudio} autoPlay onDelete={onDelete} />,\n        color: \"green\"\n    }], [activeAudio, onDelete]);\n\n    return (<>\n        <ModalReactstrap\n            header=\"Dictation\"\n            Modalprops={{ className: 'text-color' }}\n            show={Boolean(activeAudio)}\n            toggle={onClose}\n            size='lg'\n            bodyProps={{ style: { overflow: \"auto\", maxHeight: window.innerWidth < 767 ? \"calc(100vh - 100px)\" : \"calc(100vh - 180px)\" } }}\n            body={\n                activeAudio &&\n                <Row>\n                    <Col>\n                        <Timeline items={audioList} className=\"mt-2\" />\n                    </Col>\n                </Row>}\n            footer={<>\n                <div className={`d-flex gap-10`}>\n                    <Button variant='secondary' onClick={onClose}>{'Close'}</Button>\n                    <Button onClick={() => onContinueDictation(activeAudio)}>{'Continue Dictation'}</Button>\n                </div>\n            </>}\n        />\n    </>\n    )\n}\n\nconst AudioItem = ({ audio, autoPlay, onDelete, index }) => {\n    return (\n        <div className='d-flex flex-column'>\n            <Divider className='d-flex text-color mt-0 mb-2' style={{ borderColor: 'grey' }} orientation='left'>\n                {audio.label ? audio.label : 'Unknown label'}\n            </Divider>\n            <div className='d-flex align-items-center w-100'>\n                <audio controls id={'audio-' + audio.id} preload=\"metadata\" className='w-100 my-0' autoPlay={autoPlay}>\n                    <source src={getAudioUrl(audio.mediaUrl, false)} type=\"audio/mpeg\" />\n                    <source src={getAudioUrl(audio.mediaUrl, false)} type=\"audio/ogg\" />\n                    Your browser does not support the audio element.\n                </audio>\n            </div>\n            <div className=\"my-1 w-100\">\n                <p className=\"mb-1\">{`Notes: ${audio.note ? audio.note : 'N/A'}`}</p>\n                <div className='d-flex justify-content-between align-items-center'>\n                    <h6 className=\"mb-0\">{`File: ${audio.fileName}`}</h6>\n                    <p className=\"mb-0 desg-tag\">{`${moment(audio.createdAt).format(\"MM/DD/YY\")}`}</p>\n                </div>\n            </div>\n        </div>\n    )\n}","import React, { useCallback, useMemo, useState } from 'react';\nimport { Button, Card } from 'react-bootstrap';\nimport classes from \"Routes/TaskBoard/TasksPage.module.css\";\nimport { LinearProgress } from '@mui/material';\nimport { DataGridPro } from '@mui/x-data-grid-pro';\nimport { toastPromise } from 'redux/common';\nimport { TakeConfirmation } from 'Components/components';\nimport { CreateEditDictation } from './CreateEditDictation';\nimport ActiveAudio from './ActiveDictation';\nimport { sortObjectsByField } from 'services/helper/default';\nimport moment from 'moment-timezone';\nimport patientService from 'services/APIs/services/patientService';\n\nexport default function Dictation({\n    card, patientId, rowData,\n    index, setMainState, mainState, visitDate,\n    getDetailedData, data = []\n}) {\n    const [state, setState] = useState({\n        create: false,\n        update: false,\n        loading: false,\n        text: '',\n        activeAudio: false,\n        parentDictation: null,\n        continueDictation: null,\n    });\n    const onCancelHandler = useCallback(() => setState(prev => ({ ...prev, create: false, update: false, continueDictation: null, activeAudio: null })), []);\n\n    // get task data sort\n    const DictationData = useMemo(() => {\n        let dictations = data || [];\n        if (!mainState.showAll)\n            dictations = dictations.filter(i => i.dictationDate === moment(visitDate).format(\"YYYY-MM-DD\"));\n        return sortObjectsByField(dictations, \"createdAt\")\n    }, [data, mainState.showAll, visitDate]);\n\n    const updateFiles = useCallback(() => {\n        onCancelHandler();\n        // const updated = DictationData.find(i => i.id === state.activeAudio?.id)\n        // setTimeout(() => {\n        //     setState(prev => ({\n        //         ...prev,\n        //         activeAudio: prev.activeAudio ? updated : null\n        //     }))\n        // }, 1000);\n    }, [onCancelHandler]);\n\n    const onSubmitHandler = useCallback(async (body, mode, id) => {\n        if (!state.continueDictation) {\n            body = {\n                ...body,\n                fileName: body.fileName,\n                mediaType: body.mediaType,\n                mediaUrl: body.mediaUrl,\n            }\n            // delete body.fileName;\n            // delete body.mediaType;\n            // delete body.mediaUrl;\n        }\n        else {\n            // body.attachmentId = state.continueDictation.id\n            body.id = state.continueDictation.id || null;\n            delete body.note;\n            delete body.mediaType;\n            delete body.comment;\n            delete body.label;\n        }\n        if (mode === 'create') {\n            await toastPromise({\n                func: async (resolve, reject) => {\n                    try {\n                        const payload = { patientId, ...body };\n                        const data = !state.continueDictation ?\n                            await patientService.attachmentCreate({ payload }) :\n                            await patientService.attachmentUpdate({ payload });\n                        if (data?.status === 1 && !state.continueDictation) {\n                            setMainState(prev => ({ ...prev, patientData: { ...prev.patientData, patientAttachments: [data.data, ...prev.patientData.patientAttachments] } }))\n                        } else if (data?.status === 1 && state.continueDictation) {\n                            setMainState(prev => ({\n                                ...prev, patientData: {\n                                    ...prev.patientData,\n                                    patientAttachments: prev.patientData.patientAttachments.map(i => {\n                                        if (i.id === data.data.id) return { ...i, mediaUrl: data.data.mediaUrl }\n                                        return i\n                                    })\n                                }\n                            }));\n                            updateFiles();\n                        }\n                        resolve(1);\n                    } catch (error) {\n                        console.error(error);\n                        reject(0);\n                    }\n                }, loading: 'Creating File Data.', error: 'Could not create File Data.', success: 'File data created.',\n                options: { id: \"create-dictation\" }\n            });\n        }\n        else if (mode === 'update') {\n            await toastPromise({\n                func: async (resolve, reject) => {\n                    try {\n                        const data = await patientService.attachmentUpdate({ payload: { ...body, id } });\n                        setMainState(prev => ({\n                            ...prev, patientData: {\n                                ...prev.patientData,\n                                patientAttachments: prev.patientData.patientAttachments.map((item) => {\n                                    if (item.id === data.data.id) return { ...item, ...data.data }\n                                    return item;\n                                })\n                            }\n                        }))\n                        resolve(1);\n                    } catch (error) {\n                        console.error(error);\n                        reject(0);\n                    }\n                }, loading: 'Updating File Data.', error: 'Could not update File Data.', success: 'File Data updated.',\n                options: { id: \"update-dictation\" }\n            });\n\n        };\n        onCancelHandler();\n    }, [onCancelHandler, patientId, setMainState, state.continueDictation, updateFiles]);\n\n    const onDeleteAttachment = useCallback(async (id, attachmentId) => {\n        TakeConfirmation({\n            title: 'Are you sure about to delete the audio and attached content?',\n            onDone: async () => {\n                await patientService.attachmentDelete({ payload: { id } });\n                setMainState(prev => ({\n                    ...prev, patientData: {\n                        ...prev.patientData,\n                        patientAttachments: prev.patientData?.patientAttachments.filter(i => i.id !== id)\n                    }\n                }));\n                updateFiles();\n            }\n        })\n    }, [setMainState, updateFiles]);\n\n    const onDelete = useCallback(async (id) => {\n        TakeConfirmation({\n            title: 'Are you sure about to delete the audio and attached content?',\n            onDone: async () => {\n                await patientService.attachmentDelete({ payload: { id } });\n                setMainState(prev => ({\n                    ...prev, patientData: {\n                        ...prev.patientData,\n                        patientAttachments: prev.patientData?.patientAttachments.filter((item) => item.id !== id)\n                    }\n                }))\n            }\n        })\n    }, [setMainState]);\n\n    const onContinueDictation = useCallback((activeAudio) => {\n        setState(prev => ({ ...prev, continueDictation: activeAudio }))\n    }, []);\n\n    const columns = useMemo(() => [\n        {\n            field: \"actions\", headerName: \"Actions\", type: \"actions\", minWidth: 180, flex: 1,\n            getActions: ({ row }) => [\n                <Button size='sm' onClick={() => setState(prev => ({ ...prev, activeAudio: row }))}>Play</Button>,\n                <Button size='sm' variant='secondary' onClick={() => onContinueDictation(row)}>Continue Dictation</Button>,\n                <Button size='sm' variant='secondary' onClick={() => onDelete(row.id)}>Delete</Button>,\n            ],\n        },\n        {\n            field: \"date\", headerName: \"Date\", minWidth: 180, flex: 0,\n            // renderCell: ({ row }) => (<>{moment(row.createdAt).tz(CONST.LOCAL_TIMEZONE).format(\"MM/DD/YY\")}</>), // .tz(CONST.SERVER_TIMEZONE)\n            renderCell: ({ row }) => <>{row.dictationDate ? moment(row.dictationDate).format(\"MM/DD/YY\") : null}</>\n        },\n        {\n            field: \"label\", headerName: \"Label\", minWidth: 180, flex: 1,\n            renderCell: ({ row }) => (\n                <div>{row.label ? row.label : '-'}</div>\n            ),\n        },\n        {\n            field: \"note\", headerName: \"Notes\", minWidth: 200, flex: 1,\n            renderCell: ({ row }) => (\n                <div>{row.note ? row.note : '-'}</div>\n            ),\n        },\n        {\n            field: \"comments\", headerName: \"Comments\", minWidth: 180, flex: 1,\n            renderCell: ({ row }) => (\n                <>{row.comment}</>\n            ),\n        }\n    ], [onDelete, onContinueDictation]);\n\n    const onViewAllDictation = useCallback(async () => {\n        await toastPromise({\n            func: async (resolve, reject) => {\n                try {\n                    await getDetailedData();\n                    setMainState(prev => ({ ...prev, showAll: !prev.showAll }));\n                    resolve();\n                } catch (error) {\n                    console.error(error);\n                    reject();\n                }\n            }, loading: \"Fetching dictations\", success: \"Successfully Fetch dictations\", error: \"Couldn't fetch dictations\",\n            options: { id: \"read-dictation\" }\n        })\n    }, [getDetailedData, setMainState]);\n\n    const onResetDictation = useCallback(() => setMainState(prev => ({ ...prev, showAll: !prev.showAll })), [setMainState]);\n\n    return (<>\n        <Card className='card p-2 m-1'>\n            <div className=\"d-flex justify-content-between\">\n                <div\n                    className=\"accordion-button collapsed cursor-pointer\"\n                    data-bs-toggle=\"collapse\"\n                    data-bs-target={`#panelsStayOpen-collapse-${card.id}-${patientId}`}\n                    aria-expanded=\"false\"\n                    aria-controls={`panelsStayOpen-collapse-${card.id}-${patientId}`}\n                >\n                    <div className={`${classes.title} font-weight-bold`}>\n                        {`${rowData?.firstName ? `${rowData?.firstName} ${rowData?.lastName ? rowData?.lastName : ''} -` : ''}  Dictation`}\n                    </div>\n                </div>\n            </div>\n            <div id={`panelsStayOpen-collapse-${card.id}-${patientId}`} className={`accordion-collapse collapse show`} aria-labelledby={`card-${card.id}`}>\n                <div className=\"accordion-body\">\n                    <div className=\"buttons d-flex gap-10 my-2\">\n                        <Button variant=\"primary\" size=\"sm\" onClick={(e) => setState(prev => ({ ...prev, create: true }))}>\n                            {`Add Dictation`}\n                        </Button>\n                        <Button variant='outline-secondary' size='sm' onClick={mainState.showAll ? onResetDictation : onViewAllDictation}>\n                            {mainState.showAll ? 'Reset' : 'Show All'}\n                        </Button>\n                    </div>\n                    <div className={`my-2 cstm-mui-datagrid ${!DictationData?.length ? 'loading' : 'not_loading'}`} style={{ maxHeight: '88vh', width: '100%', flexGlow: 1 }}>\n                        <DataGridPro\n                            columns={columns}\n                            rows={!!DictationData?.length ? DictationData : []}\n                            autoHeight\n                            density=\"compact\"\n                            disableColumnFilter\n                            components={{\n                                LoadingOverlay: LinearProgress,\n                                Footer: () => <></>\n                            }}\n                        />\n                    </div>\n                </div>\n            </div>\n            <CreateEditDictation\n                type={\"audio\"}\n                fieldName={'Dictation'}\n                showModal={Boolean(state.create || state.update || state.continueDictation)}\n                onSubmit={onSubmitHandler}\n                onCancel={onCancelHandler}\n                mode={((state.create || state.continueDictation) ? 'create' : (state.update && 'update'))}\n                continueDictation={state.continueDictation}\n                updateData={state.update}\n                visitDate={visitDate} />\n            <ActiveAudio\n                activeAudio={state.activeAudio}\n                onContinueDictation={onContinueDictation}\n                onDeleteAttachment={onDeleteAttachment}\n                updateFiles={updateFiles}\n                onClose={() => setState(prev => ({ ...prev, activeAudio: false }))} />\n        </Card>\n    </>)\n}\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { generatePayload } from \"redux/common\";\nimport { ReactComponent as LoaderSvg } from \"assets/media/heroicons/LoginLoader.svg\";\nimport PatientNotes from \"Routes/Dashboard/components/SchedulePatient/DetailPanel/PatientNotes\";\nimport PatientRelatives from \"Routes/Dashboard/components/SchedulePatient/DetailPanel/PatientRelatives\";\nimport PictureData from \"Routes/Dashboard/components/SchedulePatient/DetailPanel/PictureData\";\nimport TodoList from \"Routes/Dashboard/components/SchedulePatient/DetailPanel/TodoList\";\nimport Dictation from \"Routes/Dashboard/components/SchedulePatient/DetailPanel/Dictation\";\nimport moment from \"moment-timezone\";\nimport ErrorBoundary from \"Components/ErrorBoundry\";\nimport patientService from \"services/APIs/services/patientService\";\n\nconst defaultState = { loading: false, patientData: {}, id: 0, showAll: false };\nexport default function DetailPanelContent({ visitDate, setPatientProfile, params, updatedDetailData, setMainState }) {\n    const [state, setState] = useState(defaultState);\n\n    const getDetailedData = useCallback(async (date) => {\n        setState(prev => ({ ...prev, loading: true }));\n        let payload = await generatePayload({\n            body: date && {\n                dictationDate: {\n                    dateFrom: moment(date).format(\"YYYY-MM-DD\"),\n                    dateTo: moment(date).format(\"YYYY-MM-DD\")\n                }\n            },\n            rest: { id: params.row.id },\n            options: { populate: [\"patientAssign\", \"patientTasks\", \"patientAttachements\", \"patientPaymentCode\", \"patientGuardians\", \"patientNote\"] },\n            findOne: true\n        })\n        const data = await patientService.list({ payload });\n        if (data?.status === 1) {\n            setState(prev => ({ ...prev, loading: false, patientData: data.data }));\n            return;\n        }\n        setState(prev => ({ ...prev, loading: false }));\n    }, [params.row.id]);\n\n    useEffect(() => {\n        const date = visitDate || null; // params.row.patientSlots[0].start ||\n        getDetailedData(date);\n        return () => {\n            setState(defaultState);\n        }\n    }, [getDetailedData, visitDate]);\n\n    useEffect(() => {\n        if (updatedDetailData) {\n            setState(prev => ({\n                ...prev,\n                patientData: {\n                    ...prev.patientData,\n                    patientAttachments: prev.patientData.patientAttachments ? [updatedDetailData, ...prev.patientData.patientAttachments]\n                        : [updatedDetailData]\n                }\n            }))\n            setMainState(prev => ({ ...prev, updatedDetailData: null }));\n        }\n    }, [updatedDetailData, setMainState]);\n\n    const components = useMemo(() =>\n        [\n            {\n                Order: 4,\n                Component: <Dictation\n                    type=\"audio\"\n                    rowData={params.row}\n                    patientId={state.patientData.id}\n                    getDetailedData={getDetailedData}\n                    data={state.patientData?.patientAttachments?.filter(item => item?.mediaType?.includes('audio'))}\n                    mainState={state}\n                    visitDate={visitDate}\n                    setMainState={setState}\n                    card={{ id: 3 }}\n                    index={3} />,\n            },\n            {\n                Order: 2,\n                Component: <TodoList\n                    patientId={state.patientData.id}\n                    rowData={params.row}\n                    data={state.patientData.patientTasks}\n                    setMainState={setState}\n                    card={{ id: 1 }}\n                    index={1} />,\n            },\n            {\n                Order: 5,\n                Component: <PictureData\n                    type=\"image\"\n                    rowData={params.row}\n                    setPatientProfile={setPatientProfile}\n                    patientId={state.patientData.id}\n                    data={state.patientData?.patientAttachments?.filter(item => item?.mediaType?.includes('image') || item?.mediaType?.includes('pdf'))}\n                    setMainState={setState}\n                    card={{ id: 2 }}\n                    index={2} />,\n            },\n            {\n                Order: 1,\n                Component: <PatientRelatives\n                    className=\"w-100\"\n                    rowData={params.row}\n                    patientId={state.patientData.id}\n                    setMainState={setState}\n                    data={state.patientData?.patientGuardians}\n                    card={{ id: 4 }}\n                    index={4} />,\n            },\n            {\n                Order: 3,\n                Component: <PatientNotes\n                    className=\"w-100\"\n                    patientId={state.patientData.id}\n                    rowData={params.row}\n                    setMainState={setState}\n                    data={state?.patientData?.patientNotes}\n                    card={{ id: 5 }}\n                    index={5} />,\n            },\n        ],\n        [state, params.row, setPatientProfile, visitDate, getDetailedData]);\n\n    if (state.loading)\n        return (\n            <div className=\"d-flex justify-content-between\">\n                <LoaderSvg className='login_loader' />\n            </div>\n        )\n\n    try {\n        return (\n            <ErrorBoundary>\n                <div style={{ maxHeight: '50vh', width: '100%' }}>\n                    {components.map((item, index) => (\n                        <React.Fragment key={index}>\n                            {item.Component}\n                        </React.Fragment>\n                    ))}\n                </div>\n            </ErrorBoundary>)\n    } catch (error) {\n        console.error(error);\n    }\n}","import { CONST } from \"utils/constants\";\nimport { preparePayload } from \"../serviceProviders/Encryptor\";\nimport PlaceholderApiProvider from \"../serviceProviders/PlaceholderApiProvider\";\n\nclass DischargeReasonService extends PlaceholderApiProvider {\n    async list({ payload = {}, config = { headers: {} }, headers = {}, encrypted = true }) {\n        let data = payload;\n        let configuration = { ...config, ...CONST.API_TIMEOUT.L2 };\n        data = preparePayload({ data, payload, encrypted, configuration, headers })\n        return this.api.post('/list', data, configuration);\n    }\n    async delete({ payload = {}, config = { headers: {} }, headers = {}, encrypted = true }) {\n        let data = payload;\n        let configuration = { ...config, ...CONST.API_TIMEOUT.L2 };\n        data = preparePayload({ data, payload, encrypted, configuration, headers })\n        return this.api.post('/delete', data, configuration);\n    }\n}\n\nconst dischargeReasonService = new DischargeReasonService('/dischargeReason');\n\nexport default dischargeReasonService;\n","import { useCallback } from \"react\";\nimport Divider from 'antd/lib/divider'\nimport ReactDatePicker from \"react-datepicker\";\nimport moment from 'moment-timezone'\nimport { Col, Row } from \"react-bootstrap\";\nimport CreatableSelect from 'react-select/creatable';\nimport Input from \"Components/FormBuilder/components/Input\";\nimport dischargeReasonService from \"services/APIs/services/dischargeReasonService\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { CONST } from \"utils/constants\";\n\nexport const NewPatientScheduler = ({ state, setState, isDischarge, updateData }) => {\n    const { scheduleInfo } = state;\n    // const [dischargeReasons, setDischargeReasons] = useState([]);\n    // const durationTime = useDebounce(scheduleInfo.duration, 1000);\n\n    // const TimeSlotDuartion = useMemo(() => getTimeFromMins(durationTime), [durationTime]);\n    const setStartDate = useCallback((date) => {\n        // const endDate = moment(date).add(durr ? durr : durationTime, 'minute').toDate();\n        let payload = { start: date, dateError: null }\n        payload.dischargeDate = moment(date).isBefore(moment().format(\"MM/DD/YY\")) ? moment().format() : null;\n        setState(prev => ({ ...prev, scheduleInfo: { ...prev.scheduleInfo, ...payload } }));\n    }, [setState]);\n\n    const setDischargeTime = useCallback((date) => {\n        let payload = {}\n        payload.dischargeDate = date ? moment(date).format() : null;\n        setState(prev => ({ ...prev, scheduleInfo: { ...prev.scheduleInfo, ...payload } }));\n    }, [setState]);\n\n    // const setEndDate = useCallback((date) => {\n    //     const startDate = moment(date).subtract(durationTime, 'minute').toDate();\n    //     setState(prev => ({ ...prev, scheduleInfo: { ...prev.scheduleInfo, end: date, start: startDate, dateError: null } }));\n    // }, [durationTime, setState]);\n\n    // Query hook to fetch data based on queryString & caching\n    const { data: dischargeReasons } = useQuery({\n        queryKey: [\"/deschargeReason/list\"],\n        queryFn: async () => {\n            const data = await dischargeReasonService.list({});\n            return (data.data.map(item => ({ id: item.id, label: item.title, value: item.title })) || []);\n        },\n        keepPreviousData: false,\n        refetchOnWindowFocus: false,\n        staleTime: CONST.QUERY_STALE_TIME.L2,\n        enabled: Boolean(scheduleInfo?.dischargeDate)\n    });\n\n    // useEffect(() => {\n    //     (async () => {\n    //         if (!scheduleInfo.dischargeDate) return;\n    //         const data = await dischargeReasonService.list({});\n    //         setDischargeReasons(data.data.map(item => ({ id: item.id, label: item.title, value: item.title })) || []);\n    //     })();\n    // }, [scheduleInfo.dischargeDate]);\n\n    return (<>\n        <Divider className='text-color mt-4' style={{ borderColor: 'grey' }} orientation='left'>Patient Schedule</Divider>\n        {/* <Row>\n            <Col md={6} className=\"form-group\">\n                <label htmlFor=\"duration\" className=\"mb-1\">Duration (in minutes):</label>\n                <input type='number'\n                    className={`form-control`}\n                    step={15}\n                    min={15}\n                    defaultValue={scheduleInfo.duration || 15}\n                    onChange={(e) => {\n                        setState(prev => ({ ...prev, scheduleInfo: { ...prev.scheduleInfo, duration: parseInt(e.target.value) > 0 && parseInt(e.target.value) <= 1440 ? parseInt(e.target.value) : 15 } }))\n                        setStartDate(scheduleInfo.start, e.target.value);\n                    }}\n                />\n                <p className={`mb-1 ${TimeSlotDuartion.status ? 'text-color' : 'text-danger'}`}>{TimeSlotDuartion.message}</p>\n            </Col>\n        </Row> */}\n        <Row>\n            <Col md={6}>\n                <label>Visit Date</label>\n                <ReactDatePicker\n                    onChange={(date) => setStartDate(date)}\n                    selected={scheduleInfo?.start ? moment(scheduleInfo.start).toDate() : null}\n                    showTimeSelect\n                    // minTime={moment(event.start).toDate()}\n                    // maxTime={moment(event.end).toDate()}\n                    popperPlacement=\"auto\"\n                    dateFormat=\"MM/dd/yy h:mm aa\"\n                    // dateFormat=\"MM/dd/yy\"\n                    placeholderText=\"Visit Date\"\n                    // showTimeSelectOnly\n                    className={`form-control search ${scheduleInfo.dateError ? 'border-danger' : ''}`}\n                    wrapperClassName=\"form-group\"\n                    calendarClassName=\"min-width-328\"\n                    timeIntervals={15}\n                    timeCaption=\"Time\"\n                    autoFocus={scheduleInfo?.dateError}\n                    disabled={isDischarge || updateData}\n                />\n            </Col>\n            {scheduleInfo.dischargeDate && <>\n                <Col md={6}>\n                    <label>Discharge Time</label>\n                    <ReactDatePicker\n                        onChange={(date) => setDischargeTime(date)}\n                        selected={scheduleInfo?.dischargeDate ? moment(scheduleInfo.dischargeDate).toDate() : null}\n                        showTimeSelect\n                        minDate={moment(scheduleInfo.start).toDate()}\n                        maxDate={moment().toDate()}\n                        // maxTime={moment(event.end).toDate()}\n                        popperPlacement=\"auto\"\n                        dateFormat=\"MM/dd/yy h:mm aa\"\n                        // dateFormat=\"MM/dd/yy\"\n                        placeholderText=\"Discharge Date\"\n                        // showTimeSelectOnly\n                        className={`form-control search ${scheduleInfo.dateError ? 'border-danger' : ''}`}\n                        wrapperClassName=\"form-group\"\n                        calendarClassName=\"min-width-328\"\n                        timeIntervals={15}\n                        timeCaption=\"Time\"\n                        autoFocus={scheduleInfo?.dateError}\n                        disabled={isDischarge}\n                        isClearable={!isDischarge}\n                    />\n                </Col>\n                <Col md={6}>\n                    <div className=\"form-group\">\n                        <label htmlFor='dischargeReason'>Discharge reason</label>\n                        <CreatableSelect\n                            name={\"dischargeReason\"}\n                            value={[state.scheduleInfo.dischargeReason]}\n                            onChange={(data) => {\n                                const reasonId = !data?.__isNew__ ? dischargeReasons.find((i) => i.value === data.value)?.id : undefined;\n                                setState(prev => ({\n                                    ...prev, scheduleInfo: {\n                                        ...prev.scheduleInfo,\n                                        reasonId,\n                                        reasonType: data.value,\n                                        dischargeReason: data ? { label: data.label, value: data.value, isNew: data?.__isNew__ } : null\n                                    }\n                                }))\n                            }}\n                            options={dischargeReasons ? dischargeReasons : []}\n                            menuPlacement='auto'\n                            className=\"basic-multi-select issue-multi-select_user-dropdown input-border\"\n                            classNamePrefix=\"select\"\n                            placeholder='Reason for discharge'\n                            isClearable\n                        />\n                    </div>\n                </Col>\n                <Col md={6}>\n                    <div className=\"form-group\">\n                        <Input\n                            name=\"reason\"\n                            Label=\"Reason\"\n                            placeholder=\"Reason\"\n                            handleChange={(e) =>\n                                setState(prev => ({\n                                    ...prev, scheduleInfo: { ...prev.scheduleInfo, reason: e.target.value }\n                                }))}\n                            value={scheduleInfo?.reason || \"\"}\n                        />\n                    </div>\n                </Col>\n            </>}\n            {/* <Col md={6}>\n                <label>End Time</label>\n                <ReactDatePicker\n                    selected={moment(scheduleInfo?.end ? scheduleInfo.end : null).toDate()}\n                    onChange={(date) => setEndDate(date)}\n                    showTimeSelect\n                    // minTime={moment(event.start).toDate()}\n                    // maxTime={moment(event.end).toDate()}\n                    placeholderText=\"End Time\"\n                    popperPlacement=\"auto\"\n                    dateFormat=\"MM/dd/yy h:mm aa\"\n                    calendarClassName=\"min-width-328\"\n                    // showTimeSelectOnly\n                    className={`form-control search ${scheduleInfo.dateError ? 'border-danger' : ''}`}\n                    wrapperClassName=\"form-group\"\n                    timeIntervals={15}\n                    timeCaption=\"Time\"\n                    excludeTimes={[\n                        moment(scheduleInfo.start).toDate()\n                    ]}\n                />\n            </Col> */}\n        </Row>\n        {scheduleInfo?.dateError && <p className=\"text-danger\">{scheduleInfo.dateError}</p>}\n        <Row>\n            <Col>\n                <div className=\"form-group w-100\">\n                    <label htmlFor=\"slotNote\" className=\"mb-1\">Note:</label>\n                    <textarea\n                        type='text'\n                        rows={3}\n                        placeholder=\"Type Patient notes here\"\n                        className={`form-control`}\n                        value={scheduleInfo.note || ''}\n                        onChange={e => setState(prev => ({ ...prev, scheduleInfo: { ...prev.scheduleInfo, note: e.target.value } }))}\n                    />\n                </div>\n            </Col>\n        </Row>\n    </>)\n}","import React, { useEffect, useMemo, useState } from 'react'\nimport ReactSelect from 'react-select';\nimport Divider from 'antd/lib/divider'\nimport CreatableSelect from 'react-select/creatable';\nimport { Col, Row } from \"react-bootstrap\";\nimport userService from 'services/APIs/services/userService';\nimport facilityService from 'services/APIs/services/facilityService';\nimport { showError } from 'utils/package_config/toast';\n\nexport const AttendeeProvider = ({ state, setState, updateData, isDischarge }) => {\n    const [ProviderOptions, setProviderOptions] = useState([]);\n    const [roomOptions, setRoomOptions] = useState([])\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        (async () => {\n            if (isDischarge) return;\n            setIsLoading(true);\n            let facilityId, facilityRooms = [];\n            if (updateData) facilityId = updateData.patientSlots[0] && updateData.patientSlots[0].facilityId;\n            const facilityData = await facilityService.list({\n                payload: { \"options\": { \"populate\": [\"facilityProviderInfo\", \"organizationInfo\", \"facilityRooms\"] } }\n            });\n            const providerData = await userService.list({\n                payload: { \"options\": { \"populate\": [\"providerInfoAssignfacility\"] } }\n            });\n            if (facilityId)\n                facilityRooms = facilityData.data\n                    .find(i => i.id === facilityId).facilityRooms\n                    .map(i => ({\n                        value: i.roomNumber,\n                        label: `${i.roomNumber} (${Boolean(i.facilityRoomAssign) ? \"Occupied\" : \"Available\"})`\n                    })) || []\n            setIsLoading(false);\n            setRoomOptions(facilityRooms.length ? facilityRooms :\n                (state.facility?.value?.facilityRooms ?\n                    state.facility.value.facilityRooms.map(i => ({\n                        value: i.roomNumber,\n                        label: `${i.roomNumber} (${Boolean(i.facilityRoomAssign) ? \"Occupied\" : \"Available\"})`,\n                        // isDisabled: Boolean(i.facilityRoomAssign),\n                        color: Boolean(i?.facilityRoomAssign) ? \"#ccc\" : \"#000\"\n                    }))\n                    : []))\n            setState(prev => ({ ...prev, facilityOptions: facilityData.data.map(i => ({ id: i.id, value: i, label: i.name })) || [] }))\n            setProviderOptions(providerData.data.map(i => ({ id: i.id, value: i, label: i.name })) || [])\n        })();\n    }, [updateData, state.facility?.value?.facilityRooms, setState, isDischarge]);\n\n    const providers = useMemo(() =>\n        state.facility ? ProviderOptions.filter(i => i.value.facilityAssigns.map(j => j.facilityId).includes(state.facility.id)) : []\n        , [state.facility, ProviderOptions]);\n\n    return (<>\n        <Row>\n            <Col>\n                <Divider className='text-color align-items-center' style={{ borderColor: 'grey' }} orientation='left'>\n                    Attending Provider\n                </Divider>\n                <Row>\n                    <Col md={6} className='form-group'>\n                        <label>Facility</label>\n                        <ReactSelect\n                            name={\"facility\"}\n                            value={[state.facility]}\n                            isLoading={isLoading}\n                            onChange={(item) => {\n                                setState(prev => ({\n                                    ...prev,\n                                    facility: item,\n                                    provider: item?.value?.id === prev.provider?.value?.facilityAssign?.facilityId ? prev.provider : null,\n                                    HCMDProvider: item?.value?.facilityAssigns\n                                        .filter(i => i.isDefault)\n                                        .map(i => ({\n                                            id: `${i?.designation}-${i?.id}`,\n                                            designation: i.desiInfo || null,\n                                            ...i.providerInfo\n                                        })) || null,\n                                    HCMDProviderOptions: item?.value?.facilityAssigns\n                                }))\n                            }\n                            }\n                            options={state.facilityOptions && !!state.facilityOptions.length ? state.facilityOptions : []}\n                            menuPlacement='bottom'\n                            className={`basic-multi-select issue-multi-select_user-dropdown input-border ${state?.facility?.autoSet ?? ''}`}\n                            classNamePrefix=\"select\"\n                            placeholder=\"Select facility\"\n                            isDisabled={isDischarge}\n                            isClearable\n                        />\n                    </Col>\n                    <Col md={6} className=\"form-group\">\n                        <label htmlFor=\"duration\" className=\"mb-1\">\n                            Provider\n                            {/* <small className='text-danger'>*</small> */}\n                        </label>\n                        <CreatableSelect\n                            name={\"provider\"}\n                            value={[state.provider]}\n                            onChange={(item) => {\n                                if (item?.__isNew__ && state.facility?.value?.info?.hasOwnProperty(\"owner\") &&\n                                    Boolean(state.facility?.value?.info?.owner)) {\n                                    return showError(\"Outside provider can't be created in HCMD facility. Please select another facility and try again.\")\n                                }\n                                setState(prev => ({\n                                    ...prev,\n                                    provider: item ? { label: item.label, value: item.value, isNew: item?.__isNew__ } : null,\n                                }))\n                            }}\n                            options={providers && !!providers.length ? providers : []}\n                            menuPlacement='auto'\n                            className={`basic-multi-select issue-multi-select_user-dropdown input-border ${state?.facility?.autoSet ?? ''}`}\n                            classNamePrefix=\"select\"\n                            placeholder=\"Select provider\"\n                            isClearable\n                            isLoading={isLoading}\n                            isDisabled={isLoading || !state.facility || isDischarge}\n                        />\n                        {state.facility && !state.facility?.autoSet &&\n                            <small className='text-success'>Set as per previous slot of the patient</small>}\n                        {!state.facility &&\n                            <small>Please select facility first</small>}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col md={6}>\n                        <label>Location</label>\n                        <input type='text' className={`form-control`} placeholder=\"Location\" disabled\n                            value={state.facility?.value?.location ? state.facility.value.location : ''}\n                        />\n                    </Col>\n                    <Col md={6}>\n                        <label>Room Number</label>\n                        <CreatableSelect\n                            name={\"roomNumber\"}\n                            value={[state.scheduleInfo.roomNumber]}\n                            onChange={(data) => {\n                                setState(prev => ({\n                                    ...prev, scheduleInfo: {\n                                        ...prev.scheduleInfo,\n                                        roomNumber: data ? { label: data.label, value: data.value, isNew: data?.__isNew__ } : null\n                                    }\n                                }))\n                            }}\n                            options={roomOptions}\n                            menuPlacement='auto'\n                            className=\"basic-multi-select issue-multi-select_user-dropdown input-border\"\n                            classNamePrefix=\"select\"\n                            placeholder='Room Number'\n                            isDisabled={isDischarge}\n                            isClearable\n                        />\n                    </Col>\n                </Row>\n            </Col>\n        </Row>\n    </>)\n}\n\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport ReactSelect from 'react-select';\nimport Divider from 'antd/lib/divider'\nimport { Button } from 'react-bootstrap';\n// Mui Components\nimport { LinearProgress } from '@mui/material';\nimport { DataGridPro } from '@mui/x-data-grid-pro';\n\nimport { TelephoneFill } from 'react-bootstrap-icons';\nimport { MuiActionButton, MuiDeleteAction } from 'Components/MuiDataGrid';\nimport { CONST } from 'utils/constants';\nimport { getDesignationByKey } from 'services/helper';\nimport ModalReactstrap from 'Components/Modals/Modal';\nimport userService from 'services/APIs/services/userService';\n\nexport default function ConsultancyProvider({ setMainState, mainState }) {\n    const { consultancyProvider } = mainState;\n    const [state, setState] = useState({\n        create: false, update: false\n    });\n\n    const onCancelHandler = useCallback(() => setState(prev => ({ ...prev, create: false, update: false })), [])\n\n    const onDelete = useCallback((row) => {\n        setMainState(prev => ({\n            ...prev, consultancyProvider: prev.consultancyProvider.filter(i => i.id !== row.id)\n        }))\n    }, [setMainState]);\n\n    const onSubmit = useCallback((data) => {\n        setMainState(prev => ({ ...prev, consultancyProvider: [data, ...prev.consultancyProvider] }));\n        onCancelHandler();\n    }, [setMainState, onCancelHandler]);\n\n    const columns = useMemo(() => [\n        {\n            field: \"name\", headerName: \"Name\", minWidth: 50, headerAlign: \"center\", align: 'center', flex: 1,\n            renderCell: ({ row }) => (<>{row.name ? row.name : '-'}</>)\n        },\n        {\n            field: \"speciality\", headerName: \"Speciality\", minWidth: 50, headerAlign: \"center\", align: 'center',\n            renderCell: ({ row }) => (<>{row.speciality ? row.speciality : '-'}</>)\n        },\n        {\n            field: \"faxNumber\", headerName: \"Fax Number\", minWidth: 50, headerAlign: \"center\", align: 'center',\n            renderCell: ({ row }) => (<>{row.faxNumber ? row.faxNumber : '-'}</>)\n        },\n        {\n            field: \"contactNumber\", headerName: \"Contact Number\", minWidth: 50, headerAlign: \"center\", align: 'center', flex: 1,\n            renderCell: ({ row }) => (<>{row.phone ? row.phone : '-'}</>)\n        },\n        {\n            field: \"actions\", type: \"actions\", headerName: \"Actions\", minWidth: 180,\n            getActions: ({ row }) => [\n                <MuiActionButton Icon={TelephoneFill} size=\"small\" tooltip={\"Call\"} />,\n                <MuiDeleteAction onClick={() => onDelete(row)} />,\n            ],\n        },\n    ], [onDelete]);\n\n    return (<>\n        <Divider className='text-color mt-4' style={{ borderColor: 'grey' }} orientation='left'>Consultancy Provider</Divider>\n        <div className={`cstm-mui-datagrid ${!consultancyProvider?.length ? 'loading' : 'not_loading'}`} style={{ maxHeight: '88vh', width: '100%', flexGrow: 1 }}>\n            <DataGridPro\n                rows={consultancyProvider && !!consultancyProvider?.length ? consultancyProvider : []}\n                columns={columns}\n                autoHeight\n                disableColumnFilter\n                disableVirtualization\n                components={{\n                    LoadingOverlay: LinearProgress,\n                    Footer: () => null\n                }}\n            />\n        </div>\n        <Button className='mt-1' variant='primary' onClick={() => setState(prev => ({ ...prev, create: true }))} >Add Provider</Button>\n        <AddConsultancyProvider\n            fieldName='Consultancy Provider'\n            showModal={Boolean(state.create || state.update)}\n            onSubmit={onSubmit}\n            onCancel={onCancelHandler}\n            mode={(state.create ? 'create' : (state.update && 'update'))}\n            updateData={state.update}\n            consultancyProvider={consultancyProvider}\n        />\n    </>)\n}\n\nexport const AddConsultancyProvider = ({ showModal, onSubmit, onCancel, mode = 'create', updateData, fieldName = 'field', consultancyProvider }) => {\n    const [provider, setProvider] = useState()\n    const [loading, setLoading] = useState(false);\n    const [options, setOptions] = useState([]);\n\n    useEffect(() => {\n        (async () => {\n            if (!showModal) return;\n            setLoading(true);\n            const desg = await getDesignationByKey(CONST.DESIGNATION_KEY.PROVIDER, \"selectable\");\n            const payload = {\n                \"query\": {\n                    \"ownProvider\": false,\n                    \"designationId\": desg.id || undefined\n                },\n                \"options\": {\n                    \"sort\": [[\"name\", \"asc\"]]\n                }\n            }\n            const data = await userService.list({ payload });\n            setOptions(data.data.map(i => ({ id: i.id, value: i, label: i.name })));\n            setLoading(false);\n        })();\n    }, [showModal]);\n\n    const providerOptions = useMemo(() => {\n        let optionsArr = options;\n        const assignIds = consultancyProvider.map(i => i.id);\n        optionsArr = optionsArr.filter(i => !assignIds.includes(i.id));\n        return optionsArr;\n    }, [options, consultancyProvider]);\n\n    return (\n        <ModalReactstrap\n            header={<>{mode === 'update' ? 'Edit ' + fieldName : 'Add ' + fieldName}</>}\n            toggle={onCancel}\n            show={showModal}\n            body={\n                showModal && <>\n                    <div className=\"form-group\">\n                        <label htmlFor='addHCMDprovider'>Provider</label>\n                        <ReactSelect\n                            name={\"addHCMDprovider\"}\n                            value={[provider]}\n                            onChange={(item) => setProvider(item)}\n                            cacheOptions={[]}\n                            autoFocus\n                            defaultOptions\n                            classNamePrefix=\"select\"\n                            placeholder=\"Select provider\"\n                            menuPlacement='auto'\n                            options={providerOptions}\n                            isLoading={loading}\n                            className=\"basic-multi-select issue-multi-select_user-dropdown input-border\"\n                        />\n                    </div>\n                    <Button onClick={() => onSubmit(provider.value)} disabled={!provider}>Add</Button>\n                </>\n            }\n        />\n    )\n}","import React, { useCallback, useMemo, useState } from 'react'\nimport Divider from 'antd/lib/divider'\nimport { DataGridPro } from '@mui/x-data-grid-pro';\nimport { Button } from 'react-bootstrap';\nimport { CreateEditRelative } from '../../DetailPanel/PatientRelatives';\nimport { MuiDeleteAction, MuiEditAction } from 'Components/MuiDataGrid';\n\nexport default function NextofKin({ mainState, setMainState }) {\n    const { nextOfKin = {} } = mainState;\n    const [kinState, kinSetState] = useState({ create: false, update: false });\n\n    const columns = useMemo(() => [\n        {\n            field: \"name\", headerName: \"Contact Name\", minWidth: 50, headerAlign: \"center\", align: 'center', flex: 1,\n            renderCell: ({ row }) => <>{row.name ? row.name : '-'}</>\n        },\n        {\n            field: \"relation\", headerName: \"Relation\", minWidth: 50, headerAlign: \"center\", align: 'center', flex: 1,\n            renderCell: ({ row }) => <>{row.relation ? row.relation : '-'}</>\n        },\n        {\n            field: \"contactNumber\", headerName: \"Contact\", minWidth: 50, headerAlign: \"center\", align: 'center', flex: 1,\n            renderCell: ({ row }) => <>{row.contactNumber ? row.contactNumber : '-'}</>\n        },\n        {\n            field: \"typeOfNumber\", headerName: \"Contact Type\", minWidth: 50, headerAlign: \"center\", align: 'center', flex: 1,\n            renderCell: ({ row }) => <>{row.typeOfNumber ? row.typeOfNumber : '-'}</>\n        },\n        {\n            field: \"actions\", type: \"actions\", headerName: \"Actions\",\n            getActions: (params) => [\n                <MuiEditAction onClick={() => kinSetState(prev => ({ ...prev, update: params.row }))} />,\n                <MuiDeleteAction onClick={() => setMainState(prev => ({\n                    ...prev,\n                    nextOfKin: prev.nextOfKin.filter(i => i.id !== params.id)\n                }))} />,\n            ],\n        },\n    ], [setMainState]);\n\n    const onCancelHandler = useCallback(() => kinSetState(prev => ({ ...prev, create: false, update: false })), []);\n\n    const onSubmitSuccess = useCallback((data) => {\n        if (kinState.update) {\n            setMainState(prev => ({\n                ...prev,\n                nextOfKin: prev.nextOfKin.map((item) => {\n                    if (item.id === data.id) return { ...item, ...data }\n                    return item;\n                })\n            }))\n        } else {\n            setMainState(prev => ({ ...prev, nextOfKin: [...prev.nextOfKin, data] }))\n        }\n    }, [kinState.update, setMainState]);\n\n    return (<>\n        <Divider className='text-color mt-4' style={{ borderColor: 'grey' }} orientation='left'>Next of Kin</Divider>\n        <div className={`cstm-mui-datagrid ${!nextOfKin?.length ? 'loading' : 'not_loading'}`} style={{ maxHeight: '88vh', width: '100%', flexGrow: 1 }}>\n            <DataGridPro\n                rows={nextOfKin && !!nextOfKin.length ? nextOfKin : []}\n                columns={columns}\n                autoHeight\n                disableColumnFilter\n                disableVirtualization\n                components={{\n                    // LoadingOverlay: LinearProgress,\n                    Footer: () => <></>\n                }}\n            />\n        </div>\n        <Button className='mt-1' variant='primary' onClick={() => kinSetState(prev => ({ ...prev, create: true }))}>Add Relative</Button>\n        <CreateEditRelative\n            fieldName='Relative'\n            showModal={Boolean(kinState.create || kinState.update)}\n            onSubmitSuccess={onSubmitSuccess}\n            onCancel={onCancelHandler}\n            mode={(kinState.create ? 'create' : (kinState.update && 'update'))}\n            updateData={kinState.update}\n            directSubmit={true}\n        />\n    </>)\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { LinearProgress } from '@mui/material';\nimport { DataGridPro } from '@mui/x-data-grid-pro';\nimport Divider from 'antd/lib/divider'\nimport ModalReactstrap from 'Components/Modals/Modal';\nimport { Button } from 'react-bootstrap';\nimport { MuiActionButton, MuiDeleteAction } from 'Components/MuiDataGrid';\nimport { TelephoneFill } from 'react-bootstrap-icons';\nimport ReactSelect from 'react-select';\nimport { Switch } from 'antd';\nimport { abbreviateDesg } from 'services/helper';\nimport facilityService from 'services/APIs/services/facilityService';\n\nexport default function HCMDProvider({ mainState, setMainState }) {\n    const { HCMDProvider, HCMDProviderOptions } = mainState;\n    const [state, setState] = useState({ create: false, update: false })\n\n    const onCancelHandler = useCallback(() => setState(prev => ({ ...prev, create: false, update: false })), [])\n\n    const onDelete = useCallback((row) => {\n        setMainState(prev => ({ ...prev, HCMDProvider: prev.HCMDProvider.filter(i => i.id !== row.id) }))\n    }, [setMainState]);\n\n    const onSubmit = useCallback((data) => {\n        setMainState(prev => ({ ...prev, HCMDProvider: [data, ...prev.HCMDProvider] }));\n        onCancelHandler();\n    }, [setMainState, onCancelHandler]);\n\n    const columns = useMemo(() => [\n        {\n            field: \"name\", headerName: \"Name\", minWidth: 50, headerAlign: \"center\", align: 'center', flex: 1,\n            renderCell: ({ row }) => {\n                const position = abbreviateDesg(row.designation.key);\n                return (\n                    <div className='d-flex gap-10'>\n                        <div>{row.name ? row.name : '-'}</div>\n                        {row.designation?.key && position && <div className='desg-tag'>{position}</div>}\n                    </div>)\n            }\n        },\n        {\n            field: \"speciality\", headerName: \"Speciality\", minWidth: 110, headerAlign: \"center\", align: 'center',\n            renderCell: ({ row }) => (<>{row.speciality ? row.speciality : '-'}</>)\n        },\n        {\n            field: \"faxNumber\", headerName: \"Fax Number\", minWidth: 110, headerAlign: \"center\", align: 'center',\n            renderCell: ({ row }) => (<>{row.faxNumber ? row.faxNumber : '-'}</>)\n        },\n        {\n            field: \"contactNumber\", headerName: \"Contact Number\", minWidth: 110, headerAlign: \"center\", align: 'center', flex: 1,\n            renderCell: ({ row }) => (<>{row.phone ? row.phone : '-'}</>)\n        },\n        {\n            field: \"actions\", type: \"actions\", headerName: \"Actions\",\n            getActions: ({ row }) => [\n                <MuiActionButton Icon={TelephoneFill} size=\"small\" tooltip={\"Call\"} />,\n                <MuiDeleteAction onClick={() => onDelete(row)} />,\n            ],\n        },\n    ], [onDelete]);\n\n    return (<>\n        <Divider className='text-color mt-4' style={{ borderColor: 'grey' }} orientation='left'>HCMD Provider</Divider>\n        <div className={`cstm-mui-datagrid ${!HCMDProvider?.length ? 'loading' : 'not_loading'}`} style={{ maxHeight: '88vh', width: '100%', flexGrow: 1 }}>\n            <DataGridPro\n                rows={HCMDProvider && !!HCMDProvider?.length ? HCMDProvider : []}\n                columns={columns}\n                autoHeight\n                disableColumnFilter\n                disableVirtualization\n                components={{\n                    LoadingOverlay: LinearProgress,\n                    Footer: () => <></>\n                }}\n            />\n        </div>\n        <Button className='mt-1' variant='primary' onClick={() => setState(prev => ({ ...prev, create: true }))} >Add Provider</Button>\n        <AddHCMDProvider\n            fieldName='HCMD Provider'\n            showModal={Boolean(state.create || state.update)}\n            onSubmit={onSubmit}\n            onCancel={onCancelHandler}\n            mode={(state.create ? 'create' : (state.update && 'update'))}\n            updateData={state.update}\n            HCMDProvider={HCMDProvider}\n            HCMDProviderOptions={HCMDProviderOptions}\n            mainState={mainState}\n            setMainState={setMainState}\n        />\n    </>)\n}\n\nconst desg = [\"MD\", \"NP\"];\nexport const AddHCMDProvider = ({ showModal, onSubmit, onCancel, mode = 'create', fieldName = 'field', HCMDProvider, HCMDProviderOptions, mainState, setMainState }) => {\n    const [provider, setProvider] = useState();\n    const [selected, setSelected] = useState(desg[0]);\n\n    useEffect(() => {\n        (async () => {\n            // TODO\n            // if (!HCMDProviderOptions && mainState.facility) {\n            const facility = mainState.facilityOptions.find(i => i.id === mainState.facility?.id);\n            // const providersOptions = facility?.value?.facilityAssigns || [];\n            const payload = {\n                \"query\": { \"id\": facility?.id },\n                \"options\": { \"populate\": [\"facilityProviderInfo\", \"organizationInfo\"] },\n                \"findOne\": true\n            }\n            let providersOptions = await facilityService.list({ payload });\n            providersOptions = providersOptions.data.facilityAssigns.map((i) => ({\n                ...i, designation: i.desiInfo\n            }))\n            setMainState(prev => ({ ...prev, HCMDProviderOptions: providersOptions }));\n            // }\n        })();\n    }, [mainState.facility?.id, mainState.facilityOptions, setMainState]);\n\n    const selectOptions = useMemo(() => {\n        let options = [];\n        if (HCMDProviderOptions && !!HCMDProviderOptions.length) {\n            const assignIds = HCMDProvider?.map(i => i.id) || [];\n            options = HCMDProviderOptions\n                .filter(i => !assignIds.includes(i.providerId || i.userId))\n                .map(i => ({\n                    id: i.providerInfo.id, label: i.providerInfo.name,\n                    value: { ...i.providerInfo, designation: i.desiInfo || null }\n                }))\n                .filter(i => abbreviateDesg(i.value.designation?.key) === selected);\n        }\n        return options;\n    }, [HCMDProvider, HCMDProviderOptions, selected]);\n\n    return (\n        <ModalReactstrap\n            header={<>{mode === 'update' ? 'Edit ' + fieldName : 'Add ' + fieldName}</>}\n            toggle={onCancel}\n            show={showModal}\n            body={\n                showModal && <>\n                    <div className=\"form-group d-flex gap-10 align-items-center mb-1\">\n                        <label htmlFor='designation' className='mb-0'>Designation: </label>\n                        <Switch\n                            className='outline-none'\n                            style={{ background: \"#665fde\" }}\n                            unCheckedChildren={\"NP\"}\n                            checkedChildren={\"MD\"}\n                            checked={selected === desg[0]}\n                            onChange={val => setSelected(prev => prev === desg[0] ? desg[1] : desg[0])}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor='addHCMDprovider'>Provider: </label>\n                        <ReactSelect\n                            options={selectOptions}\n                            className=\"basic-multi-select issue-multi-select_user-dropdown input-border\"\n                            classNamePrefix=\"select\"\n                            name={\"addHCMDprovider\"}\n                            value={[provider]}\n                            onChange={(item) => setProvider(item)}\n                            cacheOptions={[]}\n                            placeholder=\"Select provider\"\n                            menuPlacement='auto'\n                            defaultOptions\n                            autoFocus\n                            isClearable\n                        />\n                    </div>\n                    <Button onClick={() => onSubmit(provider.value)} disabled={!provider}>Add</Button>\n                </>\n            }\n        />\n    )\n}","import React, { useRef, useCallback, useEffect } from 'react'\nimport { debounce } from 'lodash';\nimport { Col, Row } from 'react-bootstrap';\nimport AsyncCreatableSelect from 'react-select/async-creatable';\nimport ReactDatePicker from 'react-datepicker';\nimport ReactSelect from 'react-select';\nimport moment from 'moment-timezone';\nimport PhoneInput2 from \"react-phone-input-2\";\nimport { CONST } from 'utils/constants';\nimport { TakeConfirmation } from 'Components/components';\nimport Input from 'Components/FormBuilder/components/Input';\nimport \"react-phone-input-2/lib/style.css\";\nimport Divider from 'antd/lib/divider'\nimport patientService from 'services/APIs/services/patientService';\nimport { PureName } from 'services/helper/default';\nimport { generatePayload } from 'redux/common';\n\nexport default function PatientForm({ state, setState, updateData }) {\n    const { patientData, isPatientloading } = state;\n    const selectRef = useRef();\n\n    useEffect(() => {\n        selectRef.current.focus();\n    }, []);\n\n    const inputChange = useCallback((e) => {\n        const { value, name } = e.target;\n        if (name === \"lastName\" && value) {\n            const onChange = () => {\n                let val = value?.value || null;\n                if (value?.__isNew__) val = val?.charAt(0).toUpperCase() + val?.slice(1);\n                const patientSlot = !!val?.patientSlots?.length && val.patientSlots[0];\n                setState(prev => {\n                    const provider = patientSlot && val.patientAssigns.find(i => i.userId === patientSlot.providerId)\n                    let body = {\n                        ...prev,\n                        nextOfKin: value?.value?.patientGuardians || prev.nextOfKin,\n                        facility: val?.facilityInfo ? { id: val.facilityInfo.id, label: val.facilityInfo.name, value: val.facilityInfo, autoSet: 'auto-set-field' } : { ...prev.facility, autoSet: null },\n                        provider: provider ? { id: provider.userId, label: provider.usersPatient.name, value: { id: provider.userId }, autoSet: 'auto-set-field' } : { ...prev.provider, autoSet: null }\n                    };\n                    if (prev.isNewPatient && value?.__isNew__) body = { ...body, } // ...defaultState\n                    if (!value) return { ...body, patientData: {}, isNewPatient: true }\n                    else if (!value?.__isNew__) return { ...body, patientData: { ...val }, isNewPatient: false }\n                    else if (value?.__isNew__) return { ...body, patientData: { ...prev.patientData, [name]: val }, isNewPatient: true }\n                    else return body\n                })\n            }\n            if (value && !!Object.keys(patientData).length && (patientData.firstName || patientData.middleName)) {\n                TakeConfirmation({\n                    title: \"Are you sure to change the patient?\",\n                    content: \"Once you confirm the entered patient data would be changed.\",\n                    onDone: onChange\n                });\n            } else onChange();\n        }\n        else {\n            setState(prev => ({\n                ...prev, patientData: { ...prev.patientData, [name]: value }\n            }))\n        }\n    }, [setState, patientData]);\n\n    const handleKeyDown = useCallback((event) => {\n        if (event.key === 'Tab') {\n            const selectElement = selectRef.current.select;\n            if (selectElement) {\n                const focusedOption = selectElement.state.focusedOption;\n                if (focusedOption)\n                    inputChange({ target: { name: 'lastName', value: focusedOption } }) // Trigger your custom onChange event with the selected option\n            }\n        }\n    }, [inputChange]);\n\n    const autoCapitalizeField = useCallback((e) => {\n        const { value } = e.target;\n        e.target.value = value ? value.charAt(0).toUpperCase() + value.slice(1) : '';\n        inputChange(e);\n    }, [inputChange]);\n\n    const loadPatientSuggestions = debounce((query, callback) => {\n        getPatients(query).then((res) => {\n            if (res.status === 1)\n                callback(res.data.map(i => ({ id: i.id, value: i, label: PureName(i.firstName + ' ' + i.lastName) })));\n        });\n    }, 1000);\n\n    return (\n        <Row>\n            <Col xs={12}>\n                <Divider className='text-color mt-4' style={{ borderColor: 'grey' }} orientation='left'>\n                    Patient Details\n                </Divider>\n            </Col>\n            <Col md={6} className=\"form-group mb-0\">\n                <label htmlFor=\"firstName\">\n                    Lastname\n                    <small className='text-danger'>*</small>\n                </label>\n                <AsyncCreatableSelect\n                    defaultOptions={[]}\n                    ref={selectRef}\n                    classNamePrefix=\"select\"\n                    className={`basic-single`}\n                    placeholder={\"Last name\"}\n                    loadOptions={loadPatientSuggestions}\n                    isLoading={isPatientloading}\n                    isClearable={true}\n                    value={patientData.lastName ? [{ label: patientData.lastName, value: patientData.lastName }] : null}\n                    onKeyDown={handleKeyDown}\n                    onChange={(value) => {\n                        inputChange({ target: { name: 'lastName', value } })\n                    }}\n                />\n            </Col>\n            <Col md={6} className=\"form-group mb-0\">\n                <Input\n                    Label=\"Firstname\"\n                    placeholder=\"First name\"\n                    name=\"firstName\"\n                    handleChange={inputChange}\n                    formgroupClass=''\n                    isRequired={false}\n                    type=\"text\"\n                    error=''\n                    value={patientData.firstName}\n                    inputProps={{ onBlurCapture: autoCapitalizeField }}\n                // disabled={!state.isNewPatient || updateData}\n                />\n            </Col>\n            <Col md={6} className=\"form-group mb-0\">\n                <Input\n                    Label=\"Middlename\"\n                    placeholder=\"Middle name\"\n                    name=\"middleName\"\n                    handleChange={inputChange}\n                    formgroupClass=''\n                    isRequired={false}\n                    type=\"text\"\n                    error=''\n                    value={patientData.middleName}\n                    inputProps={{\n                        onBlurCapture: autoCapitalizeField\n                    }}\n                // disabled={!state.isNewPatient || updateData}\n                />\n            </Col>\n            <Col md={6} className=\"form-group mb-0\">\n                <label htmlFor=\"Phone\">Phone</label>\n                <PhoneInput2\n                    value={patientData?.phone || \"\"}\n                    inputClass=\"w-100\"\n                    placeholder={\"phone\"}\n                    label={\"phone\"}\n                    name={\"phone\"}\n                    onChange={(value) => inputChange({ target: { name: 'phone', value } })}\n                    country={\"us\"}\n                // disabled={!state.isNewPatient || updateData}\n                />\n            </Col>\n            <Col md={6} className=\"form-group mb-0\">\n                <Input\n                    Label=\"Insurance\"\n                    placeholder=\"Insurance\"\n                    name=\"insurance\"\n                    handleChange={inputChange}\n                    formgroupClass=''\n                    isRequired={false}\n                    type=\"text\"\n                    error=''\n                    value={patientData.insurance}\n                // disabled={!state.isNewPatient || updateData}\n                />\n            </Col>\n            <Col md={6} className=\"form-group mb-0\">\n                <Input\n                    Label=\"SSN\"\n                    placeholder=\"SSN\"\n                    name=\"SSN\"\n                    handleChange={inputChange}\n                    formgroupClass=''\n                    isRequired={false}\n                    type=\"text\"\n                    error=''\n                    value={patientData.SSN}\n                // disabled={!state.isNewPatient || updateData}\n                />\n            </Col>\n            <Col md={6} className=\"form-group mb-0\">\n                <label htmlFor=\"DOB\">DOB</label>\n                <ReactDatePicker\n                    className={`form-control`}\n                    placeholderText={\"DOB\"}\n                    selected={patientData.DOB ? moment(patientData.DOB).toDate() : null}\n                    // value={patientData.DOB ? moment(patientData.DOB).toDate() : null}\n                    // disabled={isEditable === false}\n                    onChange={(value) => inputChange({ target: { name: 'DOB', value } })}\n                // isClearable\n                // dateFormat=\"MMMM d, yyyy h:mm aa\"\n                // disabled={!state.isNewPatient || updateData}\n                />\n            </Col>\n            <Col md={6} className=\"form-group mb-0\">\n                <Input\n                    Label=\"City\"\n                    placeholder=\"City\"\n                    name=\"city\"\n                    handleChange={inputChange}\n                    formgroupClass=''\n                    isRequired={false}\n                    type=\"text\"\n                    error=''\n                    value={patientData.city}\n                // disabled={!state.isNewPatient || updateData}\n                />\n            </Col>\n            <Col md={6} className=\"form-group mb-0\">\n                <Input\n                    Label=\"Zip\"\n                    placeholder=\"Zip\"\n                    name=\"zip\"\n                    handleChange={inputChange}\n                    formgroupClass=''\n                    isRequired={false}\n                    type=\"text\"\n                    error=''\n                    value={patientData.zip}\n                // disabled={!state.isNewPatient || updateData}\n                />\n            </Col>\n            <Col md={6} className=\"form-group mb-2\">\n                <label htmlFor=\"gender\">Gender</label>\n                <ReactSelect\n                    className={`basic-single`}\n                    classNamePrefix=\"select\"\n                    placeholder={`Select gender...`}\n                    name={\"gender\"}\n                    value={[patientData.gender ? CONST.GENDER_TYPE.find((i) => i.value === patientData.gender) : null]}\n                    options={CONST.GENDER_TYPE}\n                    onChange={(value) => inputChange({ target: { name: 'gender', value: value.value } })}\n                    menuPlacement=\"auto\"\n                // isDisabled={!state.isNewPatient || updateData}\n                />\n            </Col>\n            <Col md={6} className=\"form-group mb-2\">\n                <label htmlFor=\"maritalStatus\">Marital status</label>\n                <ReactSelect\n                    className={`basic-single`}\n                    classNamePrefix=\"select\"\n                    placeholder={`Marital status...`}\n                    name={\"maritalStatus\"}\n                    value={[patientData.maritalStatus ? CONST.MARITAL_TYPE.find((i) => i.value === patientData.maritalStatus) : null]}\n                    options={CONST.MARITAL_TYPE}\n                    onChange={(value) => inputChange({ target: { name: 'maritalStatus', value: value.value } })}\n                    menuPlacement=\"auto\"\n                // isDisabled={!state.isNewPatient || updateData}\n                />\n            </Col>\n            <Col md={6} className=\"form-group mb-0\">\n                <Input\n                    Label=\"Medical Record Number\"\n                    placeholder=\"Medical Record Number\"\n                    name=\"medicalRecordNumber\"\n                    handleChange={inputChange}\n                    formgroupClass=''\n                    isRequired={false}\n                    type=\"text\"\n                    error=''\n                    value={patientData.medicalRecordNumber}\n                // disabled={!state.isNewPatient || updateData}\n                />\n            </Col>\n            <Col md={6} className=\"form-group mb-0\">\n                <label htmlFor=\"Admit-date\">Admit Date</label>\n                <ReactDatePicker\n                    className={`form-control`}\n                    placeholderText={\"Date of Admit\"}\n                    selected={patientData.admitDate ? moment(patientData.admitDate).toDate() : null}\n                    onChange={(value) => inputChange({ target: { name: 'admitDate', value } })}\n                // disabled={!state.isNewPatient || updateData}\n                />\n            </Col>\n        </Row>\n    )\n}\n\nexport const getPatients = async (value = \"\") => {\n    const payload = await generatePayload({\n        options: {\n            populate: [\"patientGuardians\", \"patientAssign\", \"lastAllocatedSlot\", \"facilityInfo\"]\n        },\n        keys: [\"firstName\", \"lastName\", \"middleName\"],\n        value\n    });\n    const data = await patientService.list({ payload });\n    return data;\n}","import { CONST } from \"utils/constants\";\nimport { preparePayload } from \"../serviceProviders/Encryptor\";\nimport PlaceholderApiProvider from \"../serviceProviders/PlaceholderApiProvider\";\n\nclass PatientslotService extends PlaceholderApiProvider {\n    async create({ payload = {}, config = { headers: {} }, headers = {}, encrypted = true }) {\n        let data = payload;\n        let configuration = { ...config, ...CONST.API_TIMEOUT.L2 };\n        data = preparePayload({ data, payload, encrypted, configuration, headers })\n        return this.api.post('/create', data, configuration);\n    }\n    async list({ payload = {}, config = { headers: {} }, headers = {}, encrypted = true }) {\n        let data = payload;\n        let configuration = { ...config, ...CONST.API_TIMEOUT.L2 };\n        data = preparePayload({ data, payload, encrypted, configuration, headers })\n        return this.api.post('/list', data, configuration);\n    }\n    async update({ payload = {}, config = { headers: {} }, headers = {}, encrypted = true }) {\n        let data = payload;\n        let configuration = { ...config };\n        data = preparePayload({ data, payload, encrypted, configuration, headers })\n        return this.api.post('/update', data, configuration);\n    }\n    async delete({ payload = {}, config = { headers: {} }, headers = {}, encrypted = true }) {\n        let data = payload;\n        let configuration = { ...config };\n        data = preparePayload({ data, payload, encrypted, configuration, headers })\n        return this.api.post('/delete', data, configuration);\n    }\n    async dischargeUpdate({ payload = {}, config = { headers: {} }, headers = {}, encrypted = true }) {\n        let data = payload;\n        let configuration = { ...config };\n        data = preparePayload({ data, payload, encrypted, configuration, headers })\n        return this.api.post('/discharge/update', data, configuration);\n    }\n\n    async transferPatient({ payload = {}, config = { headers: {} }, headers = {}, encrypted = true }) {\n        let data = payload;\n        let configuration = { ...config };\n        data = preparePayload({ data, payload, encrypted, configuration, headers })\n        return this.api.post('/transferpatient', data, configuration);\n    }\n}\nclass PatientPaymentService extends PlaceholderApiProvider {\n\n    async secondarypaymentcodeUpdate({ payload = {}, config = { headers: {} }, headers = {}, encrypted = true }) {\n        let data = payload;\n        let configuration = { ...config };\n        data = preparePayload({ data, payload, encrypted, configuration, headers })\n        return this.api.post('/update', data, configuration);\n    }\n}\n\nconst patientslotService = new PatientslotService('/patientslot');\nconst patientpaymentService = new PatientPaymentService('/secondarypaymentcode');\n\nexport default patientslotService;\nexport { patientpaymentService };\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { Badge, Button } from 'react-bootstrap'\nimport ModalReactstrap from 'Components/Modals/Modal'\nimport { CONST } from 'utils/constants'\nimport moment from 'moment-timezone'\n// import Switch from 'antd/lib/switch'\nimport { NewPatientScheduler } from './NewPatientSchedule'\nimport { AttendeeProvider } from './AttendeeProvider'\nimport ConsultancyProvider from './ConsultancyProvider'\nimport NextofKin from './NextOfKin'\nimport HCMDProvider from './HCMDProvider'\nimport PatientForm from './PatientForm'\nimport { TakeConfirmation } from 'Components/components'\nimport patientService from 'services/APIs/services/patientService'\nimport patientslotService from 'services/APIs/services/patientslotService'\nimport { showError, showSuccess } from 'utils/package_config/toast'\nimport { generatePayload } from 'redux/common'\nimport ErrorBoundary from 'Components/ErrorBoundry'\n\nexport const defaultState = {\n    patientError: null,\n    provider: null,\n    facility: null,\n    location: null,\n    patientData: {},\n    consultancyProvider: [],\n    facilityOptions: [],\n    HCMDProvider: [],\n    nextOfKin: [],\n    scheduleInfo: {\n        roomNumber: null,\n        duration: 15,\n        note: '',\n        start: moment().toDate(),\n        // end: moment().add(15, 'minute').toDate(),\n        appointmentType: CONST.APPOINTMENT_TYPE.PATIENT.value,\n    },\n    isPatientloading: false,\n    isNewPatient: true\n}\nconst getUpdateState = ({ defaultState, updateData }) => {\n    const { facilityInfo, patientAssigns, patientSlots, ...patientData } = updateData;\n    const patientSlot = (updateData.patientSlots && updateData.patientSlots[0]) || null\n    const facility = patientSlot?.facilitySlotInfo ? { id: patientSlot?.facilitySlotInfo.id, value: patientSlot?.facilitySlotInfo, label: patientSlot?.facilitySlotInfo.name } : null;\n    const HCMDProvider = patientAssigns\n        .filter(item => (item.type === CONST.PROVIDER_TYPE.HCMD_PROVIDER))\n        .map(i => ({ ...i.usersPatient, designation: i.usersPatient.facilityAssigns.find(i => i?.facility?.id === facility?.id)?.desiInfo || \"\" }));\n    const consultancyProvider = patientAssigns.filter(item => (item.type === CONST.PROVIDER_TYPE.CONSULTANCY_PROVIDER)).map(i => i.usersPatient);\n    const attendee = patientAssigns.find(item => (item.type === CONST.PROVIDER_TYPE.ATTENDEE))?.usersPatient || null;\n    const provider = attendee ? { label: attendee.name, value: attendee } : null;\n    const scheduleInfo = {\n        ...defaultState.scheduleInfo,\n        roomNumber: patientSlot?.roomNumber ? { label: patientSlot.roomNumber, value: patientSlot.roomNumber } : null,\n        start: moment(patientSlot.start).toDate(),\n        dischargeDate: patientSlot?.dischargeDate,\n        note: patientSlot.title,\n        dischargeReason: (patientSlot?.patientDischarge?.reasonType &&\n            { label: patientSlot?.patientDischarge?.reasonType, value: patientSlot?.patientDischarge?.reasonType }) || [],\n        reason: patientSlot?.patientDischarge?.reason || \"\",\n    }\n    return {\n        ...defaultState, patientData: { ...patientData, patientSlot }, facility, HCMDProvider, consultancyProvider, provider, scheduleInfo, isNewPatient: false\n    };\n}\nexport default function AddNewPatient({ onCancel, onSubmit, updateData }) {\n    const [state, setState] = useState(updateData ? getUpdateState({ defaultState, updateData }) : defaultState);\n    const patientDataRef = useRef();\n    const attendeeRef = useRef();\n\n    useEffect(() => {\n        if (updateData?.id) {\n            (async () => {\n                let payload = await generatePayload({\n                    rest: { id: updateData.id },\n                    options: { populate: [\"patientGuardians\"] },\n                    findOne: true\n                })\n                const data = await patientService.list({ payload });\n                if (data?.status === 1)\n                    setState(prev => ({ ...prev, nextOfKin: data.data.patientGuardians || [] }))\n            })();\n        }\n    }, [updateData?.id]);\n\n    const isDischarge = useMemo(() => {\n        const [slot] = updateData?.patientSlots || [];\n        return Boolean(slot && slot.discharge && slot.patientDischarge)\n    }, [updateData?.patientSlots]);\n\n    // TODO\n    // useEffect(() => {\n    //     (async () => {\n    //         if (!state.isNewPatient) {\n    //             const payload = await generatePayload({\n    //                 rest: { id: state.patientData.id },\n    //                 options: { \"populate\": [\"patientAssignFacility\", \"patientGuardians\"] },\n    //                 findOne: true\n    //             });\n    //             const { data } = await .post(\"/patient/list\", payload)\n    //             if (data.status) {\n    //                 let HCMDProvider = [], consultancyProvider = [], nextOfKin = [];\n    //                 if (data.data.hasOwnProperty(\"patientAssigns\")) {\n    //                     HCMDProvider = data.data.patientAssigns\n    //                         .filter(i => i.type === CONST.PROVIDER_TYPE.HCMD_PROVIDER)\n    //                         .map(i => ({ ...i.usersPatient, designation: i.usersPatient.facilityAssigns.find(i => i?.facility?.id === state.facility?.id)?.desiInfo || \"\" }));\n    //                     consultancyProvider = data.data.patientAssigns.filter(i => i.type === CONST.PROVIDER_TYPE.CONSULTANCY_PROVIDER).map(i => i.usersPatient);\n    //                     nextOfKin = data.data.patientGuardians;\n    //                 }\n    //                 setState(prev => ({\n    //                     ...prev,\n    //                     HCMDProvider, consultancyProvider, nextOfKin\n    //                 }))\n    //             }\n    //         }\n    //     })();\n    // }, [state.isNewPatient, state.patientData?.id, state.facility?.id]);\n\n    const onSubmitHandler = useCallback(async () => {\n        if (!state.patientData.lastName) {\n            patientDataRef.current?.scrollIntoView({ behavior: \"smooth\" });\n            return showError(\"Please fill patient data\");\n        }\n        if (!state.facility) { //  || !state.provider\n            attendeeRef.current?.scrollIntoView({ behavior: \"smooth\" });\n            if (!state.facility) return showError(\"Please assign facility\");\n            // if (!state.provider) return showError(\"Please assign provider\");\n        }\n        let payload = {\n            patientInfo: state.isNewPatient ? { ...state.patientData, firstName: state.patientData.firstName } : { ...state.patientData, id: state.patientData.id },\n            scheduleInfo: {\n                ...state.scheduleInfo,\n                roomNumber: state.scheduleInfo?.roomNumber?.value || null,\n                isNewRoom: state.scheduleInfo?.roomNumber?.isNew,\n            },\n            // patientAssigns: state?.provider ? [{ label: state?.provider?.value?.name, value: state?.provider?.value?.id }] : null,\n            patientAssigns: state?.provider ? [{\n                type: CONST.PROVIDER_TYPE.ATTENDEE,\n                value: state?.provider?.value?.id,\n                name: state?.provider?.isNew ? state?.provider?.value : undefined,\n                isNew: state?.provider?.isNew || undefined,\n            }] : [],\n            isPatientExist: !state.isNewPatient,\n            isDischarge\n        };\n        if (payload.scheduleInfo.dischargeReason) {\n            payload.scheduleInfo.reasonType = payload.scheduleInfo.dischargeReason.value;\n            delete payload.scheduleInfo.dischargeReason;\n        }\n        if (!!state.nextOfKin?.length) payload.nextOfKin = state.nextOfKin\n        if (!!state.HCMDProvider?.length) payload.patientAssigns = [\n            ...payload.patientAssigns,\n            ...state.HCMDProvider.map(item => ({ value: item.id, type: CONST.PROVIDER_TYPE.HCMD_PROVIDER, designationId: item.designation?.id }))\n        ];\n        if (!!state.consultancyProvider?.length) payload.patientAssigns = [\n            ...payload.patientAssigns,\n            ...state.consultancyProvider.map(item => ({ value: item.id, type: CONST.PROVIDER_TYPE.CONSULTANCY_PROVIDER }))\n        ];\n        if (updateData) payload.scheduleInfo.id = (updateData.patientSlots && updateData.patientSlots[0].id) || undefined;\n        payload.scheduleInfo.facilityId = state.facility.id || undefined;\n        payload.isUpdate = Boolean(updateData);\n        const data = await patientService.createPatientSchedule({ payload });\n        if (data?.status === 1) {\n            onSubmit();\n            onCancel();\n        } else if (data.status === 3) {\n            TakeConfirmation({\n                title: <div dangerouslySetInnerHTML={{ __html: data.message }} />,\n                content: \"\",\n                onDone: async () => {\n                    await patientslotService.dischargeUpdate({ payload: data.patientInfo });\n                    showSuccess(\"Patient discharge successfully\");\n                },\n                onCancel: () => attendeeRef.current?.scrollIntoView({ behavior: \"smooth\" }),\n                okText: \"Discharge\",\n                cancelText: \"Select Room\"\n            });\n        } else if (data.status === 2) {\n            showError(<div dangerouslySetInnerHTML={{ __html: data.message }} />);\n        }\n    }, [state, onSubmit, onCancel, updateData, isDischarge]);\n\n    return (\n        <ModalReactstrap\n            header={updateData ? `Edit Schedule for patient \"${updateData.lastName}\"` : \"Schedule New Patient\"}\n            Modalprops={{ className: 'text-color' }}\n            show={true}\n            toggle={() => onCancel()}\n            size='lg'\n            bodyProps={{ style: { overflow: \"auto\", maxHeight: window.innerWidth < 767 ? \"calc(100vh - 100px)\" : \"calc(100vh - 180px)\" } }}\n            body={\n                <ErrorBoundary>\n                    <div ref={attendeeRef} />\n                    <AttendeeProvider setState={setState} state={state} updateData={updateData} isDischarge={isDischarge} />\n                    <div ref={patientDataRef} />\n                    <PatientForm setState={setState} state={state} updateData={updateData} />\n                    <ConsultancyProvider setMainState={setState} mainState={state} />\n                    <HCMDProvider setMainState={setState} mainState={state} />\n                    <NextofKin setMainState={setState} mainState={state} />\n                    <NewPatientScheduler setState={setState} state={state} updateData={updateData} isDischarge={isDischarge} />\n                </ErrorBoundary>}\n            footer={<>\n                <div className={`d-flex gap-10 align-items-center`}>\n                    {updateData && updateData?.patientSlots[0]?.discharge &&\n                        <div>\n                            <Badge pill bg=\"danger\" className='text-white font-weight-normal'>\n                                Discharged\n                            </Badge>\n                        </div>}\n                    <Button variant='secondary' onClick={() => onCancel()}>{'Cancel'}</Button>\n                    <Button onClick={onSubmitHandler}>{updateData ? 'Update' : 'Submit'}</Button>\n                </div>\n            </>}\n        />\n    )\n}","\nconst getTransferForm = () => {\n    return [\n        {\n            \"name\": \"provider\",\n            \"label\": \"Assign to Provider\",\n            \"valueKey\": \"provider\",\n            \"value\": \"\",\n            \"placeholder\": \"Select Provider\",\n            \"type\": \"select\",\n            \"validationType\": \"array\",\n            \"validations\": [\n                {\n                    \"type\": \"required\",\n                    \"params\": [\"Provider is required\"]\n                }\n            ],\n            \"options\": [],\n            \"isEditable\": true,\n            // \"optionKey\": {\n            //     \"url\": base.URL + '/user/list',\n            //     \"payload\": {\n            //         \"query\": {\n            //             \"isActive\": true,\n            //         },\n            //         \"keys\": [\"name\"],\n            //         \"value\": \"\"\n            //     },\n            //     \"method\": \"post\",\n            //     \"labelField\": \"name\",\n            //     \"valueField\": \"id\"\n            // },\n            \"pluginConfiguration\": {\n                // \"isAsyncSelect\": true,\n                // \"isClearable\": true,\n            },\n        },\n        {\n            \"name\": \"transferType\",\n            \"label\": \"Transfer type\",\n            \"valueKey\": \"transferType\",\n            \"value\": \"permenant\",\n            \"type\": \"radio\",\n            \"validationType\": \"string\",\n            \"validations\": [{\n                \"type\": \"required\",\n                \"params\": [\"Type should be mentioned\"]\n            }],\n            \"isEditable\": true,\n            \"options\": [{\n                \"label\": \"Permenant\",\n                \"value\": \"permenant\"\n            },\n            {\n                \"label\": \"Temporary\",\n                \"value\": \"temporary\"\n            }]\n        },\n        {\n            \"name\": \"duration\",\n            \"label\": \"Duration Period (In days)\",\n            \"valueKey\": \"duration\",\n            \"value\": \"\",\n            \"type\": \"number\",\n            \"validationType\": \"number\",\n            \"validations\": [],\n            \"isEditable\": true,\n            \"note\": \"Don't require in case of permenant transfer\"\n        },\n        {\n            \"name\": \"reasonOfTransfer\",\n            \"label\": \"Reason of Transfer\",\n            \"valueKey\": \"reasonOfTransfer\",\n            \"value\": \"\",\n            \"type\": \"textarea\",\n            \"validationType\": \"string\",\n            \"validations\": [\n                // {\n                //     \"type\": \"required\",\n                //     \"params\": [\"Please mention reason of the transfer\"]\n                // }\n            ],\n            \"isEditable\": true,\n            \"pluginConfiguration\": { \"rows\": 3 }\n        }\n    ]\n}\n\nexport default getTransferForm;","import React, { useMemo, useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport ModalReactstrap from 'Components/Modals/Modal'\nimport FormGenerator from 'Components/FormBuilder/Build/pages/FormGenerator'\nimport getTransferForm from './transferForm';\nimport patientslotService from 'services/APIs/services/patientslotService';\nimport { showError } from 'utils/package_config/toast';\n\nexport default function TransferPatient({\n    toggleTransferModel, state, data, providers = []\n}) {\n    const [transferData, setTransferState] = useState({\n        facility: null,\n        provider: null,\n        selectedRows: [],\n        isLoading: false\n    })\n    const UserFormData = useMemo(() => getTransferForm(), []);\n    const { formJSON } = useMemo(() => {\n        const selectedRows = data.filter(i => state.selectionModel.includes(i.id));\n        if (!selectedRows.length) return [];\n        const [patient] = selectedRows\n        // const { providerId } = patient.patientSlots[0];\n        const facility = patient.patientSlots[0]?.facilitySlotInfo || null;\n        let providerOpt = providers\n        if (facility) {\n            providerOpt = providerOpt.filter(i => i.value.facilityAssigns.map(j => j.facilityId).includes(facility.id));\n        }\n        providerOpt = providerOpt.map(i => ({ ...i, value: i.id }))\n        setTransferState(prev => ({ ...prev, facility, selectedRows }));\n        const formJSON = UserFormData.map((item) => {\n            if (item.name === 'provider') item.options = providerOpt\n            return item;\n        });\n        return { formJSON }\n    }, [UserFormData, data, state.selectionModel, providers]);\n\n    const onTransferPatient = async (payload) => {\n        try {\n            setTransferState(prev => ({ ...prev, isLoading: true }));\n            await patientslotService.transferPatient({ payload });\n            setTransferState(prev => ({ ...prev, isLoading: false }));\n            toggleTransferModel(true);\n        } catch (error) {\n            console.error(error);\n            setTransferState(prev => ({ ...prev, isLoading: false }));\n        }\n    }\n\n    const onSubmitTransfer = async (data) => {\n        if (!data.provider?.length) return showError(\"Please assign provider\");\n        if (data.hasOwnProperty(\"provider\") && !!data.provider?.length) {\n            data.providerId = data.provider[0].value\n            delete data.provider\n        }\n        data.type = data.transferType\n        if (data.type === \"permenant\" && data.duration) data.duration = 0\n        data.patientInfo = transferData.selectedRows.map((item => ({\n            patientId: item.id,\n            patientSlotId: item.patientSlots[0].id,\n            providerId: item.patientSlots[0].providerId\n        })))\n        await onTransferPatient(data)\n    }\n\n    return (\n        <ModalReactstrap\n            header=\"Transfer Patient\"\n            toggle={toggleTransferModel}\n            show={state.transferModel}\n            body={<>\n                {\n                    state.transferModel && !!state.selectionModel.length && (\n                        <FormGenerator\n                            className=\"m-0\"\n                            FormButtons={() => (\n                                <div className='d-flex justify-content-end gap-10'>\n                                    <Button variant='secondary' onClick={toggleTransferModel}>Cancel</Button>\n                                    <Button type=\"submit\" variant='primary'>Save</Button>\n                                </div>\n                            )}\n                            resetOnSubmit={false}\n                            dataFields={formJSON}\n                            onSubmit={onSubmitTransfer}\n                        />\n                    )\n                }</>}\n        />\n    )\n}","import { TakeConfirmation } from \"Components/components\";\nimport dischargeReasonService from \"services/APIs/services/dischargeReasonService\";\n\nconst getDeleteForm = ({ cbDelete }) => {\n    const reasonsList = [\n        // { value: \"Treatment completion\", label: \"Treatment completion\" },\n        // { value: \"Transfer to another facility\", label: \"Transfer to another facility\" },\n        // { value: \"Patient request\", label: \"Patient request\" },\n        // { value: \"Stable condition\", label: \"Stable condition\" },\n    ]\n\n    return [\n        {\n            \"name\": \"dischargeDate\",\n            \"label\": \"Date of discharge\",\n            \"valueKey\": \"dischargeDate\",\n            \"value\": \"\",\n            \"type\": \"date\",\n            \"validationType\": \"string\",\n            \"validations\": [],\n            \"isEditable\": true,\n            \"pluginConfiguration\": { \"isDateRange\": false },\n            // \"classes\": { wrapper: \"col-12\", label: \"\", field: \"form-control\", error: \"\" },\n        },\n        {\n            \"name\": \"reasonType\",\n            \"label\": \"Select Reason\",\n            \"valueKey\": \"reasonType\",\n            \"value\": \"\",\n            \"type\": \"select\",\n            \"validationType\": \"array\",\n            \"validations\": [],\n            \"isEditable\": true,\n            \"options\": reasonsList,\n            \"onDelete\": async (id) => {\n                TakeConfirmation({\n                    title: \"Are you sure to delete the reason?\",\n                    onDone: async () => {\n                        await dischargeReasonService.delete({ payload: { id } });\n                        cbDelete();\n                    }\n                })\n            },\n            \"pluginConfiguration\": {\n                \"isCreatable\": true,\n                \"isClearable\": true,\n                \"isOptionRemovable\": true,\n                \"removedText\": \"Delete option\",\n                \"deleteUrl\": \"/dischargeReason/delete\",\n            },\n            // \"classes\": { wrapper: \"col-12\", label: \"\", field: \"\", error: \"\" },\n        },\n        {\n            \"name\": \"reason\",\n            \"label\": \"Reason\",\n            \"valueKey\": \"reason\",\n            \"value\": \"\",\n            \"type\": \"textarea\",\n            \"validationType\": \"string\",\n            \"validations\": [\n                // {\n                //     \"type\": \"required\",\n                //     \"params\": [\"Please mention reason of the transfer\"]\n                // }\n            ],\n            \"isEditable\": true,\n            \"pluginConfiguration\": { \"rows\": 3 }\n        }\n    ]\n}\n\nexport default getDeleteForm;","import React, { useCallback, useMemo, useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport ModalReactstrap from 'Components/Modals/Modal'\nimport FormGenerator from 'Components/FormBuilder/Build/pages/FormGenerator'\nimport getDeleteForm from './deletePatientForm';\nimport moment from 'moment-timezone';\nimport patientslotService from 'services/APIs/services/patientslotService';\nimport dischargeReasonService from 'services/APIs/services/dischargeReasonService';\nimport { showError } from 'utils/package_config/toast';\nimport { useQuery } from '@tanstack/react-query';\n\nexport default function DeletePatient({\n    toggleDeleteModel, state\n}) {\n    const [discharging, setDischarging] = useState(false);\n\n    // Query hook to fetch data based on queryString & caching\n    const { data: dischargeReasons, refetch } = useQuery({\n        queryKey: [\"/deschargeReason/list\"],\n        queryFn: async () => {\n            const data = await dischargeReasonService.list({});\n            return (data.data.map(item => ({ id: item.id, label: item.title, value: item.title })) || []);\n        },\n        keepPreviousData: false,\n        refetchOnWindowFocus: false,\n        enabled: Boolean(state.deleteModel)\n    });\n\n    const patientData = state.deleteModel;\n    const formJSON = useMemo(() => {\n        let form = getDeleteForm({ cbDelete: refetch });\n        form = form.map((item) => {\n            if (item.name === \"dischargeDate\") item.value = state.filters.visitDate ? moment(state.filters.visitDate).toDate() : moment().toDate();\n            if (item.name === \"reasonType\") item.options = dischargeReasons;\n            return item;\n        });\n        return form;\n    }, [dischargeReasons, state.filters?.visitDate, refetch]);\n\n    const onSubmitDelete = useCallback(async (data) => {\n        try {\n            const [reasonType] = data.reasonType || []\n            if (reasonType) data.reasonType = reasonType.label\n            else return showError(\"Please select a reason for discharge\");\n            const reasonId = dischargeReasons.find((i) => i.value === data.reasonType)?.id;\n            setDischarging(true);\n            const payload = {\n                ...data,\n                patientId: patientData?.id,\n                providerId: patientData?.patientSlots[0]?.providerId,\n                slotId: patientData?.patientSlots[0]?.id,\n                discharge: true,\n                reasonId\n            }\n            await patientslotService.dischargeUpdate({ payload });\n            toggleDeleteModel(true);\n        } catch (error) {\n            console.error(error);\n        } finally {\n            setDischarging(false);\n        }\n    }, [patientData, toggleDeleteModel, dischargeReasons]);\n\n    return (\n        <ModalReactstrap\n            header=\"Discharge Patient\"\n            toggle={() => toggleDeleteModel()}\n            show={Boolean(state.deleteModel)}\n            body={<>{\n                state.deleteModel && (\n                    <FormGenerator\n                        className=\"m-0\"\n                        resetOnSubmit={false}\n                        FormButtons={() => (\n                            <div className='d-flex justify-content-end gap-10'>\n                                <Button variant='secondary' onClick={() => toggleDeleteModel()}>Cancel</Button>\n                                <Button type=\"submit\" variant='primary' disabled={discharging}>\n                                    {discharging ? \"Discharging\" : \"Discharge\"}\n                                </Button>\n                            </div>\n                        )}\n                        dataFields={formJSON}\n                        onSubmit={onSubmitDelete}\n                    />\n                )\n            }</>}\n        />\n    )\n}\n","import React, { useCallback, useEffect, useState } from 'react'\n// import { Check, Close } from '@mui/icons-material';\n\nexport default function PatientIsVisited({ row, updatePatientVisited }) {\n    const [isPatientVisited, setPatientVisited] = useState(row.patientSlots[0]?.isVisited || false);\n\n    useEffect(() => {\n        // set visited state whenever updated\n        if (row.patientSlots[0]) setPatientVisited(row.patientSlots[0]?.isVisited);\n    }, [row.patientSlots]);\n\n    const changePatientVisited = useCallback(() => {\n        const updateVal = !isPatientVisited;\n        setPatientVisited(updateVal);\n        updatePatientVisited({ id: row.patientSlots[0].id, isVisited: updateVal });\n    }, [isPatientVisited, row.patientSlots, updatePatientVisited]);\n\n    return (\n        <div onClick={(e) => e.stopPropagation()} className={`d-flex h-100 w-100 custom-control custom-checkbox cursor-pointer justify-content-center align-items-center ${isPatientVisited ? \"patient-visited\" : \"\"}`}>\n            {/* {isPatientVisited ? <Check /> : <Close />} */}\n            <div>\n                <input\n                    className=\"custom-control-input\"\n                    id={`select-all-${row.id}`}\n                    name={`select-all-${row.id}`}\n                    type=\"checkbox\"\n                    checked={isPatientVisited}\n                    onChange={() => changePatientVisited()}\n                />\n                <label className=\"custom-control-label\" htmlFor={`select-all-${row.id}`}>\n                </label>\n            </div>\n        </div>\n    )\n}\n\n// ******************* Test Code ************************\n// isEditing ?\n//     <div className=\"custom-control custom-checkbox\" ref={ref}>\n//         <input type=\"checkbox\" className=\"custom-control-input\" id=\"isPatientVisited\"\n//             checked={isPatientVisited}\n//             onChange={changePatientVisited}\n//         />\n//         <label className=\"custom-control-label\" htmlFor=\"isPatientVisited\">&nbsp;</label>\n//     </div> : ","import { useCallback, useState } from \"react\";\nimport ReactSelect from \"react-select\";\nimport { TakeConfirmation } from \"Components/components\";\nimport { showSuccess } from \"utils/package_config/toast\";\n\nfunction SecondaryBillingCode({\n    indexValue, paymentCode = [], paymentOptions, onUpdate, isMulti = false, row, apiRef\n}) {\n    const [isUpdating, setIsUpdating] = useState(false);\n\n    const onUpdateCodes = useCallback(async (data) => {\n        try {\n            let addedCode = [], removedCode = [];\n            if (isMulti) {\n                const oldArr = paymentCode?.map(i => i.value) || [];\n                const newArr = data.map(i => i.value) || [];\n                addedCode = newArr?.filter(item => !oldArr.includes(item));\n                removedCode = oldArr?.filter(item => !newArr.includes(item));\n            } else {\n                addedCode = data.map(i => i.value) || [];\n            }\n            const onDoneChange = async () => {\n                setIsUpdating(true)\n                await onUpdate({ addedCode, removedCode });\n                showSuccess(\"Billing codes updated successfully\");\n                setIsUpdating(false);\n            }\n            if (!!addedCode.length) onDoneChange()\n            else\n                TakeConfirmation({\n                    title: \"Are you sure to change the billing code?\",\n                    onDone: onDoneChange\n                })\n        } catch (error) {\n            console.error(error);\n            setIsUpdating(false)\n        }\n    }, [paymentCode, onUpdate, isMulti]);\n\n    const onBillingCodeClick = useCallback((e) => {\n        e.stopPropagation();\n        const expanded = apiRef.current.getExpandedDetailPanels();\n        if (expanded.includes(row.id)) apiRef.current.toggleDetailPanel(row.id)\n    }, [apiRef, row.id]);\n\n    return (<>\n        <div onClick={onBillingCodeClick} className=\"py-2 w-100\">\n            <ReactSelect\n                name={\"billingCode\"}\n                value={paymentCode}\n                onChange={(data) => isMulti ? onUpdateCodes(data) : onUpdateCodes([data])}\n                options={paymentOptions ? paymentOptions : []}\n                className=\"basic-multi-select issue-multi-select_user-dropdown input-border min-width-160\"\n                classNamePrefix=\"billingcode_select\"\n                placeholder='Billing code'\n                menuPlacement={indexValue > 2 ? \"top\" : \"bottom\"}\n                maxMenuHeight={200}\n                isMulti={isMulti}\n                isDisabled={isUpdating}\n                isLoading={isUpdating}\n            />\n        </div>\n    </>)\n}\nexport default SecondaryBillingCode;","import React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport moment from 'moment-timezone';\nimport ReactSelect from 'react-select';\nimport ReactDatePicker from 'react-datepicker';\nimport { isMobile } from 'react-device-detect';\nimport { useLocation } from 'react-router-dom';\n// Bootstrap\nimport { Button } from 'react-bootstrap';\nimport { Image, ListTask, MicFill, PersonDashFill, StickyFill } from 'react-bootstrap-icons';\n// Mui Components\nimport { LinearProgress } from '@mui/material';\nimport { MuiActionButton, MuiDataGridFooter, MuiDeleteAction, MuiEditAction } from 'Components/MuiDataGrid';\nimport { DataGridPro, GRID_CHECKBOX_SELECTION_COL_DEF, GRID_DETAIL_PANEL_TOGGLE_COL_DEF, useGridApiRef } from '@mui/x-data-grid-pro';\n// React Query\nimport { useQuery } from '@tanstack/react-query';\n// Redux\nimport { dispatch } from 'redux/store';\nimport { useSelector } from 'react-redux';\nimport { MODEL_CONST } from 'redux/constants/modelConstants';\nimport { generatePayload, getDateXDaysAgoStartOf, getImageURL, toastPromise, updateState } from 'redux/common';\n\nimport { CONST } from 'utils/constants';\nimport { showError, showSuccess } from 'utils/package_config/toast';\nimport useDebounce from 'services/hooks/useDebounce';\n\n// Components\nimport DetailPanelContent from 'Routes/Dashboard/components/SchedulePatient/DetailPanel';\nimport AddNewPatient from 'Routes/Dashboard/components/SchedulePatient/AddNewPatient';\nimport TransferPatient from 'Routes/Dashboard/components/SchedulePatient/components/TransferPatient';\nimport DeletePatient from 'Routes/Dashboard/components/SchedulePatient/components/DeletePatient';\nimport PatientIsVisited from 'Routes/Dashboard/components/SchedulePatient/components/PatientIsVisited';\nimport SecondaryBillingCode from 'Routes/Dashboard/components/SchedulePatient/components/SecondaryBillingCode';\nimport { CreateEditTodo } from 'Routes/Dashboard/components/SchedulePatient/DetailPanel/TodoList';\nimport { CreateEditNotes } from 'Routes/Dashboard/components/SchedulePatient/DetailPanel/PatientNotes';\nimport { CreateEditDictation } from 'Routes/Dashboard/components/SchedulePatient/DetailPanel/Dictation/CreateEditDictation';\nimport { CreateEditAttachment } from 'Routes/Dashboard/components/SchedulePatient/DetailPanel/PictureData/CreateEditAttachment';\nimport { getHCMDProviders } from 'Routes/SuperAdmin/components/Facility/CreateEditFacility';\nimport { downloadFilebyBlob, getLocalStore, reorderColumnOrderObject, setLocalStore, sortCharByField } from 'services/helper/default';\nimport { getDesignationByKey } from 'services/helper';\nimport { getAdminAccess } from 'utils/permission';\nimport ErrorBoundary from 'Components/ErrorBoundry';\nimport patientService from 'services/APIs/services/patientService';\nimport facilityService from 'services/APIs/services/facilityService';\nimport paymentCodeService from 'services/APIs/services/paymentCodeService';\nimport userService from 'services/APIs/services/userService';\nimport patientslotService, { patientpaymentService } from 'services/APIs/services/patientslotService';\nimport { TakeConfirmation } from 'Components/components';\n\nconst defaultSort = [{ field: 'createdAt', sort: 'desc' }];\nconst getDefaultState = (params, isProvider, providervalue) => {\n    const localData = getLocalStore(\"filters\");\n    return {\n        rows: [],\n        page: 1,\n        total: 0,\n        pageSize: 20,\n        rowCountState: 0,\n        loading: false,\n        isHistory: false,\n        search: localData?.rounding?.search ? localData?.rounding.search : '',\n        currSearch: \"\",\n        roomNumber: localData?.rounding?.roomNumber ? localData?.rounding.roomNumber : null,\n        filters: {\n            facility: localData?.rounding?.facility ? localData?.rounding.facility : null,\n            attendee: params?.provider ? params.provider : (isProvider ? providervalue :\n                (localData?.rounding?.attendee ? localData?.rounding.attendee : null)),\n            visitDate: getDateXDaysAgoStartOf(0).toLocaleString()\n        },\n        sortModel: defaultSort,\n        paymentOptions: [],\n        primaryPaymentOptions: [],\n        secondaryPaymentOptions: [],\n        loadingExport: false,\n        loadingPaymentOptions: false,\n        facilityOptions: [],\n        providerOptions: [],\n        nurseOptions: [],\n        attendingOptions: [],\n        loadingOptions: false,\n        dictation: false,\n        todoModel: false,\n        pictureData: false,\n        selectedPatientId: null,\n        addNewPatient: false,\n        selectionModel: [],\n        transferModel: false,\n        noteModel: false,\n        orderRooms: {\n            inputValue: '',\n            value: [],\n        },\n        deleteModel: false,\n        row: null,\n        updatedDetailData: null\n    }\n}\n\nconst POPULATE_PATIENT = [\"patientAssignFacility\", \"patientPaymentCode\", \"facilityInfo\", \"patientAvailable\"] // \"secondaryPaymentCodeInfo\",\nconst columnFields = [\n    \"roomNumber\",\n    \"lastName\",\n    \"visited\",\n    \"actions\",\n    \"profilePicture\",\n    \"facility\",\n    \"TypeofDischarge\",\n    \"reasonOfDischarge\",\n    \"insurance\",\n    \"attending\",\n    \"primaryBillCode\",\n    \"secondaryBillCode\",\n    \"admitDate\"\n];\n\nexport default function SchedulePatient({ isHistory = false }) {\n    const location = useLocation();\n    const apiRef = useGridApiRef();\n    const { user } = useSelector(state => state.user);\n    const { userDesignations } = useSelector(state => state.chat);\n    const { updateTable } = useSelector(state => state.model);\n    const params = useMemo(() => location.state || {}, [location.state]);\n    const [state, setState] = useState(getDefaultState(params, user?.isProvider));\n    const newSearch = useDebounce(state.search, 1000);\n    const roomNumberFilter = useDebounce(state.roomNumber, 1000);\n    const [colOrderState, setOrderState] = useState(1);\n\n    useEffect(() => {\n        // Fetch facility list (provider based)\n        (async () => {\n            setState(prev => ({ ...prev, loadingOptions: true }));\n            try {\n                const isAdmin = getAdminAccess(user);\n                const payload = {\n                    \"query\": { \"providerId\": (!isAdmin && user?.isProvider) ? user.id : undefined },\n                    \"options\": { \"populate\": [\"facilityProviderInfo\", \"organizationInfo\"] }\n                }\n                const facilityData = await facilityService.list({ payload });\n                setState(prev => ({\n                    ...prev,\n                    loadingOptions: false,\n                    facilityOptions: facilityData?.data?.map(i => ({ id: i.id, value: i, label: i.name })) || [],\n                }));\n            } catch (error) { console.error(error) }\n        })();\n        // Fetch Primary and secondary code list\n        (async () => {\n            try {\n                setState(prev => ({ ...prev, loadingPaymentOptions: true }))\n                const primaryPaymentOptions = await paymentCodeService.list({ payload: { \"options\": { populate: ['primaryCode'] } } });\n                const secondaryPaymentOptions = await paymentCodeService.list({ payload: { \"options\": { populate: ['secondaryCode'] } } });\n                setState(prev => ({\n                    ...prev,\n                    loadingPaymentOptions: false,\n                    primaryPaymentOptions: primaryPaymentOptions.data.map((item => ({ id: item.id, value: item.id, label: <ColorCodeLabel item={item} /> }))),\n                    secondaryPaymentOptions: secondaryPaymentOptions.data.map((item => ({ id: item.id, value: item.id, label: <ColorCodeLabel item={item} /> }))),\n                }));\n            } catch (error) { showError('Could not fetch payment codes.', error) }\n        })();\n    }, [user]);\n\n    // Fetch HCMD Providers, MD, NP for filtered list\n    useEffect(() => {\n        (async () => {\n            if (userDesignations) {\n                setState(prev => ({ ...prev, loadingPaymentOptions: true }));\n                const providerDesignation = await getDesignationByKey(CONST.DESIGNATION_KEY.PROVIDER, \"selectable\");\n                const NursePracDesignation = await getDesignationByKey(CONST.DESIGNATION_KEY.NURSE_PRACTITIONER);\n                const providers = await getHCMDProviders('', providerDesignation?.id, [\"providerInfoAssignfacility\"]);\n                const nurses = await getHCMDProviders('', NursePracDesignation?.id, [\"providerInfoAssignfacility\"]);\n                const attendeeData = await userService.list({\n                    payload: { \"options\": { \"populate\": [\"providerInfoAssignfacility\"] } }\n                })\n                setState(prev => ({\n                    ...prev,\n                    loadingPaymentOptions: false,\n                    attendingOptions: attendeeData.data.map(i => ({ id: i.id, value: i, label: i.name })),\n                    providerOptions: providers.data.map(i => ({ id: i.id, value: i, label: i.name })),\n                    nurseOptions: nurses.data.map(i => ({ id: i.id, value: i, label: i.name })),\n                }));\n            }\n        })();\n    }, [userDesignations]);\n\n    const getData = useCallback(async ({ exportExcel = false, config = {} }) => {\n        if (!Boolean(state.filters?.visitDate)) return null;\n        // if no facility allocated to user\n        if (!state.facilityOptions.length) return null;\n        const mdDesg = await getDesignationByKey(CONST.DESIGNATION_KEY.PROVIDER, \"selectable\");\n        const npDesg = await getDesignationByKey(CONST.DESIGNATION_KEY.NURSE_PRACTITIONER, \"selectable\");\n        // const isAdmin = getAdminAccess(user);\n        if (state.filters?.MD?.value && !mdDesg) return null;\n        if (state.filters?.NP?.value && !npDesg) return null;\n        let payload = await generatePayload({\n            keys: [\"firstName\", \"lastName\", \"phone\", \"insurance\"],\n            value: newSearch,\n            options: {\n                page: state.page, limit: state.pageSize, pagination: !exportExcel,\n                // populate: isHistory ? [...POPULATE_PATIENT, \"patientSlots\"] : POPULATE_PATIENT,\n                populate: POPULATE_PATIENT,\n                sort: !!state.sortModel?.length ? state.sortModel.map(i => ([i.field, i.sort])) : undefined,\n            },\n            body: {\n                [isHistory ? 'dischargeDate' : 'start']: {\n                    dateFrom: moment(state.filters.visitDate).format(\"YYYY-MM-DD\"),\n                    dateTo: moment(state.filters.visitDate).format(\"YYYY-MM-DD\")\n                }\n            },\n            rest: {\n                discharge: isHistory,\n                facilityId:\n                    (state.filters?.facility?.value?.id && [state.filters?.facility?.value?.id]) ||\n                    (!!state?.facilityOptions?.length && state.facilityOptions.map(i => i.id)) ||\n                    undefined,\n                // (!isAdmin ? state.facilityOptions.map(i => i.id) : undefined) || undefined,\n                roomNumber: roomNumberFilter || undefined,\n                attendeeId: state.filters?.facility || params?.provider ? state.filters?.attendee?.value : undefined,\n                MD: state.filters?.MD ? { id: state.filters?.MD?.value, designationId: mdDesg?.id } : undefined,\n                NP: state.filters?.NP ? { id: state.filters?.NP?.value, designationId: npDesg?.id } : undefined,\n            },\n            isCount: true, currSearch: state.currSearch\n        });\n        payload.options.sort = [...(payload.options.sort || []), [\"patientSlots\", \"start\", \"desc\"]]\n        if (!!payload.options.sort?.length && payload.options.sort[0][0] === \"roomNumber\")\n            payload.options.sort[0].unshift(\"patientSlots\")\n        if (exportExcel) payload.exportExcel = exportExcel;\n        const data = await patientService.list({ payload, config });\n        {\n            let localStore = getLocalStore(\"filters\");\n            if (!localStore.hasOwnProperty(\"rounding\")) localStore.rounding = {};\n            localStore.rounding.search = newSearch || null\n            localStore.rounding.facility = state.filters?.facility || null;\n            localStore.rounding.attendee = state.filters?.attendee || null;\n            setLocalStore(\"filters\", localStore);\n        }\n        setState(prev => ({\n            ...prev, loading: false, currSearch: state.currSearch,\n            page: (state.currSearch !== newSearch) ? 1 : prev.page\n        }));\n        if (exportExcel) return data;\n        if (data.status === 1) {\n            data.data.rows = data.data.rows.map((i) => {\n                if (i.patientSlots[0]?.roomNumber) i.roomNumber = i.patientSlots[0]?.roomNumber;\n                return i;\n            });\n            // updateState(setState, { loading: false, rows: data.data.rows, total: data.data.count });\n            data.data.lastUpdated = moment().format();\n            return data.data;\n        }\n        return null;\n    }, [state?.filters, newSearch, state?.sortModel, state.currSearch, state.page, state.pageSize, isHistory, params?.provider, roomNumberFilter, state.facilityOptions]);\n\n    // Query hook to fetch data based on queryString & caching\n    const { data: patientSlotList, refetch, isFetching } = useQuery({ // isFetching,\n        queryKey: [\"/patient/list\", state.page, state.pageSize, newSearch, roomNumberFilter, state.filters, state.sortModel, isHistory, state.facilityOptions, updateTable],\n        queryFn: getData,\n        keepPreviousData: false,\n        // staleTime: CONST.QUERY_STALE_TIME.L1,\n        refetchOnWindowFocus: false,\n    });\n\n    // Request for update primary and secondary billing code\n    const updatePaymentCode = useCallback(async (payload, isPrimary) => {\n        if (isPrimary) {\n            payload.paymentCode = payload.addedCode[0] ? payload.addedCode[0] : undefined;\n            // Delete unwanted properties\n            ['patientId', 'addedCode', 'removedCode'].forEach(prop => delete payload[prop]);\n        }\n        isPrimary ?\n            await patientslotService.update({ payload }) :\n            await patientpaymentService.secondarypaymentcodeUpdate({ payload });\n        refetch();\n        return;\n    }, [refetch]);\n\n    // close all models\n    const closeModals = useCallback((refresh = false) => {\n        setState(prev => ({ ...prev, deleteModel: false, todoModel: false, dictation: false, noteModel: false, pictureData: false, row: null, addNewPatient: false, update: false }));\n        refresh && refetch();\n    }, [refetch]);\n\n    // Request for update patient visited\n    const updatePatientVisited = useCallback(async (payload) => {\n        const data = await patientslotService.update({ payload });\n        if (payload.hasOwnProperty(\"slotIds\")) {\n            apiRef.current.setSelectionModel([]);\n            refetch();\n            return showSuccess(\"Slots marked as done successfully.\");\n        }\n        if (patientSlotList.rows)\n            patientSlotList.rows.find(i => i.patientSlots[0]?.id === payload.id).patientSlots[0].isVisited = data.data.isVisited;\n    }, [patientSlotList, refetch, apiRef]);\n\n    const setPatientProfile = useCallback((patientId, profilePicture) => {\n        if (patientSlotList?.rows.find(i => i.id === patientId)) {\n            patientSlotList.rows.find(i => i.id === patientId).profilePicture = profilePicture;\n            setOrderState(prev => prev + 1);\n        }\n    }, [patientSlotList]);\n\n    // Create picture data for a patient \n    const onSubmitPicturedata = useCallback(async (body, mode, id) => {\n        if (state.dictation) {\n            body = {\n                ...body,\n                fileName: body.fileName,\n                mediaType: body.mediaType,\n                mediaUrl: body.mediaUrl,\n            }\n        }\n        await toastPromise({\n            func: async (resolve, reject) => {\n                try {\n                    const data = await patientService.attachmentCreate({ payload: { patientId: id, ...body } });\n                    closeModals();\n                    setState(prev => ({ ...prev, updatedDetailData: data.data }));\n                    if (body.profilePicture)\n                        setPatientProfile(id, body.mediaUrl);\n                    resolve(1);\n                } catch (error) {\n                    console.error(error);\n                    reject(0);\n                }\n            }, loading: 'Creating File Data.', error: 'Could not create File Data.', success: 'File data created.',\n            options: { id: \"create-picture\" }\n        });\n    }, [closeModals, state.dictation, setPatientProfile]);\n\n    // Create and assign todo for a patient\n    const onSubmitHandlerTodo = useCallback(async (body, mode, id) => {\n        // if (body.assigneeId === user.id) return toast.error(\"Can't assign to own user, Please select another assignee\")\n        await toastPromise({\n            func: async (resolve, reject) => {\n                try {\n                    await patientService.taskCreate({ payload: { patientId: id, ...body } });\n                    updateState(setState, { dictation: false, pictureData: false, todoModel: false, noteModel: false })\n                    resolve(1);\n                } catch (error) {\n                    console.error(error);\n                    reject(0);\n                }\n            }, loading: 'Creating Todo.', error: 'Could not create todo.', success: 'Todo created.',\n            options: { id: \"create-todo\" }\n        });\n    }, []);\n\n    // Create notes for a patient\n    const onSubmitNotes = useCallback(async (body, mode, id) => {\n        await toastPromise({\n            func: async (resolve, reject) => {\n                try {\n                    await patientService.noteCreate({ payload: { patientId: id, ...body } });\n                    closeModals();\n                    resolve(1);\n                } catch (error) {\n                    console.error(error);\n                    reject(0);\n                }\n            }, loading: 'Creating note.', error: 'Could not create note.', success: 'note created.',\n            options: { id: \"create-notes\" }\n        });\n    }, [closeModals]);\n\n    const onDeleteSlot = useCallback((patient) => {\n        TakeConfirmation({\n            title: `Are you sure about to delete the slot of the patient \"${patient?.lastName}\"?`,\n            onDone: async () => {\n                const [{ id }] = patient?.patientSlots;\n                await patientslotService.delete({ payload: { id } });\n                refetch();\n            }\n        })\n    }, [refetch]);\n\n    // Data grid columns\n    const columns = useMemo(() => {\n        let orderer = {};\n        const isToday = state.filters.visitDate ? moment().format(\"MM/DD/YYYY\") === moment(state.filters.visitDate).format(\"MM/DD/YYYY\") : null;\n        const colOrder = JSON.parse(localStorage.getItem('rounding-sheet-col-order'));\n        if (colOrderState && colOrder)\n            columnFields.map((i, index) => {\n                const order = (colOrder[i] || colOrder[i] === 0) ? colOrder[i] : index;\n                orderer[i] = order;\n                return { name: i, order }\n            });\n        localStorage.setItem('rounding-sheet-col-order', JSON.stringify(orderer));\n        let commonColumns = [\n            {\n                field: \"roomNumber\", headerName: \"Room\", headerAlign: \"center\", align: 'center', hide: isHistory,\n                renderCell: ({ row }) => {\n                    const roomNumber = row?.patientSlots[0]?.roomNumber;\n                    return (<>{roomNumber ? roomNumber : '-'}</>)\n                }\n            },\n            {\n                field: \"lastName\", headerName: \"Patient name\", minWidth: 180, headerAlign: \"center\", align: 'center', flex: 1,\n                renderCell: ({ row }) => {\n                    const { firstName, lastName, middleName, patientSlots } = row;\n                    const username = getPatientName(lastName, firstName, middleName); // get patient name in specific order\n                    const { name = \"-\", image = \"\" } = patientSlots[0]?.facilitySlotInfo?.info || {};\n                    return (\n                        <div className='d-flex align-items-center gap-10'>\n                            {username}\n                            <img src={getImageURL(image, '35x35', false)} alt=\"\"\n                                onClick={(e) => {\n                                    e.stopPropagation();\n                                    dispatch({\n                                        type: MODEL_CONST.USER_IMAGE_DATA, payload: {\n                                            name,\n                                            image,\n                                            id: row.facilityInfo?.info?.id,\n                                            updateTable: \"rounding-sheet\",\n                                            updateType: \"organization\",\n                                            updateField: \"image\"\n                                        }\n                                    })\n                                }}\n                            />\n                        </div>)\n                }\n            },\n            {\n                field: \"visited\", headerName: \"Done\", headerAlign: \"center\", align: 'center', hide: isHistory,  // sortable: false, type: 'boolean', editable: true\n                renderCell: ({ row }) => {\n                    return <PatientIsVisited key={state.filters.visitDate} row={row} updatePatientVisited={updatePatientVisited} />\n                }\n            },\n            {\n                field: \"actions\", headerName: \"Actions\", headerAlign: \"center\", align: 'center', sortable: false,\n                minWidth: isHistory ? 180 : isMobile || !isToday ? 150 : 240,\n                renderCell: ({ row }) => {\n                    return (<div onClick={e => e.stopPropagation()} className=\"d-flex flex-wrap\">\n                        <MuiActionButton Icon={ListTask} color=\"primary\" fontSize={16} size=\"sm\" tooltip='Todo' onClick={() => updateState(setState, { todoModel: true, selectedPatientId: row.id, row })} />\n                        <MuiActionButton Icon={StickyFill} color=\"primary\" fontSize={16} size=\"sm\" tooltip='Note' onClick={() => updateState(setState, { noteModel: true, selectedPatientId: row.id, row })} />\n                        <MuiActionButton Icon={Image} color=\"primary\" fontSize={16} size=\"sm\" tooltip='Picture Data' onClick={() => updateState(setState, { pictureData: true, selectedPatientId: row.id })} />\n                        <MuiActionButton Icon={MicFill} color=\"primary\" fontSize={16} size=\"sm\" tooltip='Recorder' onClick={() => updateState(setState, { dictation: true, selectedPatientId: row.id })} />\n                        <MuiEditAction tooltip='Edit' onClick={() => updateState(setState, { update: row })} />\n                        {!isHistory && <MuiActionButton Icon={PersonDashFill} color=\"secondary\" fontSize={16} size=\"sm\" tooltip='Discharge' onClick={() => updateState(setState, { deleteModel: row })} />}\n                        {!isHistory && <MuiDeleteAction tooltip='Delete' onClick={() => onDeleteSlot(row)} />}\n                    </div>)\n                }\n            },\n            {\n                field: \"profilePicture\", headerName: \"Profile\", maxWidth: 80, headerAlign: \"center\", align: 'center', sortable: false,\n                renderCell: ({ row }) => {\n                    const { firstName, lastName, middleName, profilePicture: profile } = row;\n                    const username = getPatientName(lastName, firstName, middleName); // get patient name in specific order\n                    return (\n                        <div className='d-flex'>\n                            <img src={getImageURL(profile, '35x35', false)} alt=\"\"\n                                onClick={(e) => {\n                                    e.stopPropagation();\n                                    dispatch({\n                                        type: MODEL_CONST.USER_IMAGE_DATA, payload: {\n                                            id: row.id,\n                                            name: username,\n                                            image: profile,\n                                            updateType: \"patient\",\n                                            updateTable: \"rounding-sheet\"\n                                        }\n                                    })\n                                }} />\n                        </div>)\n                }\n            },\n            {\n                field: \"facility\", headerName: \"Facility\", headerAlign: \"left\", align: 'left', sortable: false,\n                renderCell: ({ row }) => {\n                    const facility = row.patientSlots[0]?.facilitySlotInfo?.name || null;\n                    return (<>{facility ? facility : '-'}</>)\n                }\n            },\n            {\n                field: \"TypeofDischarge\", headerName: \"Discharge Type\", minWidth: 150, headerAlign: \"left\", align: 'left', hide: !isHistory, sortable: false,\n                renderCell: ({ row }) => {\n                    const reasonType = row.patientSlots[0]?.patientDischarge?.reasonType || null;\n                    return (<>{reasonType ? reasonType : '-'}</>)\n                }\n            },\n            {\n                field: \"reasonOfDischarge\", headerName: \"Discharge Reason\", minWidth: 150, headerAlign: \"left\", align: 'left', hide: !isHistory, sortable: false,\n                renderCell: ({ row }) => {\n                    const reason = row.patientSlots[0]?.patientDischarge?.reason || null;\n                    return (<>{reason ? reason : '-'}</>)\n                }\n            },\n            {\n                field: \"insurance\", headerName: \"Insurance\", headerAlign: \"left\", align: 'left', sortable: false,\n                renderCell: ({ row }) => (<>{row.insurance ? row.insurance : '-'}</>)\n            },\n            {\n                field: \"attending\", headerName: \"Attending\", headerAlign: \"left\", align: 'left', flex: 1, sortable: false,\n                renderCell: ({ row }) => {\n                    const attendee =\n                        (row.patientAssigns?.find(i => i.type === CONST.PROVIDER_TYPE.ATTENDEE)?.usersPatient?.name || null)\n                    return (<>{attendee ? attendee : '-'}</>)\n                },\n            },\n            {\n                field: \"primaryBillCode\", headerName: \"Primary Billing Code\", minWidth: 250, flex: 1, headerAlign: \"center\", align: 'center', sortable: false,\n                renderCell: (params) => {\n                    const { row } = params;\n                    const indexValue = params.api.getRowIndex(params.row.id);\n                    const payCode = (row.patientSlots[0] && row.patientSlots[0].patientPaymentCode) || null;\n                    const paymentCode = (payCode && [{\n                        label: <div className='d-flex gap-5 align-items-center'>\n                            {payCode?.colorCode && <div className='color-dot' style={\n                                { background: payCode?.colorCode, height: \"12px\", width: \"12px\" }} />}\n                            {payCode?.code}\n                        </div>,\n                        value: payCode?.id\n                    }]) || null;\n                    return (<SecondaryBillingCode indexValue={indexValue} paymentCode={paymentCode} row={row} apiRef={apiRef}\n                        paymentOptions={state.primaryPaymentOptions} loading={state.loadingPaymentOptions}\n                        onUpdate={(data) => updatePaymentCode({ ...data, patientId: row.id, id: row.patientSlots[0].id }, true)} />)\n                }\n            },\n            {\n                field: \"secondaryBillCode\", headerName: \"Secondary Billing Code\", minWidth: 250, flex: 1, headerAlign: \"center\", align: 'center', sortable: false,\n                renderCell: (params) => {\n                    const { row } = params;\n                    const indexValue = params.api.getRowIndex(params.row.id);\n                    const paymentCode = row.patientSlots[0].secondaryPaymentCodes?.map(i => ({\n                        label: <div className='d-flex gap-5 align-items-center'>\n                            {i?.paymentCodeInfo?.colorCode && <div className='color-dot' style={\n                                { background: i?.paymentCodeInfo?.colorCode, height: \"12px\", width: \"12px\" }} />}\n                            {i?.paymentCodeInfo?.code}\n                        </div>,\n                        value: i?.paymentCodeInfo?.id\n                    }))\n                    return (<SecondaryBillingCode indexValue={indexValue} paymentCode={paymentCode} row={row} apiRef={apiRef}\n                        loading={state.loadingPaymentOptions} paymentOptions={state.secondaryPaymentOptions} isMulti={true}\n                        onUpdate={(data) =>\n                            updatePaymentCode({ ...data, patientId: row.id, slotId: row.patientSlots[0].id })} />)\n                }\n            },\n            {\n                field: \"admitDate\", headerName: \"Admit Date\", headerAlign: \"center\", align: 'center', sortable: false,\n                renderCell: ({ row }) => {\n                    const admitDate = row.admitDate || null;\n                    return (<>{admitDate ? moment(admitDate).format(\"MM/DD/YY\") : '-'}</>)\n                }\n            },\n        ].map(i => ({ ...i, order: orderer[i.field] }));\n        commonColumns.sort((a, b) => {\n            if (a.order > b.order) return 1;\n            if (a.order < b.order) return -1;\n            return 0;\n        })\n        if (!isHistory) commonColumns.push({ ...GRID_CHECKBOX_SELECTION_COL_DEF });\n        commonColumns.push({ ...GRID_DETAIL_PANEL_TOGGLE_COL_DEF, hide: true });\n        return commonColumns;\n    }, [apiRef, isHistory, state.primaryPaymentOptions, state.secondaryPaymentOptions, state.filters.visitDate, state.loadingPaymentOptions,\n        updatePaymentCode, updatePatientVisited, onDeleteSlot, colOrderState]);\n\n    const toggleTransferModel = useCallback((refresh = false) => {\n        refresh && refetch();\n        setState(prev => ({ ...prev, transferModel: !prev.transferModel }));\n    }, [refetch]);\n\n    const { providerOptions, nurseOptions, attendingOptions } = useMemo(() => {\n        const facility = state.filters.facility;\n        let [providers, nurses, attendee] = [state.providerOptions, state.nurseOptions, state.attendingOptions];\n        if (facility) {\n            providers = providers.filter(i => i.value.facilityAssigns.map(j => j.facilityId).includes(facility.id));\n            nurses = nurses.filter(i => i.value.facilityAssigns.map(j => j.facilityId).includes(facility.id));\n            attendee = attendee.filter(i => i.value.facilityAssigns.map(j => j.facilityId).includes(facility.id));\n        }\n        providers = sortCharByField(providers.map(i => ({ ...i, value: i.id })), 'label');\n        nurses = sortCharByField(nurses.map(i => ({ ...i, value: i.id })), 'label');\n        attendee = sortCharByField(attendee.map(i => ({ ...i, value: i.id })), 'label');\n        return { providerOptions: providers, nurseOptions: nurses, attendingOptions: attendee };\n    }, [state.providerOptions, state.nurseOptions, state.attendingOptions, state.filters.facility]);\n\n    // Export excel data for a specified filters\n    const onExportDataHandler = useCallback(async () => {\n        try {\n            setState(prev => ({ ...prev, loadingExport: true }));\n            const config = {\n                responseType: 'arraybuffer',\n                headers: {\n                    'Accept': 'application/vnd.ms-excel',\n                    'Content-Type': 'application/vnd.ms-excel'\n                }\n            }\n            const data = await getData({ exportExcel: true, config });\n            const blob = new Blob([data], { type: 'application/vnd.ms-excel' });\n            downloadFilebyBlob(blob, `Patient_Slot_${moment(state.filters.visitDate).format('MM/DD/YY')}.xlsx`);\n            setState(prev => ({ ...prev, loadingExport: false }));\n            showSuccess('File Downloaded Successfully');\n        } catch (error) {\n            console.error(error);\n        }\n    }, [state?.filters?.visitDate, getData]);\n\n    // Mark as Done (visited) for every slot\n    const allMarkasVisited = useCallback(async () => {\n        if (!!state.selectionModel.length) {\n            const slotIds = state.selectionModel.map(patientId => {\n                const slot = patientSlotList?.rows.find(i => i.id === patientId);\n                if (slot) return slot.patientSlots[0]?.id;\n                return null;\n            }).filter(i => i);\n            await updatePatientVisited({ slotIds, isVisited: true });\n        }\n    }, [state.selectionModel, updatePatientVisited, patientSlotList?.rows]);\n\n    const onColumnOrderChange = useCallback((data) => {\n        let colOrder = JSON.parse(localStorage.getItem('rounding-sheet-col-order'));\n        const { targetIndex, oldIndex, field } = data;\n        const updatedColumnOrderObject = reorderColumnOrderObject(colOrder, targetIndex, oldIndex, field);\n        localStorage.setItem('rounding-sheet-col-order', JSON.stringify(updatedColumnOrderObject));\n        setOrderState(prev => prev + 1);\n    }, []);\n\n    const schedulePatients = useMemo(() => (\n        <ErrorBoundary>\n            <DataGridPro\n                apiRef={apiRef}\n                rows={patientSlotList?.rows || []}\n                columns={columns}\n                loading={isFetching}\n                autoHeight\n                disableColumnFilter\n                disableVirtualization\n                getDetailPanelHeight={() => 'auto'}\n                getDetailPanelContent={(params) =>\n                    <DetailPanelContent\n                        visitDate={state.filters.visitDate}\n                        setPatientProfile={setPatientProfile}\n                        updatedDetailData={state.updatedDetailData}\n                        setMainState={setState}\n                        params={params} />\n                }\n                checkboxSelection={!isHistory}\n                onRowClick={(params) => {\n                    apiRef.current.setSelectionModel(state.selectionModel.includes(params.id) ?\n                        state.selectionModel.filter(i => i !== params.id) : state.selectionModel.push(params.id));\n                    apiRef.current.toggleDetailPanel(params.id);\n                }}\n                onColumnOrderChange={onColumnOrderChange}\n                sortModel={state.sortModel}\n                onSortModelChange={(data) =>\n                    setState(prev => ({ ...prev, sortModel: !data.length ? prev.sortModel : data }))\n                }\n                disableRowSelectionOnClick\n                onSelectionModelChange={(selectionModel) => setState(prev => ({ ...prev, selectionModel: selectionModel }))}\n                selectionModel={state.selectionModel}\n                keepNonExistentRowsSelected\n                components={{\n                    LoadingOverlay: LinearProgress,\n                    Footer: () =>\n                        <MuiDataGridFooter isFetching={state.loading}\n                            lastUpdated={patientSlotList?.lastUpdated}\n                            pagination={{ page: state?.page, total: patientSlotList?.count || 0, pageSize: state?.pageSize }}\n                            onPageChange={(e, page) => {\n                                updateState(setState, { page: page });\n                            }}\n                        />,\n                }}\n                density=\"standard\"\n                getRowHeight={() => \"auto\"}\n                getRowClassName={({ row }) => `min-height-60`} // ${row.patientSlots[0]?.isVisited ? \"patient-visited-row\" : \"\"} // for different color\n                classes={{\n                    virtualScroller: \"react-select-datagrid-MuiDataGrid-virtualScroller\",\n                }}\n            />\n        </ErrorBoundary>\n        //eslint-disable-next-line\n    ), [apiRef, columns, isHistory, onColumnOrderChange, patientSlotList, state.loading, colOrderState, state?.page, state?.pageSize,\n        state.selectionModel, state.sortModel, state.updatedDetailData, setPatientProfile, state.filters.visitDate]);\n\n    // Calculate the start and end indices for the current page\n    const { startIndex, endIndex } = useMemo(() => {\n        const startIndex = (state?.page - 1) * state.pageSize + 1;\n        const endIndex = Math.min(state?.page * state.pageSize, patientSlotList?.count);\n        return { startIndex, endIndex }\n    }, [patientSlotList?.count, state?.page, state.pageSize]);\n\n    return (<>\n        <div className=\"d-flex flex-wrap justify-content-between mb-2\">\n            <div className='d-flex gap-10 my-1'>\n                <div className=\"accordion-button collapsed\"\n                    data-bs-toggle=\"collapse\"\n                    data-bs-target={`#rounding-sheet-filters`}\n                    aria-expanded=\"false\"\n                    aria-controls={`rounding-sheet-filters`}\n                >\n                    <Button variant='primary'>Filters</Button>\n                </div>\n                <Button variant='secondary' onClick={onExportDataHandler} disabled={state.loadingExport}>\n                    {state.loadingExport ? 'Exporting...' : 'Export'}\n                </Button>\n            </div>\n            {!isHistory &&\n                <div className='d-flex gap-10 my-1'>\n                    {!!state.selectionModel.length && <>\n                        <Button variant='primary' onClick={allMarkasVisited}>Mark as Done</Button>\n                        <Button variant='primary' onClick={toggleTransferModel}>Transfer</Button>\n                    </>}\n                    <Button variant='primary' onClick={() => updateState(setState, { addNewPatient: true })}>Add Patient</Button>\n                </div>}\n        </div>\n        <div id={`rounding-sheet-filters`} className={`accordion-collapse collapse ${!isMobile ? \"show\" : \"\"}`}>\n            <div className=\"accordion-body mb-2\">\n                <div className=\"date-task-filter d-flex flex-wrap align-items-center gap-5\">\n                    <div className=\"d-flex px-0 align-items-center\" title=\"Visit date\">\n                        <nobr htmlFor=\"visitDate-filter\" className='fs-14 mb-0 mr-1'>{isHistory ? 'Discharge Date:' : 'Visit Date:'}</nobr>\n                        <ReactDatePicker\n                            id=\"visitDate-filter\"\n                            name=\"visitDate\"\n                            placeholderText=\"Visit Date\"\n                            className=\"form-control search\"\n                            selected={state.filters?.visitDate ? moment(state.filters?.visitDate).toDate() : null}\n                            value={state.filters?.visitDate ? moment(state.filters?.visitDate).toDate() : null}\n                            onChange={(date) => setState(prev => ({ ...prev, filters: { ...prev.filters, visitDate: date } }))}\n                            dateFormat=\"MM/dd/yyyy\"\n                        />\n                    </div>\n                    <div className=\"form-inline\">\n                        <div className=\"input-group theme-border\">\n                            <input type=\"text\" className=\"form-control search\"\n                                placeholder=\"Search patient\"\n                                title=\"Search User/Group\"\n                                value={state.search || ''}\n                                onChange={(e) => setState((prev) => ({ ...prev, search: e.target.value }))} />\n                        </div>\n                    </div>\n                    <div className=\"form-inline\">\n                        <div className=\"input-group theme-border\">\n                            <input type=\"text\" className=\"form-control search\"\n                                placeholder=\"Room no.\"\n                                title=\"Search by room\"\n                                value={state.roomNumber || ''}\n                                onChange={(e) => setState((prev) => ({ ...prev, roomNumber: e.target.value }))} />\n                        </div>\n                    </div>\n                    <div className=\"form-inline\">\n                        <ReactSelect\n                            value={[state.filters.facility]}\n                            isLoading={state.loadingOptions}\n                            classNamePrefix=\"select\"\n                            placeholder=\"Select facility\"\n                            className={\"min-width-160\"}\n                            name={\"facility\"}\n                            options={state.facilityOptions && !!state.facilityOptions.length ? state.facilityOptions : []}\n                            onChange={(item) => setState(prev => ({\n                                ...prev,\n                                filters: { ...prev.filters, facility: item, attendee: item ? prev.filters.attendee : null }\n                            }))}\n                            menuPlacement='bottom'\n                            isClearable={true}\n                        />\n                    </div>\n                    {(state.filters.facility || state.filters.attendee) &&\n                        <div className=\"form-inline\">\n                            <ReactSelect\n                                name={\"attendee\"}\n                                isLoading={state.loadingOptions}\n                                menuPlacement='bottom'\n                                value={[state.filters.attendee]}\n                                classNamePrefix=\"select\"\n                                placeholder=\"Attendee Provider\"\n                                options={attendingOptions && !!attendingOptions.length ? attendingOptions : []}\n                                onChange={(item) => setState(prev => ({ ...prev, filters: { ...prev.filters, attendee: item } }))}\n                                isClearable={true}\n                                className={\"min-width-160\"} />\n                        </div>}\n                    <div className=\"form-inline\">\n                        <ReactSelect\n                            name={\"hcmd_md\"}\n                            isLoading={state.loadingOptions}\n                            menuPlacement='bottom'\n                            value={[state.filters.MD]}\n                            classNamePrefix=\"select\"\n                            placeholder=\"HCMD MD\"\n                            options={providerOptions && !!providerOptions.length ? providerOptions : []}\n                            onChange={(item) => setState(prev => ({ ...prev, filters: { ...prev.filters, MD: item } }))}\n                            isClearable={true}\n                            className={\"min-width-160\"} />\n                    </div>\n                    <div className=\"form-inline\">\n                        <ReactSelect\n                            name={\"hcmd_np\"}\n                            isLoading={state.loadingOptions}\n                            menuPlacement='bottom'\n                            value={[state.filters.NP]}\n                            classNamePrefix=\"select\"\n                            placeholder=\"HCMD NP\"\n                            options={nurseOptions && !!nurseOptions.length ? nurseOptions : []}\n                            onChange={(item) => setState(prev => ({ ...prev, filters: { ...prev.filters, NP: item } }))}\n                            isClearable={true}\n                            className={\"min-width-160\"} />\n                    </div>\n                </div>\n            </div>\n        </div>\n        {Boolean(startIndex && endIndex && patientSlotList?.count) &&\n            <p className='d-flex justify-content-end'>{`${startIndex}-${endIndex} Rows of ${patientSlotList?.count} Records`}</p>}\n        <div className={`cstm-mui-datagrid stripe-table ${!patientSlotList?.rows?.length || state.loading ? 'loading' : 'not_loading react-select-datagrid'}`} style={{ maxHeight: '88vh', width: '100%', flexGrow: 1 }}>\n            {schedulePatients}\n        </div>\n        <CreateEditAttachment\n            type={state.pictureData ? \"image\" : \"audio\"}\n            fieldName={state.dictation ? 'Dictation' : 'Picture Data'}\n            showModal={state.pictureData}\n            onSubmit={onSubmitPicturedata}\n            onCancel={closeModals}\n            patientId={state.selectedPatientId}\n        />\n        <CreateEditDictation\n            type={\"audio\"}\n            fieldName={'Dictation'}\n            showModal={Boolean(state.dictation)}\n            visitDate={state.filters.visitDate}\n            onSubmit={onSubmitPicturedata}\n            onCancel={closeModals}\n            patientId={state.selectedPatientId}\n        />\n        <CreateEditTodo\n            fieldName='Todo'\n            showModal={Boolean(state.todoModel)}\n            onSubmit={onSubmitHandlerTodo}\n            onCancel={closeModals}\n            patientId={state.selectedPatientId}\n            rowData={state.row}\n        />\n        <CreateEditNotes\n            fieldName='Note'\n            showModal={Boolean(state.noteModel)}\n            onSubmit={onSubmitNotes}\n            onCancel={closeModals}\n            patientId={state.selectedPatientId}\n            rowData={state.row}\n        />\n        {(state.addNewPatient || state.update) &&\n            <AddNewPatient onSubmit={refetch} updateData={state.update} onCancel={closeModals} />}\n        <TransferPatient state={state} toggleTransferModel={toggleTransferModel} data={patientSlotList?.rows || []} providers={state.providerOptions} />\n        <DeletePatient state={state} toggleDeleteModel={closeModals} />\n    </>)\n}\n\nconst ColorCodeLabel = ({ item }) => (\n    <div className='d-flex gap-10 align-items-center'>\n        {item.colorCode &&\n            <div className='color-dot' style={{ background: item.colorCode, height: \"12px\", width: \"12px\" }} />}\n        {item.code}\n    </div>)\n\nconst getPatientName = (name1, name2, name3) =>\n    [name1, name2, name3].filter(i => i).join(\", \")"],"names":["getNotesForm","wrapper","label","field","error","PatientNotes","_ref","card","patientId","rowData","index","setMainState","className","data","state","setState","useState","create","update","onCancelHandler","useCallback","prev","onSubmitHandler","async","body","mode","id","toastPromise","func","resolve","reject","patientService","noteCreate","payload","status","_prev$patientData","patientData","patientNotes","console","loading","success","options","noteUpdate","_prev$patientData2","map","item","onDelete","TakeConfirmation","title","onDone","noteDelete","_prev$patientData3","filter","columns","useMemo","headerName","type","minWidth","getActions","params","_jsx","MuiEditAction","onClick","row","MuiDeleteAction","flex","renderCell","_Fragment","children","moment","format","note","NotesData","sortObjectsByField","_jsxs","Card","concat","classes","firstName","lastName","length","style","maxHeight","width","flexGlow","DataGridPro","rows","autoHeight","density","disableColumnFilter","getRowHeight","onRowClick","_ref2","components","LoadingOverlay","LinearProgress","Footer","Button","variant","size","e","CreateEditNotes","fieldName","showModal","Boolean","onSubmit","onCancel","updateData","_ref3","taskJSONForm","name","value","toDate","hasOwnProperty","ModalReactstrap","header","toggle","show","FormGenerator","formClassName","dataFields","getRelativeForm","PatientGuradianService","PlaceholderApiProvider","config","headers","encrypted","configuration","CONST","API_TIMEOUT","L2","preparePayload","this","api","post","delete","PatientRelatives","page","total","pageSize","rowCountState","filters","search","designation","onSubmitSuccess","patientGuardians","patientGuradianService","CreateEditRelative","directSubmit","Date","now","ImageVideoModal","startImgID","showResourceCount","onCloseImageHandler","ImageVideoData","includes","mediaType","split","shift","url","mediaUrl","altTag","startIndex","findIndex","tabIndex","role","ReactImageVideoLightbox","onCloseCallback","PictureDataImage","onEdit","onUpdate","imagesData","imageId","useSelector","chat","dispatch","CHAT_CONST","IMAGE_INDEX","Col","md","Img","src","getImageURL","height","cursor","changeModel","CHAT_MODELS","PDF_VIEWER","SET_PDF_URL","fileName","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","Body","Text","MuiTooltip","IconButton","color","EditIcon","DeleteIcon","createdAt","defaultState","imageFiles","isUploading","pdfName","pdfCaption","pdfUploadLoad","uploadLoad","setProfilePic","CreateEditAttachment","_state$imageFiles","_state$imageFiles2","_state$imageFiles3","pictureBtn","useRef","useEffect","setTimeout","_pictureBtn$current","current","click","funcupload","i","isImagePDF","arguments","undefined","file","presignedUrl","onUploadImage","uploadToS3","parseInt","progress","mergeImagestoPdf","pdf","jsPDF","pageWidth","internal","getWidth","forEach","imageURL","URL","createObjectURL","addImage","paddingX","addPage","deletePage","pdfData","output","myBlob","Blob","myFile","File","caption","OnSave","resp","profilePicture","onDropFilesHandler","filesList","Array","from","ind","fileData","push","clearFiles","Row","Dropzone","onDrop","getRootProps","getInputProps","accept","ref","MultipleImage","FileTarget","OnClose","checked","onChange","target","htmlFor","placeholder","autoComplete","maxLength","required","footer","disabled","PictureData","setPatientProfile","text","attachmentCreate","patientAttachments","attachmentUpdate","attachmentDelete","ExclamationCircle","priorityOptions","MSG_TYPE","ROUTINE","URGENT","EMERGENCY","getTodoForm","base","TodoList","taskCreate","patientTasks","taskUpdate","taskDelete","_ref4","_row$patientAssignee","_row$patientAssignee2","patientAssignee","cellClassName","_ref5","dueDate","align","headerAlign","_ref6","stopPropagation","MuiLoadingActionButton","tooltip","Icon","TASK_STATUS","CheckCircle","TaskAlt","TodoData","_ref7","CreateEditTodo","_ref8","pri","find","priority","_body$assigneeId$","_body$priority$","assigneeId","patientName","uploading","comment","CreateEditDictation","continueDictation","visitDate","toLocaleString","RecordDictation","date","inputChange","onSubmitAudio","fileType","uploadedAudioUrl","navigator","onLine","dictationDate","Input","Label","handleChange","formgroupClass","isRequired","ReactDatePicker","placeholderText","selected","isClearable","AudioFooter","setRecorder","parentFile","ActiveAudio","activeAudio","onClose","onContinueDictation","onDeleteAttachment","audioList","AudioItem","audio","autoPlay","Modalprops","bodyProps","overflow","window","innerWidth","Timeline","items","Divider","borderColor","orientation","controls","preload","getAudioUrl","Dictation","mainState","getDetailedData","parentDictation","DictationData","dictations","showAll","updateFiles","attachmentId","onViewAllDictation","onResetDictation","DetailPanelContent","updatedDetailData","generatePayload","dateFrom","dateTo","rest","populate","findOne","list","_state$patientData","_state$patientData$pa","_state$patientData2","_state$patientData2$p","_state$patientData3","_state$patientData4","Order","Component","_item$mediaType","_item$mediaType2","_item$mediaType3","LoaderSvg","ErrorBoundary","React","DischargeReasonService","NewPatientScheduler","isDischarge","scheduleInfo","setStartDate","start","dateError","dischargeDate","isBefore","setDischargeTime","dischargeReasons","useQuery","queryKey","queryFn","dischargeReasonService","keepPreviousData","refetchOnWindowFocus","staleTime","QUERY_STALE_TIME","enabled","showTimeSelect","popperPlacement","dateFormat","wrapperClassName","calendarClassName","timeIntervals","timeCaption","autoFocus","minDate","maxDate","CreatableSelect","dischargeReason","_dischargeReasons$fin","reasonId","__isNew__","reasonType","isNew","menuPlacement","classNamePrefix","reason","AttendeeProvider","_state$facility2","_state$facility2$valu","_state$facility$autoS","_state$facility3","_state$facility$autoS2","_state$facility6","_state$facility7","_state$facility8","_state$facility8$valu","ProviderOptions","setProviderOptions","roomOptions","setRoomOptions","isLoading","setIsLoading","_state$facility","_state$facility$value","facilityId","facilityRooms","patientSlots","facilityData","facilityService","providerData","userService","roomNumber","facilityRoomAssign","facility","facilityOptions","providers","facilityAssigns","j","ReactSelect","_item$value","_prev$provider","_prev$provider$value","_prev$provider$value$","_item$value2","_item$value3","provider","facilityAssign","HCMDProvider","isDefault","desiInfo","providerInfo","HCMDProviderOptions","autoSet","isDisabled","_state$facility4","_state$facility4$valu","_state$facility4$valu2","_state$facility5","_state$facility5$valu","_state$facility5$valu2","info","owner","showError","location","ConsultancyProvider","consultancyProvider","speciality","faxNumber","phone","MuiActionButton","TelephoneFill","flexGrow","disableVirtualization","AddConsultancyProvider","setProvider","setLoading","setOptions","getDesignationByKey","DESIGNATION_KEY","PROVIDER","providerOptions","optionsArr","assignIds","cacheOptions","defaultOptions","NextofKin","nextOfKin","kinState","kinSetState","relation","contactNumber","typeOfNumber","_row$designation","position","abbreviateDesg","key","AddHCMDProvider","desg","_mainState$facility2","setSelected","_mainState$facility","providersOptions","selectOptions","providerId","userId","_i$value$designation","Switch","background","unCheckedChildren","checkedChildren","val","PatientForm","isPatientloading","selectRef","focus","_val","_val2","_val3","_val3$patientSlots","charAt","toUpperCase","slice","patientSlot","_value$value","_val4","patientAssigns","facilityInfo","usersPatient","isNewPatient","Object","keys","middleName","content","handleKeyDown","event","selectElement","select","focusedOption","autoCapitalizeField","loadPatientSuggestions","debounce","query","callback","getPatients","then","res","PureName","xs","AsyncCreatableSelect","loadOptions","onKeyDown","inputProps","onBlurCapture","PhoneInput2","inputClass","country","insurance","SSN","DOB","city","zip","gender","GENDER_TYPE","maritalStatus","MARITAL_TYPE","medicalRecordNumber","admitDate","PatientslotService","dischargeUpdate","transferPatient","PatientPaymentService","secondarypaymentcodeUpdate","patientslotService","patientpaymentService","patientError","duration","appointmentType","APPOINTMENT_TYPE","PATIENT","getUpdateState","_patientAssigns$find","_patientSlot$patientD","_patientSlot$patientD2","_patientSlot$patientD3","_patientSlot$patientD4","facilitySlotInfo","PROVIDER_TYPE","HCMD_PROVIDER","_i$usersPatient$facil","_i$facility","CONSULTANCY_PROVIDER","attendee","ATTENDEE","patientDischarge","AddNewPatient","_updateData$patientSl","patientDataRef","attendeeRef","slot","discharge","_state$scheduleInfo","_state$scheduleInfo$r","_state$scheduleInfo2","_state$scheduleInfo2$","_state$provider","_state$provider$value","_state$provider2","_state$provider3","_state$provider4","_state$nextOfKin","_state$HCMDProvider","_state$consultancyPro","_patientDataRef$curre","_attendeeRef$current","scrollIntoView","behavior","patientInfo","isNewRoom","isPatientExist","_item$designation","designationId","isUpdate","createPatientSchedule","dangerouslySetInnerHTML","__html","message","showSuccess","_attendeeRef$current2","okText","cancelText","Badge","pill","bg","getTransferForm","TransferPatient","toggleTransferModel","transferData","setTransferState","selectedRows","UserFormData","formJSON","_patient$patientSlots","selectionModel","patient","providerOpt","transferModel","FormButtons","resetOnSubmit","_data$provider","_data$provider2","transferType","patientSlotId","onTransferPatient","cbDelete","DeletePatient","_state$filters","toggleDeleteModel","discharging","setDischarging","refetch","deleteModel","form","getDeleteForm","onSubmitDelete","_patientData$patientS","_patientData$patientS2","slotId","PatientIsVisited","_row$patientSlots$","updatePatientVisited","isPatientVisited","setPatientVisited","isVisited","_row$patientSlots$2","changePatientVisited","updateVal","indexValue","paymentCode","paymentOptions","isMulti","apiRef","isUpdating","setIsUpdating","onUpdateCodes","addedCode","removedCode","oldArr","newArr","onDoneChange","onBillingCodeClick","getExpandedDetailPanels","toggleDetailPanel","maxMenuHeight","defaultSort","sort","getDefaultState","isProvider","providervalue","_localData$rounding","_localData$rounding2","_localData$rounding3","_localData$rounding4","localData","getLocalStore","isHistory","rounding","currSearch","getDateXDaysAgoStartOf","sortModel","primaryPaymentOptions","secondaryPaymentOptions","loadingExport","loadingPaymentOptions","nurseOptions","attendingOptions","loadingOptions","dictation","todoModel","pictureData","selectedPatientId","addNewPatient","noteModel","orderRooms","inputValue","POPULATE_PATIENT","columnFields","SchedulePatient","_state$filters14","_state$filters15","_state$filters16","_state$filters17","_state$filters18","_patientSlotList$rows","useLocation","useGridApiRef","user","userDesignations","updateTable","model","newSearch","useDebounce","roomNumberFilter","colOrderState","setOrderState","getAdminAccess","_facilityData$data","paymentCodeService","ColorCodeLabel","providerDesignation","NursePracDesignation","NURSE_PRACTITIONER","getHCMDProviders","nurses","attendeeData","getData","_state$filters2","_state$filters2$MD","_state$filters3","_state$filters3$NP","_state$sortModel","_state$filters4","_state$filters4$facil","_state$filters4$facil2","_state$filters5","_state$filters5$facil","_state$filters5$facil2","_state$facilityOption","_state$filters6","_state$filters7","_state$filters7$atten","_state$filters8","_state$filters9","_state$filters9$MD","_state$filters10","_state$filters11","_state$filters11$NP","_payload$options$sort","exportExcel","mdDesg","npDesg","MD","NP","limit","pagination","attendeeId","isCount","unshift","_state$filters12","_state$filters13","localStore","setLocalStore","_i$patientSlots$","_i$patientSlots$2","lastUpdated","patientSlotList","isFetching","updatePaymentCode","isPrimary","prop","closeModals","refresh","setSelectionModel","_i$patientSlots$3","onSubmitPicturedata","onSubmitHandlerTodo","updateState","onSubmitNotes","onDeleteSlot","orderer","isToday","colOrder","JSON","parse","localStorage","getItem","order","setItem","stringify","commonColumns","hide","_patientSlots$","_patientSlots$$facili","username","getPatientName","image","alt","_row$facilityInfo","_row$facilityInfo$inf","MODEL_CONST","USER_IMAGE_DATA","updateType","updateField","sortable","isMobile","ListTask","fontSize","StickyFill","Image","MicFill","PersonDashFill","maxWidth","profile","_row$patientSlots$2$f","_ref9","_row$patientSlots$3","_row$patientSlots$3$p","_ref10","_row$patientSlots$4","_row$patientSlots$4$p","_ref11","_ref12","_row$patientAssigns","_row$patientAssigns$f","_row$patientAssigns$f2","getRowIndex","payCode","patientPaymentCode","colorCode","code","SecondaryBillingCode","_row$patientSlots$0$s","secondaryPaymentCodes","_i$paymentCodeInfo","_i$paymentCodeInfo2","_i$paymentCodeInfo3","_i$paymentCodeInfo4","paymentCodeInfo","_ref13","a","b","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_DETAIL_PANEL_TOGGLE_COL_DEF","sortCharByField","onExportDataHandler","responseType","blob","downloadFilebyBlob","allMarkasVisited","slotIds","_slot$patientSlots$","onColumnOrderChange","targetIndex","oldIndex","updatedColumnOrderObject","reorderColumnOrderObject","schedulePatients","getDetailPanelHeight","getDetailPanelContent","checkboxSelection","onSortModelChange","disableRowSelectionOnClick","onSelectionModelChange","keepNonExistentRowsSelected","MuiDataGridFooter","count","onPageChange","getRowClassName","_ref14","virtualScroller","endIndex","Math","min","_ref15","name1","name2","name3","join"],"sourceRoot":""}