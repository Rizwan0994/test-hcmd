{"version":3,"file":"static/js/711.22ad1057.chunk.js","mappings":"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","sources":["Routes/FormBuilder/FormTemplate/Builder/custom-components/Sidebar.jsx","Routes/FormBuilder/FormTemplate/Builder/InputDialogue/GenerateField.jsx","Routes/FormBuilder/FormTemplate/Builder/InputDialogue/editForm/Component.edit.data.js","Routes/FormBuilder/FormTemplate/Builder/InputDialogue/tabs.js","Routes/FormBuilder/FormTemplate/Builder/InputDialogue/editForm/Component.edit.display.js","Routes/FormBuilder/FormTemplate/Builder/InputDialogue/editForm/Component.edit.validation.js","Routes/FormBuilder/FormTemplate/Builder/InputDialogue/editForm/Component.edit.conditional.js","Routes/FormBuilder/FormTemplate/Builder/InputDialogue/DialogueBody.jsx","Routes/FormBuilder/FormTemplate/Builder/InputDialogue/index.jsx","Routes/FormBuilder/FormTemplate/Builder/FormBuilder.jsx"],"sourcesContent":["import React, { useCallback } from 'react';\n// import { Accordion, Col } from 'react-bootstrap';\n\n// Tools Icons\nimport ContentCutIcon from '@mui/icons-material/ContentCut';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport ContentPasteIcon from '@mui/icons-material/ContentPaste';\nimport CancelIcon from '@mui/icons-material/Cancel';\n\n// Input field Icons\nimport TextFieldsIcon from '@mui/icons-material/TextFields';\nimport DrawIcon from '@mui/icons-material/Draw';\nimport SmartButton from '@mui/icons-material/SmartButton';\nimport Image from '@mui/icons-material/Image';\nimport { MuiTooltip } from 'Components/components';\nimport { Calendar, InputCursorText, MenuDown, TextareaT, UiChecks, UiRadios } from 'react-bootstrap-icons';\n\nconst inputFields = [\n    {\n        group: \"Tools\",\n        fields: [\n            {\n                id: \"cutfield\",\n                name: \"CutNode\",\n                label: \"Cut\",\n                action: \"cut\",\n                icon: <ContentCutIcon />\n            },\n            {\n                id: \"copyfield\",\n                name: \"CopyNode\",\n                label: \"Copy\",\n                action: \"copy\",\n                icon: <ContentCopyIcon />\n            },\n            {\n                id: \"pastefield\",\n                name: \"PasteNode\",\n                label: \"Paste\",\n                action: \"paste\",\n                icon: <ContentPasteIcon />\n            },\n            {\n                id: \"cancelfield\",\n                name: \"CancelNode\",\n                label: \"Cancel\",\n                action: \"cancel\",\n                icon: <CancelIcon />\n            },\n        ]\n    },\n    {\n        group: \"Basic\",\n        fields: [\n            {\n                id: \"labelfield\",\n                name: \"LabelNode\",\n                label: \"Text Label\",\n                icon: <TextFieldsIcon />\n            },\n            {\n                id: \"textfield\",\n                name: \"TextFieldNode\",\n                label: \"Input Text\",\n                icon: <InputCursorText fontSize={22} fontWeight=\"bold\" />\n            },\n            {\n                id: \"textarea\",\n                name: \"TextAreaNode\",\n                label: \"Textarea\",\n                icon: <TextareaT fontSize={22} fontWeight=\"bold\" />\n            },\n            // {\n            //     id: \"number\",\n            //     name: \"NumberNode\",\n            //     label: \"Number\",\n            //     icon: <></>\n            // },\n            // {\n            //     id: \"password\",\n            //     name: \"PasswordNode\",\n            //     label: \"Password\",\n            //     icon: <></>\n            // },\n            {\n                id: \"checkbox\",\n                name: \"CheckBoxNode\",\n                label: \"Checkbox\",\n                icon: <UiChecks fontSize={22} fontWeight=\"bold\" />\n            },\n            {\n                id: \"select\",\n                name: \"SelectNode\",\n                label: \"Select\",\n                icon: <MenuDown fontSize={22} fontWeight=\"bold\" />\n            },\n            {\n                id: \"radio\",\n                name: \"RadioNode\",\n                label: \"Radio\",\n                icon: <UiRadios fontSize={22} fontWeight=\"bold\" />\n            },\n            {\n                id: \"image\",\n                name: \"ImageNode\",\n                label: \"Image\",\n                icon: <Image />\n            },\n            {\n                id: \"button\",\n                name: \"ButtonNode\",\n                label: \"Button\",\n                icon: <SmartButton />\n            },\n        ]\n    },\n    {\n        group: \"Advance\",\n        fields: [\n            // {\n            //     id: \"emailField\",\n            //     name: \"EmailNode\",\n            //     label: \"Email\",\n            //     icon: <></>\n            // },\n            // {\n            //     id: \"urlField\",\n            //     name: \"UrlNode\",\n            //     label: \"URL\",\n            //     icon: <></>\n            // },\n            // {\n            //     id: \"phoneField\",\n            //     name: \"PhoneNumberNode\",\n            //     label: \"Phone Number\",\n            //     icon: <></>\n            // },\n            {\n                id: \"dateTimeField\",\n                name: \"DateTimeNode\",\n                label: \"Date / Time\",\n                icon: <Calendar fontSize={22} fontWeight=\"bold\" />\n            },\n            // {\n            //     id: \"timeField\",\n            //     name: \"TimeNode\",\n            //     label: \"Time\",\n            //     icon: <></>\n            // },\n            // {\n            //     id: \"currencyField\",\n            //     name: \"CurrencyNode\",\n            //     label: \"Currency\",\n            //     icon: <></>\n            // },\n            {\n                id: \"signatureField\",\n                name: \"SignatureNode\",\n                label: \"Signature\",\n                icon: <DrawIcon />\n            },\n        ]\n    },\n];\n\nexport default function Sidebar({\n    onCopyNode,\n    onPasteNode,\n    onCutNode,\n    onCancelNode\n}) {\n    const onDragStart = useCallback((event, nodeType) => {\n        event.dataTransfer.setData('application/reactflow', nodeType);\n        event.dataTransfer.effectAllowed = 'move';\n    }, []);\n\n    const onClickTool = useCallback((field) => {\n        if (field.action === \"copy\") onCopyNode(field);\n        else if (field.action === \"cut\") onCutNode(field);\n        else if (field.action === \"paste\") onPasteNode(field);\n        else onCancelNode(field);\n\n    }, [onCopyNode, onPasteNode, onCutNode, onCancelNode]);\n\n    return (\n        <div className=\"btn-toolbar mb-2\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n            {inputFields.map((group, index1) => {\n                return (\n                    <div className=\"btn-group mr-2 mb-2\" role=\"group\" aria-label=\"First group\" key={index1}>\n                        {group.fields.map((inputfield, index2) => (\n                            <MuiTooltip title={inputfield.label} key={index2}>\n                                <button\n                                    className=\"btn btn-secondary formcomponent drag-copy\"\n                                    onDragStart={(event) => onDragStart(event, inputfield.name)}\n                                    draggable={group.group !== \"Tools\"}\n                                    onClick={() => {\n                                        if (group.group === \"Tools\") onClickTool(inputfield)\n                                    }}\n                                    key={index2}\n                                >\n                                    {inputfield?.icon}\n                                </button>\n                            </MuiTooltip>\n                        )\n                        )}\n                    </div>\n                )\n            })\n            }\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function GenerateField({ component }) {\n    return (\n        <div>GenerateField</div>\n    )\n}","/* eslint-disable max-len */\nconst data = [\n  // {\n  //   weight: 0,\n  //   type: 'checkbox',\n  //   label: 'Multiple Values',\n  //   tooltip: 'Allows multiple values to be entered for this field.',\n  //   key: 'multiple',\n  //   input: true\n  // },\n  {\n    type: 'textfield',\n    label: 'Default Value',\n    key: 'defaultValue',\n    weight: 5,\n    placeholder: 'Default Value',\n    tooltip: 'The Default Value will be the value for this field, before user interaction. Having a default value will override the placeholder text.',\n    input: true\n  },\n  {\n    weight: 150,\n    type: 'checkbox',\n    label: 'Protected',\n    tooltip: 'A protected field will not be returned when queried via API.',\n    key: 'protected',\n    input: true\n  },\n  {\n    type: 'select',\n    input: true,\n    key: 'redrawOn',\n    label: 'Redraw On',\n    weight: 600,\n    tooltip: 'Redraw this component if another component changes. This is useful if interpolating parts of the component like the label.',\n    dataSrc: 'custom',\n    valueProperty: 'value',\n    data: {\n      custom(context) {\n        var values = [];\n        values.push({ label: 'Any Change', value: 'data' });\n        context.utils.eachComponent(context.instance.options.editForm.components, function (component, path) {\n          if (component.key !== context.data.key) {\n            values.push({\n              label: component.label || component.key,\n              value: path\n            });\n          }\n        });\n        return values;\n      }\n    },\n    conditional: {\n      json: { '!': [{ var: 'data.dataSrc' }] },\n    },\n  },\n  {\n    weight: 700,\n    type: 'checkbox',\n    label: 'Clear Value When Hidden',\n    key: 'clearOnHide',\n    defaultValue: true,\n    tooltip: 'When a field is hidden, clear the value.',\n    input: true\n  },\n  // EditFormUtils.javaScriptValue('Custom Default Value', 'customDefaultValue', 'customDefaultValue', 1000,\n  //   '<p><h4>Example:</h4><pre>value = data.firstName + \" \" + data.lastName;</pre></p>',\n  //   '<p><h4>Example:</h4><pre>{\"cat\": [{\"var\": \"data.firstName\"}, \" \", {\"var\": \"data.lastName\"}]}</pre>'\n  // ),\n  // EditFormUtils.javaScriptValue('Calculated Value', 'calculateValue', 'calculateValue', 1100,\n  //   '<p><h4>Example:</h4><pre>value = data.a + data.b + data.c;</pre></p>',\n  //   '<p><h4>Example:</h4><pre>{\"+\": [{\"var\": \"data.a\"}, {\"var\": \"data.b\"}, {\"var\": \"data.c\"}]}</pre><p><a href=\"http://formio.github.io/formio.js/app/examples/calculated.html\" target=\"_blank\" rel=\"noopener noreferrer\">Click here for an example</a></p>',\n  //   '<tr><th>token</th><td>The decoded JWT token for the authenticated user.</td></tr>'\n  // ),\n  // {\n  //   type: 'checkbox',\n  //   input: true,\n  //   weight: 1100,\n  //   key: 'calculateServer',\n  //   label: 'Calculate Value on server',\n  //   tooltip: 'Checking this will run the calculation on the server. This is useful if you wish to override the values submitted with the calculations performed on the server.'\n  // },\n  {\n    type: 'checkbox',\n    input: true,\n    weight: 1200,\n    key: 'allowCalculateOverride',\n    label: 'Allow Manual Override of Calculated Value',\n    tooltip: 'When checked, this will allow the user to manually override the calculated value.'\n  },\n]\nexport default data;\n/* eslint-enable max-len */\n","import ComponentEditData from \"./editForm/Component.edit.data\";\nimport ComponentEditDisplay from \"./editForm/Component.edit.display\";\nimport ComponentEditValidation from \"./editForm/Component.edit.validation\";\nimport ComponentEditConditional from \"./editForm/Component.edit.conditional\";\n\nconst inputDialogueTabs = {\n    type: 'tabs',\n    key: 'tabs',\n    components: [\n        {\n            label: 'Display',\n            key: 'display',\n            weight: 0,\n            components: ComponentEditDisplay\n        },\n        {\n            label: 'Data',\n            key: 'data',\n            weight: 10,\n            components: ComponentEditData\n        },\n        {\n            label: 'Validation',\n            key: 'validation',\n            weight: 20,\n            components: ComponentEditValidation\n        },\n        {\n            label: 'Conditional',\n            key: 'conditional',\n            weight: 40,\n            components: ComponentEditConditional\n        },\n        // {\n        //     label: 'Logic',\n        //     key: 'logic',\n        //     weight: 50,\n        //     components: ComponentEditLogic\n        // },\n        // {\n        //     label: 'Layout',\n        //     key: 'layout',\n        //     weight: 60,\n        //     components: ComponentEditLayout\n        // },\n    ]\n}\nexport default inputDialogueTabs;","/* eslint-disable max-len */\nconst display = [\n  {\n    weight: 100,\n    type: 'textfield',\n    input: true,\n    key: 'placeholder',\n    label: 'Placeholder',\n    placeholder: 'Placeholder',\n    tooltip: 'The placeholder text that will appear when this field is empty.'\n  },\n  {\n    weight: 200,\n    type: 'textarea',\n    input: true,\n    key: 'description',\n    label: 'Description',\n    placeholder: 'Description for this field.',\n    tooltip: 'The description is text that will appear below the input field.',\n  },\n  {\n    weight: 300,\n    type: 'checkbox',\n    label: 'Disabled',\n    tooltip: 'Disable the form input.',\n    key: 'disabled',\n    input: true\n  },\n]\nexport default display;\n/* eslint-enable max-len */\n","/* eslint-disable quotes, max-len */\nconst validation = [\n  {\n    weight: 10,\n    type: 'checkbox',\n    label: 'Required',\n    tooltip: 'A required field must be filled in before the form can be submitted.',\n    key: 'validate.required',\n    input: true\n  },\n  // {\n  //   weight: 100,\n  //   type: 'checkbox',\n  //   label: 'Unique',\n  //   tooltip: 'Makes sure the data submitted for this field is unique, and has not been submitted before.',\n  //   key: 'unique',\n  //   input: true\n  // },\n  // {\n  //   weight: 0,\n  //   type: 'select',\n  //   key: 'validateOn',\n  //   defaultValue: 'change',\n  //   input: true,\n  //   label: 'Validate On',\n  //   tooltip: 'Determines when this component should trigger front-end validation.',\n  //   dataSrc: 'values',\n  //   data: {\n  //     values: [\n  //       { label: 'Change', value: 'change' },\n  //       { label: 'Blur', value: 'blur' }\n  //     ]\n  //   }\n  // },\n  // {\n  //   weight: 190,\n  //   type: 'textfield',\n  //   input: true,\n  //   key: 'errorLabel',\n  //   label: 'Error Label',\n  //   placeholder: 'Error Label',\n  //   tooltip: 'The label for this field when an error occurs.'\n  // },\n  {\n    weight: 200,\n    key: 'validate.customMessage',\n    label: 'Custom Error Message',\n    placeholder: 'Custom Error Message',\n    type: 'textfield',\n    tooltip: 'Error message displayed if any error occurred.',\n    input: true\n  },\n  {\n    type: 'panel',\n    title: 'Custom Validation',\n    collapsible: true,\n    collapsed: true,\n    style: { 'margin-bottom': '10px' },\n    key: 'custom-validation-js',\n    weight: 300,\n    // customConditional() {\n    //   return !Evaluator.noeval || Evaluator.protectedEval;\n    // },\n    components: [\n      // EditFormUtils.logicVariablesTable('<tr><th>input</th><td>The value that was input into this component</td></tr>'),\n      {\n        type: 'textarea',\n        key: 'validate.custom',\n        rows: 5,\n        editor: 'ace',\n        hideLabel: true,\n        as: 'javascript',\n        input: true\n      },\n      {\n        type: 'htmlelement',\n        tag: 'div',\n        content: `\n          <small>\n            <p>Enter custom validation code.</p>\n            <p>You must assign the <strong>valid</strong> variable as either <strong>true</strong> or an error message if validation fails.</p>\n            <h5>Example:</h5>\n            <pre>valid = (input === 'Joe') ? true : 'Your name must be \"Joe\"';</pre>\n          </small>`\n      },\n      {\n        type: 'well',\n        components: [\n          {\n            weight: 100,\n            type: 'checkbox',\n            label: 'Secret Validation',\n            tooltip: 'Check this if you wish to perform the validation ONLY on the server side. This keeps your validation logic private and secret.',\n            description: 'Check this if you wish to perform the validation ONLY on the server side. This keeps your validation logic private and secret.',\n            key: 'validate.customPrivate',\n            input: true\n          }\n        ]\n      }\n    ]\n  },\n  {\n    type: 'panel',\n    title: 'JSONLogic Validation',\n    collapsible: true,\n    collapsed: true,\n    key: 'json-validation-json',\n    weight: 400,\n    components: [\n      {\n        type: 'htmlelement',\n        tag: 'div',\n        /* eslint-disable prefer-template */\n        content: '<p>Execute custom logic using <a href=\"http://jsonlogic.com/\" target=\"_blank\" rel=\"noopener noreferrer\">JSONLogic</a>.</p>' +\n          '<h5>Example:</h5>' +\n          '<pre>' + JSON.stringify({\n            \"if\": [\n              { \"===\": [{ \"var\": \"input\" }, \"Bob\"] },\n              true,\n              \"Your name must be 'Bob'!\"\n            ]\n          }, null, 2) + '</pre>'\n        /* eslint-enable prefer-template */\n      },\n      {\n        type: 'textarea',\n        key: 'validate.json',\n        hideLabel: true,\n        rows: 5,\n        editor: 'ace',\n        as: 'json',\n        input: true\n      }\n    ]\n  },\n  {\n    type: 'panel',\n    title: 'Custom Errors',\n    collapsible: true,\n    collapsed: true,\n    key: 'errors',\n    weight: 400,\n    components: [\n      {\n        type: 'textarea',\n        key: 'errors',\n        hideLabel: true,\n        rows: 5,\n        editor: 'ace',\n        as: 'json',\n        input: true\n      },\n      {\n        type: 'htmlelement',\n        tag: 'div',\n        content: `\n          <p>This allows you to set different custom error messages for different errors\n          (in contrast to “Custom Error Message”, which only allows you to set one\n          error message for all errors). E.g.</p>\n\n<pre>{\n  \"required\": \"{<span/>{ field }} is required. Try again.\",\n  \"maxLength\": \"{<span/>{ field }} is too long. Try again.\"\n}</pre>\n\n          <p>You can set the following keys (among others):</p>\n          <ul>\n            <li>r<span/>equired</li>\n            <li>m<span/>in</li>\n            <li>m<span/>ax</li>\n            <li>m<span/>inLength</li>\n            <li>m<span/>axLength</li>\n            <li>m<span/>inWords</li>\n            <li>m<span/>axWords</li>\n            <li>i<span/>nvalid_email</li>\n            <li>i<span/>nvalid_date</li>\n            <li>i<span/>nvalid_day</li>\n            <li>i<span/>nvalid_regex</li>\n            <li>m<span/>ask</li>\n            <li>p<span/>attern</li>\n            <li>c<span/>ustom</li>\n          </ul>\n\n          <p>Depending on the error message some of the following template variables can be used in the script:</p>\n          <ul>\n           <li><code>{<span/>{ f<span/>ield }}</code> is replaced with the label of the field.</li>\n           <li><code>{<span/>{ m<span/>in }}</code></li>\n           <li><code>{<span/>{ m<span/>ax }}</code></li>\n           <li><code>{<span/>{ l<span/>ength }}</code></li>\n           <li><code>{<span/>{ p<span/>attern }}</code></li>\n           <li><code>{<span/>{ m<span/>inDate }}</code></li>\n           <li><code>{<span/>{ m<span/>axDate }}</code></li>\n           <li><code>{<span/>{ m<span/>inYear }}</code></li>\n           <li><code>{<span/>{ m<span/>axYear }}</code></li>\n           <li><code>{<span/>{ r<span/>egex }}</code></li>\n          </ul>\n        `\n      }\n    ]\n  }\n];\nexport default validation;\n/* eslint-enable quotes, max-len */\n","\nconst conditional = [\n  {\n    type: 'panel',\n    title: 'Simple',\n    key: 'simple-conditional',\n    theme: 'default',\n    weight: 105,\n    components: [\n      {\n        type: 'select',\n        input: true,\n        label: 'This component should Display:',\n        key: 'conditional.show',\n        dataSrc: 'values',\n        data: {\n          values: [\n            { label: 'True', value: 'true' },\n            { label: 'False', value: 'false' }\n          ]\n        }\n      },\n      {\n        type: 'select',\n        input: true,\n        label: 'When the form component:',\n        key: 'conditional.when',\n        dataSrc: 'custom',\n        valueProperty: 'value',\n        data: {\n          // custom(context) {\n          //   return getContextComponents(context);\n          // }\n        }\n      },\n      {\n        type: 'textfield',\n        input: true,\n        label: 'Has the value:',\n        key: 'conditional.eq'\n      }\n    ]\n  },\n  // EditFormUtils.javaScriptValue('Advanced Conditions', 'customConditional', 'conditional.json', 110,\n  //   '<p>You must assign the <strong>show</strong> variable a boolean result.</p>' +\n  //   '<p><strong>Note: Advanced Conditional logic will override the results of the Simple Conditional logic.</strong></p>' +\n  //   '<h5>Example</h5><pre>show = !!data.showMe;</pre>',\n  //   '<p><a href=\"http://formio.github.io/formio.js/app/examples/conditions.html\" target=\"_blank\" rel=\"noopener noreferrer\">Click here for an example</a></p>'\n  // )\n]\n/* eslint-disable quotes, max-len */\nexport default conditional;\n/* eslint-enable quotes, max-len */\n","import React, { useMemo, useState } from 'react'\nimport { Button, Card, Col, Row } from 'react-bootstrap'\nimport GenerateField from './GenerateField';\nimport inputDialogueTabs from './tabs'\n\nexport default function DialogueBody({ editField }) {\n    const [activeTab, setActiveTab] = useState(\"display\");\n\n    const fieldJsonEditor = useMemo(() => {\n        return (\n            <Card>\n                <Card.Header className='pb-0 px-0'>\n                    <nav className='task-nav'>\n                        <div className=\"nav nav-tabs px-2\" id=\"nav-tab\" role=\"tablist\">\n                            {inputDialogueTabs.components.map((tab) => (\n                                <button className={`nav-link ${tab.key === activeTab ? 'active' : ''}`} type=\"button\" role=\"tab\" onClick={() => setActiveTab(tab.key)}>\n                                    {tab.label}\n                                </button>\n                            ))}\n                        </div>\n                    </nav>\n                </Card.Header>\n                <Card.Body>\n                    {inputDialogueTabs.components.find(i => i.key === activeTab)?.components.map((comp) => (\n                        <GenerateField component={comp} />\n                    ))}\n                </Card.Body>\n            </Card>\n        )\n    }, [activeTab]);\n\n    const fieldPreviewer = useMemo(() => {\n        return (\n            <div>\n                <Card>\n                    <Card.Header>\n                        <h5 className='mb-0'>Preview</h5>\n                    </Card.Header>\n                    <Card.Body>\n\n                    </Card.Body>\n                </Card>\n                <div className=\"buttons d-flex gap-10 my-2\">\n                    <Button variant='success'>Save</Button>\n                    <Button variant='secondary'>Cancel</Button>\n                    <Button variant='danger'>Remove</Button>\n                </div>\n            </div>)\n    }, []);\n\n    return (\n        <Row>\n            <Col sm={12} md={6}>\n                {fieldJsonEditor}\n            </Col>\n            <Col sm={12} md={6}>\n                {fieldPreviewer}\n            </Col>\n        </Row>\n    )\n}\n","import React, { useMemo } from 'react';\nimport { Modal } from 'react-bootstrap';\nimport DialogueBody from './DialogueBody';\n\nconst getJsonFields = (fields = {}) => ({ modalHeader: \"Input Component\", ...fields });\n\nexport default function InputDialogue({ editingInputField, setInputField }) {\n\n    const JsonInputFields = useMemo(() => {\n        if (editingInputField?.type) return getModalFields(editingInputField);\n        return null;\n    }, [editingInputField]);\n\n    return (\n        <Modal\n            show={editingInputField}\n            onHide={() => setInputField()}\n            dialogClassName=\"width-85vw\"\n            aria-labelledby={editingInputField && `${editingInputField.id}-${editingInputField.type}`}\n        >\n            {editingInputField && <>\n                <Modal.Header closeButton>\n                    <Modal.Title id={`${editingInputField.id}-${editingInputField.type}`}>\n                        {JsonInputFields?.modalHeader}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <DialogueBody editField={editingInputField} />\n                </Modal.Body>\n            </>}\n        </Modal>\n    )\n}\n\nconst getModalFields = ({ type }) => {\n    switch (type) {\n        case \"TextFieldNode\": return getJsonFields({\n            modalHeader: \"Text Field Component\"\n        });\n        default: return getJsonFields();\n    }\n}","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport ReactFlow, {\n    ReactFlowProvider,\n    useNodesState,\n    Controls,\n    Background,\n} from 'reactflow';\nimport Sidebar from './custom-components/Sidebar';\nimport { buildInputNode } from './Services/NodeBuilder';\nimport useDebounce from 'services/hooks/useDebounce';\n\n// Custom Inputs components\nimport TextAreaNode from './custom-components/inputs/TextAreaNode';\nimport TextField from './custom-components/inputs/TextField';\nimport NumberNode from './custom-components/inputs/NumberNode';\nimport LabelNode from './custom-components/inputs/LabelNode';\nimport ButtonNode from './custom-components/inputs/ButtonNode';\nimport PasswordNode from './custom-components/inputs/PasswordNode';\nimport SelectNode from './custom-components/inputs/SelectNode';\nimport RadioNode from './custom-components/inputs/RadioNode';\nimport CheckBoxNode from './custom-components/inputs/CheckBoxNode';\nimport DateTimeNode from './custom-components/inputs/DateTimeNode';\nimport SignatureNode from './custom-components/inputs/SignatureNode';\nimport ImageNode from './custom-components/inputs/ImageNode';\nimport InputDialogue from './InputDialogue';\nimport { Col, Row } from 'react-bootstrap';\nimport Properties from './FieldProperties';\nimport { dispatch } from 'redux/store';\nimport { MODEL_CONST } from 'redux/constants/modelConstants';\nimport { useSelector } from 'react-redux';\nimport { showError, showSuccess } from 'utils/package_config/toast';\n\nexport default function FormBuilder({ onChange, form, setState }) {\n    const reactFlowWrapper = useRef(null);\n    const { form_builder_field } = useSelector(state => state.model);\n    const initialNodes = JSON.parse(localStorage.getItem('formNodes')) || [];\n    const [nodes, setNodes, onNodesChange] = useNodesState(form?.components || initialNodes); // \n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\n    const [editingInputField, setInputField] = useState();\n    const [selectedNode, setSelectedNode] = useState();\n    const bouncedNodes = useDebounce(nodes, 500);\n\n    useEffect(() => {\n        if (!!bouncedNodes?.length)\n            // localStorage.setItem(\"formNodes\", JSON.stringify(bouncedNodes));\n            localStorage.setItem(\"formNodes\", JSON.stringify([]));\n        onChange({ components: bouncedNodes })\n    }, [bouncedNodes, onChange]);\n\n    useEffect(() => {\n        const formNodes = form?.components && form.components.map((node) => {\n            return buildInputNode({\n                id: node.id,\n                type: node.type,\n                position: node.position,\n                output: node.output,\n                nodeData: node.data,\n                style: node.style\n            })\n        });\n        setNodes(formNodes || initialNodes); // \n        //eslint-disable-next-line\n    }, [setNodes]);\n\n    const onDragOver = useCallback((event) => {\n        event.preventDefault();\n        event.dataTransfer.dropEffect = 'move';\n    }, []);\n\n    const onDrop = useCallback((event) => {\n        event.preventDefault();\n        const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n        const type = event.dataTransfer.getData('application/reactflow');\n        // check if the dropped element is valid\n        if (typeof type === 'undefined' || !type) return;\n        const position = reactFlowInstance.project({\n            x: event.clientX - reactFlowBounds.left,\n            y: event.clientY - reactFlowBounds.top,\n        });\n        let builtNode = buildInputNode({ type, position });\n        setNodes((nds) => [...nds?.map((i => ({ ...i, selected: false })))].concat({ ...builtNode, selected: true }));\n    }, [reactFlowInstance, setNodes]);\n\n    const onCopyNode = useCallback(async () => {\n        if (!selectedNode) return showError(\"Please select item to copy\", { id: \"form_builder_error\" })\n        dispatch({ type: MODEL_CONST.FORM_BUILDER_CLIPBOARD_FIELD, payload: { form_builder_field: selectedNode } })\n        showSuccess(\"Field Copied to board\", { id: \"form_builder_copy\" });\n    }, [selectedNode]);\n\n    const onPasteNode = useCallback(() => {\n        if (!form_builder_field) return showError(\"No item found on board\", { id: \"form_builder_error\" })\n        const POSITION_VAR = 25;\n        let field = form_builder_field;\n        field.id = `dndnode_${Date.now()}`\n        field.name = \"\"\n        field.position = {\n            x: form_builder_field.position.x + POSITION_VAR,\n            y: form_builder_field.position.y - POSITION_VAR,\n        };\n        field.selected = false;\n        field.positionAbsolute = field.position;\n        setNodes(prev => [...prev, field]);\n        dispatch({ type: MODEL_CONST.FORM_BUILDER_CLIPBOARD_FIELD, payload: { form_builder_field: null } });\n        showSuccess(\"Field Pasted to board\", { id: \"form_builder_paste\" });\n    }, [form_builder_field, setNodes]);\n\n    const onCutNode = useCallback(async () => {\n        if (!selectedNode) return showError(\"Please select item to cut\", { id: \"form_builder_error\" })\n        dispatch({ type: MODEL_CONST.FORM_BUILDER_CLIPBOARD_FIELD, payload: { form_builder_field: selectedNode } })\n        showSuccess(\"Field Cut from board\", { id: \"form_builder_cut\" });\n        setNodes(nd => nd.filter(i => i.id !== selectedNode.id));\n    }, [selectedNode, setNodes]);\n\n    const onCancelNode = useCallback(() => {\n        if (!form_builder_field) return;\n        setSelectedNode();\n        dispatch({ type: MODEL_CONST.FORM_BUILDER_CLIPBOARD_FIELD, payload: { form_builder_field: null } })\n        showSuccess(\"Field Removed\", { id: \"form_builder_cancel\" });\n    }, [form_builder_field]);\n\n    const nodeTypes = useMemo(() => {\n        return {\n            LabelNode: props => <LabelNode {...props} setInputField={setInputField} />,\n            TextFieldNode: props => <TextField {...props} setInputField={setInputField} />,\n            TextAreaNode: props => <TextAreaNode {...props} setInputField={setInputField} />,\n            NumberNode: props => <NumberNode {...props} setInputField={setInputField} />,\n            ButtonNode: props => <ButtonNode {...props} setInputField={setInputField} />,\n            PasswordNode: props => <PasswordNode {...props} setInputField={setInputField} />,\n            SelectNode: props => <SelectNode {...props} setInputField={setInputField} />,\n            RadioNode: props => <RadioNode {...props} setInputField={setInputField} />,\n            CheckBoxNode: props => <CheckBoxNode {...props} setInputField={setInputField} />,\n            DateTimeNode: props => <DateTimeNode {...props} setInputField={setInputField} />,\n            SignatureNode: props => <SignatureNode {...props} setInputField={setInputField} />,\n            ImageNode: props => <ImageNode {...props} setInputField={setInputField} />,\n        }\n    }, []);\n\n    const { pageHeight = 0 } = useMemo(() => {\n        let maxCoordinates = { pageHeight: 2000 }\n        if (!!bouncedNodes?.length) {\n            const ymin = Math.min(...bouncedNodes.map(i => i.position.y)) || 2000;\n            const ymax = Math.max(...bouncedNodes.map(i => i.position.y)) || 2000;\n            maxCoordinates = { pageHeight: Number((ymax - ymin).toFixed(0)) + 1000 }\n        }\n        return maxCoordinates;\n    }, [bouncedNodes]);\n\n    return (<>\n        <div className=\"hcmd-form-builder\">\n            <Sidebar\n                onCopyNode={onCopyNode}\n                onPasteNode={onPasteNode}\n                onCutNode={onCutNode}\n                onCancelNode={onCancelNode}\n            />\n            <ReactFlowProvider>\n                <Row>\n                    <Col md={8} className=\"d-flex justify-content-center\">\n                        <div className=\"form-canvas dndflow\" style={{ height: \"85vh\", maxWidth: 1200 }}>\n                            {/* <Sidebar /> */}\n                            <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\n                                <ReactFlow\n                                    nodes={nodes.filter(i => !i?.data?.onlyOutput?.length)}\n                                    // nodes={nodes}\n                                    onNodesChange={onNodesChange}\n                                    onInit={setReactFlowInstance}\n                                    onDrop={onDrop}\n                                    onDragOver={onDragOver}\n                                    nodeTypes={nodeTypes}\n                                    defaultViewport={{ x: 0, y: 0, zoom: 1 }}\n                                    // fitView\n                                    selectNodesOnDrag\n                                    draggable={false}\n                                    zoomOnScroll={false}\n                                    zoomOnPinch={false}\n                                    zoomOnDoubleClick={false}\n                                    panOnDrag={false}\n                                    panOnScroll={true}\n                                    panOnScrollMode={\"free\"}\n                                    selectionOnDrag={true}\n                                    onSelectionChange={({ nodes }) =>\n                                        setSelectedNode(!!nodes.length ? nodes[0] : null)}\n                                    // style={{ overflow: \"none\" }}\n                                    style={{ background: '#fff' }}\n                                    // onSelect={e => console.log('e', e)}\n                                    // nodesDraggable={false}\n                                    // nodesFocusable={false}\n                                    // edges={edges}\n                                    // onEdgesChange={onEdgesChange}\n                                    // onConnect={onConnect}\n                                    // snapToGrid={true}\n                                    // snapGrid={snapGrid}\n                                    translateExtent={[[0, 0], [1200, pageHeight]]}\n                                >\n                                    <Controls\n                                        showZoom={false}\n                                        showFitView={false}\n                                    />\n                                    <Background color=\"#aaa\" gap={16} />\n                                </ReactFlow>\n                            </div>\n                        </div>\n                    </Col>\n                    <Col md={4}>\n                        <Properties\n                            key={selectedNode?.id}\n                            field={selectedNode}\n                            setField={setSelectedNode}\n                            setNodes={setNodes}\n                            setState={setState}\n                        />\n                    </Col>\n                </Row>\n            </ReactFlowProvider>\n            {<InputDialogue\n                editingInputField={editingInputField}\n                setInputField={setInputField} />}\n        </div>\n    </>)\n}"],"names":["inputFields","group","fields","id","name","label","action","icon","_jsx","ContentCutIcon","ContentCopyIcon","ContentPasteIcon","CancelIcon","TextFieldsIcon","InputCursorText","fontSize","fontWeight","TextareaT","UiChecks","MenuDown","UiRadios","Image","SmartButton","Calendar","DrawIcon","Sidebar","_ref","onCopyNode","onPasteNode","onCutNode","onCancelNode","onDragStart","useCallback","event","nodeType","dataTransfer","setData","effectAllowed","onClickTool","field","className","role","children","map","index1","inputfield","index2","MuiTooltip","title","draggable","onClick","GenerateField","component","type","key","components","weight","input","placeholder","tooltip","dataSrc","valueProperty","data","custom","context","values","push","value","utils","eachComponent","instance","options","editForm","path","conditional","json","var","defaultValue","collapsible","collapsed","style","rows","editor","hideLabel","as","tag","content","description","JSON","stringify","theme","DialogueBody","editField","activeTab","setActiveTab","useState","fieldJsonEditor","useMemo","_inputDialogueTabs$co","_jsxs","Card","Header","inputDialogueTabs","tab","concat","Body","find","i","comp","fieldPreviewer","Button","variant","Row","Col","sm","md","getJsonFields","modalHeader","arguments","length","undefined","InputDialogue","editingInputField","setInputField","JsonInputFields","getModalFields","Modal","show","onHide","dialogClassName","_Fragment","closeButton","Title","_ref2","FormBuilder","onChange","form","setState","reactFlowWrapper","useRef","form_builder_field","useSelector","state","model","initialNodes","parse","localStorage","getItem","nodes","setNodes","onNodesChange","useNodesState","reactFlowInstance","setReactFlowInstance","selectedNode","setSelectedNode","bouncedNodes","useDebounce","useEffect","setItem","formNodes","node","buildInputNode","position","output","nodeData","onDragOver","preventDefault","dropEffect","onDrop","reactFlowBounds","current","getBoundingClientRect","getData","project","x","clientX","left","y","clientY","top","builtNode","nds","selected","async","showError","dispatch","MODEL_CONST","FORM_BUILDER_CLIPBOARD_FIELD","payload","showSuccess","Date","now","positionAbsolute","prev","nd","filter","nodeTypes","LabelNode","props","TextFieldNode","TextField","TextAreaNode","NumberNode","ButtonNode","PasswordNode","SelectNode","RadioNode","CheckBoxNode","DateTimeNode","SignatureNode","ImageNode","pageHeight","maxCoordinates","ymin","Math","min","ymax","max","Number","toFixed","ReactFlowProvider","height","maxWidth","ref","ReactFlow","_i$data","_i$data$onlyOutput","onlyOutput","onInit","defaultViewport","zoom","selectNodesOnDrag","zoomOnScroll","zoomOnPinch","zoomOnDoubleClick","panOnDrag","panOnScroll","panOnScrollMode","selectionOnDrag","onSelectionChange","background","translateExtent","Controls","showZoom","showFitView","Background","color","gap","Properties","setField"],"sourceRoot":""}