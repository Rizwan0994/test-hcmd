{"version":3,"file":"static/js/793.837de90a.chunk.js","mappings":"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","sources":["Routes/FormBuilder/FormTemplate/FormOutput/FormRenderer.jsx"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { ReactFlow, useNodesState } from 'reactflow'\nimport { isStringNumeric } from 'services/helper';\nimport useDebounce from 'services/hooks/useDebounce';\nimport ButtonNode from '../Builder/custom-components/inputs/ButtonNode';\nimport CheckBoxNode from '../Builder/custom-components/inputs/CheckBoxNode';\nimport DateTimeNode from '../Builder/custom-components/inputs/DateTimeNode';\nimport ImageNode from '../Builder/custom-components/inputs/ImageNode';\nimport LabelNode from '../Builder/custom-components/inputs/LabelNode';\nimport NumberNode from '../Builder/custom-components/inputs/NumberNode';\nimport PasswordNode from '../Builder/custom-components/inputs/PasswordNode';\nimport RadioNode from '../Builder/custom-components/inputs/RadioNode';\nimport SelectNode from '../Builder/custom-components/inputs/SelectNode';\nimport SignatureNode from '../Builder/custom-components/inputs/SignatureNode';\nimport TextAreaNode from '../Builder/custom-components/inputs/TextAreaNode';\nimport TextField from '../Builder/custom-components/inputs/TextField';\nimport { buildInputNode } from '../Builder/Services/NodeBuilder';\n\nexport default function FormRenderer({\n    onChange = () => { },\n    form,\n    height,\n    setSelectedNode = () => { },\n    rendered,\n    nodeUpdateDelay = 500\n}) {\n\n    const reactFlowWrapper = useRef(null);\n    const initialNodes = JSON.parse(localStorage.getItem('formNodes')) || [];\n    const [nodes, setNodes, onNodesChange] = useNodesState(form.components || initialNodes);\n    const [reactFlowInstance, setReactFlowInstance] = useState(null);\n    const bouncedNodes = useDebounce(nodes, nodeUpdateDelay);\n\n    useEffect(() => {\n        if (!!bouncedNodes?.length)\n            // localStorage.setItem(\"formNodes\", JSON.stringify(bouncedNodes));\n            localStorage.setItem(\"formNodes\", JSON.stringify([]));\n        onChange({ components: bouncedNodes }, form)\n        //eslint-disable-next-line\n    }, [bouncedNodes, onChange]);\n\n    useEffect(() => {\n        const formNodes = form.components && form.components.map((node) => {\n            return buildInputNode({ id: node.id, type: node.type, position: node.position, nodeData: node.data })\n        });\n        setNodes(formNodes || initialNodes);\n        //eslint-disable-next-line\n    }, [setNodes]);\n\n    const onDragOver = useCallback((event) => {\n        event.preventDefault();\n        event.dataTransfer.dropEffect = 'move';\n    }, []);\n\n    const onDrop = useCallback((event) => {\n        event.preventDefault();\n        const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n        const type = event.dataTransfer.getData('application/reactflow');\n        // check if the dropped element is valid\n        if (typeof type === 'undefined' || !type) return;\n        const position = reactFlowInstance.project({\n            x: event.clientX - reactFlowBounds.left,\n            y: event.clientY - reactFlowBounds.top,\n        });\n        let builtNode = buildInputNode({ type, position });\n        setNodes((nds) => [...nds?.map((i => ({ ...i, selected: false })))].concat({ ...builtNode, selected: true }));\n    }, [reactFlowInstance, setNodes]);\n\n    const nodeTypes = useMemo(() => {\n        return {\n            LabelNode: props => <LabelNode {...props} output rendered={rendered} />,\n            TextFieldNode: props => <TextField {...props} output rendered={rendered} />,\n            TextAreaNode: props => <TextAreaNode {...props} output rendered={rendered} />,\n            NumberNode: props => <NumberNode {...props} output rendered={rendered} />,\n            ButtonNode: props => <ButtonNode {...props} output rendered={rendered} />,\n            PasswordNode: props => <PasswordNode {...props} output rendered={rendered} />,\n            SelectNode: props => <SelectNode {...props} output rendered={rendered} />,\n            RadioNode: props => <RadioNode {...props} output rendered={rendered} />,\n            CheckBoxNode: props => <CheckBoxNode {...props} output rendered={rendered} />,\n            DateTimeNode: props => <DateTimeNode {...props} output rendered={rendered} />,\n            ImageNode: props => <ImageNode {...props} output rendered={rendered} />,\n            SignatureNode: props => <SignatureNode {...props} output rendered={rendered} />,\n        }\n    }, [rendered]);\n\n    const { pageHeight = 0 } = useMemo(() => {\n        let maxCoordinates = { pageHeight: 2000 }\n        if (!!bouncedNodes?.length) {\n            const ymin = Math.min(...bouncedNodes.map(i => i.position?.y)) || 2000;\n            const ymax = Math.max(...bouncedNodes.map(i => i.position?.y)) || 2000;\n            maxCoordinates = { pageHeight: Number((ymax - ymin).toFixed(0)) + 1000 }\n        }\n        return maxCoordinates;\n    }, [bouncedNodes]);\n\n    return (\n        <div className=\"hcmd-form-builder\">\n            <div className=\"form-canvas dnddlow\" style={{ height: height ? height : \"85vh\", maxWidth: 1200 }}>\n                <div className=\"reactflow-wrapper h-100 bg-light\" ref={reactFlowWrapper}>\n                    <ReactFlow\n                        nodes={nodes}\n                        onNodesChange={onNodesChange}\n                        onInit={setReactFlowInstance}\n                        onDrop={onDrop}\n                        onDragOver={onDragOver}\n                        style={{ background: '#fff' }}\n                        nodeTypes={nodeTypes}\n                        defaultViewport={{ x: 0, y: 0, zoom: 1 }}\n                        // ---------- For Render Only -----------\n                        nodesDraggable={!rendered}\n                        selectNodesOnDrag\n                        nodesFocusable={true}\n                        draggable={false}\n                        zoomOnScroll={false}\n                        zoomOnPinch={false}\n                        zoomOnDoubleClick={false}\n                        panOnDrag={false}\n                        panOnScroll={true}\n                        panOnScrollMode={\"free\"}\n                        selectionOnDrag={true}\n                        // proOptions={{ hideAttribution: true }}\n                        // panOnScrollMode={\"free\"}\n                        onSelectionChange={({ nodes }) =>\n                            setSelectedNode(!!nodes.length ? nodes[0] : null)}\n                        translateExtent={[[0, 0], [1200, pageHeight]]}\n                    // zoomOnScroll={false}\n                    // draggable={true}\n                    // elementsSelectable={false}\n                    // selectNodesOnDrag\n                    // onSelect={e => console.log('e', e)}\n                    // onSelectionChange={({ nodes }) => setSelectedNode(!!nodes.length ? nodes[0] : null)}\n                    // nodesDraggable={false}\n                    // edges={edges}\n                    // onEdgesChange={onEdgesChange}\n                    // onConnect={onConnect}\n                    // snapToGrid={true}\n                    // snapGrid={snapGrid}\n                    >\n                        {/* <Controls\n                                showZoom={false}\n                                showFitView={false}\n                            /> */}\n                    </ReactFlow>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport const calculateByExpression = ({ expression, nodes }) => {\n    const variableNames = [...new Set(expression.match(/[a-zA-Z_]+/g))];\n    let modifiedExp = expression, isAnyNull = false;\n    if (!variableNames?.length) return;\n    let fieldNameValues =\n        variableNames.map((field) => {\n            if (!field) return ({ name: field, value: \"\" });\n            const findNodeData = nodes.find(nd => nd.data.name === field)?.data;\n            if (!findNodeData || !findNodeData.value) return ({ name: field, value: \"\" });\n            return ({ name: field, value: findNodeData.value });\n        });\n\n    for (const iterator of variableNames) {\n        let findVal = fieldNameValues.find(j => j.name === iterator).value || \"\";\n        findVal = findVal.trim();\n        modifiedExp = modifiedExp.replaceAll(iterator, isStringNumeric(findVal) ? `${Number(findVal) || 0}` : `'${String(findVal) || \"\"}'`);\n        if (!findVal) isAnyNull = true;\n    }\n    if (!isAnyNull) {\n        let value = `${eval(modifiedExp)}` || \"\"; //eslint-disable-line\n        if (isStringNumeric(value)) value = `${Number(value).toFixed(0)}`\n        return { value, isNull: isAnyNull }\n    }\n    return { isNull: isAnyNull }\n}"],"names":["FormRenderer","_ref","onChange","form","height","setSelectedNode","rendered","nodeUpdateDelay","reactFlowWrapper","useRef","initialNodes","JSON","parse","localStorage","getItem","nodes","setNodes","onNodesChange","useNodesState","components","reactFlowInstance","setReactFlowInstance","useState","bouncedNodes","useDebounce","useEffect","length","setItem","stringify","formNodes","map","node","buildInputNode","id","type","position","nodeData","data","onDragOver","useCallback","event","preventDefault","dataTransfer","dropEffect","onDrop","reactFlowBounds","current","getBoundingClientRect","getData","project","x","clientX","left","y","clientY","top","builtNode","nds","i","selected","concat","nodeTypes","useMemo","LabelNode","props","_jsx","output","TextFieldNode","TextField","TextAreaNode","NumberNode","ButtonNode","PasswordNode","SelectNode","RadioNode","CheckBoxNode","DateTimeNode","ImageNode","SignatureNode","pageHeight","maxCoordinates","ymin","Math","min","_i$position","ymax","max","_i$position2","Number","toFixed","className","children","style","maxWidth","ref","ReactFlow","onInit","background","defaultViewport","zoom","nodesDraggable","selectNodesOnDrag","nodesFocusable","draggable","zoomOnScroll","zoomOnPinch","zoomOnDoubleClick","panOnDrag","panOnScroll","panOnScrollMode","selectionOnDrag","onSelectionChange","_ref2","translateExtent","calculateByExpression","_ref3","expression","variableNames","Set","match","modifiedExp","isAnyNull","fieldNameValues","field","_nodes$find","name","value","findNodeData","find","nd","iterator","findVal","j","trim","replaceAll","isStringNumeric","String","eval","isNull"],"sourceRoot":""}